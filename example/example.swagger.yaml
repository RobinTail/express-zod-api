openapi: 3.0.0
info:
  title: Example API
  version: 2.8.2
paths:
  /v1/user/retrieve:
    get:
      responses:
        "200":
          description: GET /v1/user/retrieve Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        format: int64
                        minimum: 0
                        exclusiveMinimum: false
                        maximum: 9007199254740991
                        exclusiveMaximum: false
                      name:
                        type: string
                    required:
                      - id
                      - name
                required:
                  - status
                  - data
        "400":
          description: GET /v1/user/retrieve Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
      description: example user retrieval endpoint
      parameters:
        - name: id
          in: query
          required: true
          schema:
            description: a numeric string containing the id of the user
            type: string
            pattern: /\d+/
  /v1/avatar/send:
    get:
      responses:
        "200":
          description: GET /v1/avatar/send Successful response
          content:
            image/svg+xml:
              schema:
                type: string
        "400":
          description: GET /v1/avatar/send Error response
          content:
            text/plain:
              schema:
                type: string
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            description: GET /v1/avatar/send parameter
            type: string
            pattern: /\d+/
  /v1/avatar/stream:
    get:
      responses:
        "200":
          description: GET /v1/avatar/stream Successful response
          content:
            image/*:
              schema:
                type: string
                format: binary
        "400":
          description: GET /v1/avatar/stream Error response
          content:
            text/plain:
              schema:
                type: string
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            description: GET /v1/avatar/stream parameter
            type: string
            pattern: /\d+/
  /v1/avatar/upload:
    post:
      responses:
        "200":
          description: POST /v1/avatar/upload Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                      size:
                        type: integer
                        format: int64
                        minimum: 0
                        exclusiveMinimum: false
                        maximum: 9007199254740991
                        exclusiveMaximum: false
                      mime:
                        type: string
                      hash:
                        type: string
                      otherInputs:
                        type: object
                        additionalProperties:
                          nullable: true
                          format: any
                    required:
                      - name
                      - size
                      - mime
                      - hash
                      - otherInputs
                required:
                  - status
                  - data
        "400":
          description: POST /v1/avatar/upload Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
      requestBody:
        content:
          multipart/form-data:
            schema:
              description: POST /v1/avatar/upload request body
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
              required:
                - avatar
  /v2/user:
    post:
      responses:
        "200":
          description: POST /v2/user Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                      timestamp:
                        type: integer
                        format: int64
                        minimum: 0
                        exclusiveMinimum: false
                        maximum: 9007199254740991
                        exclusiveMaximum: false
                    required:
                      - name
                      - timestamp
                required:
                  - status
                  - data
        "400":
          description: POST /v2/user Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
      description: example user update endpoint
      requestBody:
        content:
          application/json:
            schema:
              description: POST /v2/user request body
              type: object
              properties:
                key:
                  type: string
                  minLength: 1
                id:
                  type: integer
                  format: int64
                  minimum: 0
                  exclusiveMinimum: false
                  maximum: 9007199254740991
                  exclusiveMaximum: false
                name:
                  type: string
                  minLength: 1
              required:
                - key
                - id
                - name
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: http://example.com

