openapi: 3.0.0
info:
  title: Example API
  version: 6.2.1
paths:
  /v1/user/retrieve:
    get:
      responses:
        "200":
          description: GET /v1/user/retrieve Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        format: int64
                        minimum: 0
                        exclusiveMinimum: false
                        maximum: 9007199254740991
                        exclusiveMaximum: false
                      name:
                        type: string
                    required:
                      - id
                      - name
                required:
                  - status
                  - data
        "400":
          description: GET /v1/user/retrieve Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      description: example user retrieval endpoint
      parameters:
        - name: id
          in: query
          required: true
          schema:
            description: a numeric string containing the id of the user
            type: string
            pattern: /\d+/
  "/v1/user/{id}":
    post:
      responses:
        "200":
          description: POST /v1/user/:id Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    example:
                      name: John Doe
                      createdAt: 2021-12-31T00:00:00.000Z
                    type: object
                    properties:
                      name:
                        type: string
                      createdAt:
                        type: string
                        format: date-time
                        description: YYYY-MM-DDTHH:mm:ss.sssZ
                        externalDocs:
                          url: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString
                    required:
                      - name
                      - createdAt
                required:
                  - status
                  - data
              examples:
                example1:
                  value:
                    status: success
                    data:
                      name: John Doe
                      createdAt: 2021-12-31T00:00:00.000Z
        "400":
          description: POST /v1/user/:id Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      description: example user update endpoint
      parameters:
        - name: id
          in: path
          required: true
          schema:
            description: POST /v1/user/:id parameter
            type: string
          examples:
            example1:
              value: "12"
      requestBody:
        content:
          application/json:
            schema:
              description: POST /v1/user/:id request body
              allOf:
                - example:
                    key: 1234-5678-90
                  type: object
                  properties:
                    key:
                      type: string
                      minLength: 1
                  required:
                    - key
                - example:
                    name: John Doe
                    birthday: 1963-04-21
                  type: object
                  properties:
                    name:
                      type: string
                      minLength: 1
                    birthday:
                      type: string
                      format: date-time
                      pattern: ^\d{4}-\d{2}-\d{2}(T\d{2}:\d{2}:\d{2}(\.\d{3})?)?Z?$
                      description: YYYY-MM-DDTHH:mm:ss.sssZ
                      externalDocs:
                        url: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString
                  required:
                    - name
                    - birthday
            examples:
              example1:
                value:
                  key: 1234-5678-90
                  name: John Doe
                  birthday: 1963-04-21
  /v1/avatar/send:
    get:
      responses:
        "200":
          description: GET /v1/avatar/send Successful response
          content:
            image/svg+xml:
              schema:
                type: string
        "400":
          description: GET /v1/avatar/send Error response
          content:
            text/plain:
              schema:
                type: string
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            description: GET /v1/avatar/send parameter
            type: string
            pattern: /\d+/
  /v1/avatar/stream:
    get:
      responses:
        "200":
          description: GET /v1/avatar/stream Successful response
          content:
            image/*:
              schema:
                type: string
                format: binary
        "400":
          description: GET /v1/avatar/stream Error response
          content:
            text/plain:
              schema:
                type: string
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            description: GET /v1/avatar/stream parameter
            type: string
            pattern: /\d+/
  /v1/avatar/upload:
    post:
      responses:
        "200":
          description: POST /v1/avatar/upload Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                      size:
                        type: integer
                        format: int64
                        minimum: 0
                        exclusiveMinimum: false
                        maximum: 9007199254740991
                        exclusiveMaximum: false
                      mime:
                        type: string
                      hash:
                        type: string
                      otherInputs:
                        type: object
                        additionalProperties:
                          nullable: true
                          format: any
                    required:
                      - name
                      - size
                      - mime
                      - hash
                      - otherInputs
                required:
                  - status
                  - data
        "400":
          description: POST /v1/avatar/upload Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      requestBody:
        content:
          multipart/form-data:
            schema:
              description: POST /v1/avatar/upload request body
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
              required:
                - avatar
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: http://example.com

