openapi: 3.1.0
info:
  title: Example API
  version: 0.0.0
paths:
  /v1/user/retrieve:
    get:
      operationId: GetV1UserRetrieve
      summary: Retrieves the user.
      description: Example user retrieval endpoint.
      tags:
        - users
      parameters:
        - name: id
          in: query
          required: true
          description: a numeric string containing the id of the user
          schema:
            description: a numeric string containing the id of the user
            type: string
            pattern: \d+
      responses:
        "200":
          description: GET /v1/user/retrieve Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        minimum: 0
                        maximum: 9007199254740991
                      name:
                        type: string
                      features:
                        type: array
                        items:
                          $ref: "#/components/schemas/Schema1"
                    required:
                      - id
                      - name
                      - features
                    additionalProperties: false
                required:
                  - status
                  - data
                additionalProperties: false
        "400":
          description: GET /v1/user/retrieve Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                    additionalProperties: false
                required:
                  - status
                  - error
                additionalProperties: false
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
  /v1/user/{id}/remove:
    delete:
      operationId: DeleteV1UserIdRemove
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          description: numeric string
          schema:
            description: numeric string
            type: string
            pattern: \d+
      responses:
        "204":
          description: DELETE /v1/user/:id/remove Positive response
        "404":
          description: DELETE /v1/user/:id/remove Negative response
  /v1/user/{id}:
    patch:
      operationId: PatchV1UserId
      summary: Changes the user record. Example user update endpâ€¦
      description: Changes the user record. Example user update endpoint.
      tags:
        - users
      parameters:
        - name: token
          in: header
          required: true
          description: PATCH /v1/user/:id Parameter
          schema:
            examples:
              - "1234567890"
            type: string
            minLength: 1
          examples:
            example1:
              value: "1234567890"
        - name: id
          in: path
          required: true
          description: PATCH /v1/user/:id Parameter
          schema:
            examples:
              - "12"
            type: string
          examples:
            example1:
              value: "12"
      requestBody:
        description: PATCH /v1/user/:id Request body
        content:
          application/json:
            schema:
              type: object
              properties:
                key:
                  examples:
                    - 1234-5678-90
                  type: string
                  minLength: 1
                name:
                  examples:
                    - John Doe
                  type: string
                  minLength: 1
                birthday:
                  description: the day of birth
                  type: string
                  format: date-time
                  pattern: ^\d{4}-\d{2}-\d{2}(T\d{2}:\d{2}:\d{2}(\.\d+)?)?Z?$
                  externalDocs:
                    url: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString
                  examples:
                    - 1963-04-21
              required:
                - key
                - name
                - birthday
            examples:
              example1:
                value:
                  key: 1234-5678-90
                  name: John Doe
                  birthday: 1963-04-21
        required: true
      security:
        - APIKEY_1: []
          APIKEY_2: []
      responses:
        "200":
          description: PATCH /v1/user/:id Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                    properties:
                      name:
                        examples:
                          - John Doe
                        type: string
                      createdAt:
                        description: account creation date
                        type: string
                        format: date-time
                        externalDocs:
                          url: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString
                        examples:
                          - 2021-12-31T00:00:00.000Z
                    required:
                      - name
                      - createdAt
                    additionalProperties: false
                    examples:
                      - name: John Doe
                        createdAt: 2021-12-31T00:00:00.000Z
                required:
                  - status
                  - data
                additionalProperties: false
              examples:
                example1:
                  value:
                    status: success
                    data:
                      name: John Doe
                      createdAt: 2021-12-31T00:00:00.000Z
        "400":
          description: PATCH /v1/user/:id Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                    additionalProperties: false
                required:
                  - status
                  - error
                additionalProperties: false
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
  /v1/user/create:
    post:
      operationId: PostV1UserCreate
      tags:
        - users
      requestBody:
        description: POST /v1/user/create Request body
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: first name and last name
                  examples:
                    - John Doe
                  type: string
                  pattern: ^\w+ \w+$
              required:
                - name
            examples:
              example1:
                value:
                  name: John Doe
        required: true
      responses:
        "201":
          description: POST /v1/user/create Positive response 201
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: created
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        exclusiveMinimum: 0
                        maximum: 9007199254740991
                    required:
                      - id
                    additionalProperties: false
                required:
                  - status
                  - data
                additionalProperties: false
        "202":
          description: POST /v1/user/create Positive response 202
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: created
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        exclusiveMinimum: 0
                        maximum: 9007199254740991
                    required:
                      - id
                    additionalProperties: false
                required:
                  - status
                  - data
                additionalProperties: false
        "400":
          description: POST /v1/user/create Negative response 400
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  reason:
                    type: string
                required:
                  - status
                  - reason
                additionalProperties: false
        "409":
          description: POST /v1/user/create Negative response 409
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: exists
                  id:
                    type: integer
                    minimum: -9007199254740991
                    maximum: 9007199254740991
                required:
                  - status
                  - id
                additionalProperties: false
        "500":
          description: POST /v1/user/create Negative response 500
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  reason:
                    type: string
                required:
                  - status
                  - reason
                additionalProperties: false
  /v1/user/list:
    get:
      operationId: GetV1UserList
      tags:
        - users
      responses:
        "200":
          description: GET /v1/user/list Positive response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                  required:
                    - name
                  additionalProperties: false
              examples:
                example1:
                  value:
                    - name: Hunter Schafer
                    - name: Laverne Cox
                    - name: Patti Harrison
        "400":
          description: GET /v1/user/list Negative response
          content:
            application/json:
              schema:
                type: string
              examples:
                example1:
                  value: Sample error message
  /v1/avatar/send:
    get:
      operationId: GetV1AvatarSend
      summary: Sends a file content.
      deprecated: true
      tags:
        - files
        - users
      parameters:
        - name: userId
          in: query
          required: true
          description: GET /v1/avatar/send Parameter
          schema:
            type: string
            pattern: \d+
      responses:
        "200":
          description: GET /v1/avatar/send Positive response
          content:
            image/svg+xml:
              schema:
                type: string
        "400":
          description: GET /v1/avatar/send Negative response
          content:
            text/plain:
              schema:
                type: string
    head:
      operationId: HeadV1AvatarSend
      summary: Sends a file content.
      deprecated: true
      tags:
        - files
        - users
      parameters:
        - name: userId
          in: query
          required: true
          description: HEAD /v1/avatar/send Parameter
          schema:
            type: string
            pattern: \d+
      responses:
        "200":
          description: HEAD /v1/avatar/send Positive response
        "400":
          description: HEAD /v1/avatar/send Negative response
          content:
            text/plain:
              schema:
                type: string
  /v1/avatar/stream:
    get:
      operationId: GetV1AvatarStream
      summary: Streams a file content.
      tags:
        - users
        - files
      parameters:
        - name: userId
          in: query
          required: true
          description: GET /v1/avatar/stream Parameter
          schema:
            type: string
            pattern: \d+
      responses:
        "200":
          description: GET /v1/avatar/stream Positive response
          content:
            image/*:
              schema:
                externalDocs:
                  description: raw binary data
                  url: https://swagger.io/specification/#working-with-binary-data
        "400":
          description: GET /v1/avatar/stream Negative response
          content:
            text/plain:
              schema:
                type: string
    head:
      operationId: HeadV1AvatarStream
      summary: Streams a file content.
      tags:
        - users
        - files
      parameters:
        - name: userId
          in: query
          required: true
          description: HEAD /v1/avatar/stream Parameter
          schema:
            type: string
            pattern: \d+
      responses:
        "200":
          description: HEAD /v1/avatar/stream Positive response
        "400":
          description: HEAD /v1/avatar/stream Negative response
          content:
            text/plain:
              schema:
                type: string
  /v1/avatar/upload:
    post:
      operationId: PostV1AvatarUpload
      summary: Handles a file upload.
      description: Handles a file upload.
      tags:
        - files
      requestBody:
        description: POST /v1/avatar/upload Request body
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
              required:
                - avatar
              additionalProperties: {}
        required: true
      responses:
        "200":
          description: POST /v1/avatar/upload Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                      size:
                        type: integer
                        minimum: 0
                        maximum: 9007199254740991
                      mime:
                        type: string
                      hash:
                        type: string
                      otherInputs:
                        type: object
                        propertyNames:
                          type: string
                        additionalProperties: {}
                    required:
                      - name
                      - size
                      - mime
                      - hash
                      - otherInputs
                    additionalProperties: false
                required:
                  - status
                  - data
                additionalProperties: false
        "400":
          description: POST /v1/avatar/upload Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                    additionalProperties: false
                required:
                  - status
                  - error
                additionalProperties: false
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
  /v1/avatar/raw:
    post:
      operationId: PostV1AvatarRaw
      tags:
        - files
      requestBody:
        description: POST /v1/avatar/raw Request body
        content:
          application/octet-stream:
            schema:
              externalDocs:
                description: raw binary data
                url: https://swagger.io/specification/#working-with-binary-data
        required: true
      responses:
        "200":
          description: POST /v1/avatar/raw Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                    properties:
                      length:
                        type: integer
                        minimum: 0
                        maximum: 9007199254740991
                    required:
                      - length
                    additionalProperties: false
                required:
                  - status
                  - data
                additionalProperties: false
        "400":
          description: POST /v1/avatar/raw Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                    additionalProperties: false
                required:
                  - status
                  - error
                additionalProperties: false
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
  /v1/events/stream:
    get:
      operationId: GetV1EventsStream
      tags:
        - subscriptions
      parameters:
        - name: trigger
          in: query
          deprecated: true
          required: false
          description: for testing error response
          schema:
            deprecated: true
            description: for testing error response
            type: string
      responses:
        "200":
          description: GET /v1/events/stream Positive response
          content:
            text/event-stream:
              schema:
                type: object
                properties:
                  data:
                    type: integer
                    exclusiveMinimum: 0
                    maximum: 9007199254740991
                  event:
                    type: string
                    const: time
                  id:
                    type: string
                  retry:
                    type: integer
                    exclusiveMinimum: 0
                    maximum: 9007199254740991
                required:
                  - data
                  - event
                additionalProperties: false
        "400":
          description: GET /v1/events/stream Negative response
          content:
            text/plain:
              schema:
                type: string
  /v1/forms/feedback:
    post:
      operationId: PostV1FormsFeedback
      tags:
        - forms
      requestBody:
        description: POST /v1/forms/feedback Request body
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                email:
                  type: string
                  format: email
                  pattern: ^(?!\.)(?!.*\.\.)([A-Za-z0-9_'+\-\.]*)[A-Za-z0-9_+-]@([A-Za-z0-9][A-Za-z0-9\-]*\.)+[A-Za-z]{2,}$
                message:
                  type: string
                  minLength: 1
              required:
                - name
                - email
                - message
        required: true
      responses:
        "200":
          description: POST /v1/forms/feedback Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                    properties:
                      crc:
                        type: integer
                        exclusiveMinimum: 0
                        maximum: 9007199254740991
                    required:
                      - crc
                    additionalProperties: false
                required:
                  - status
                  - data
                additionalProperties: false
        "400":
          description: POST /v1/forms/feedback Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                    additionalProperties: false
                required:
                  - status
                  - error
                additionalProperties: false
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
components:
  schemas:
    Schema1:
      type: object
      properties:
        title:
          type: string
        features:
          type: array
          items:
            $ref: "#/components/schemas/Schema1"
      required:
        - title
      additionalProperties: false
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes:
    APIKEY_1:
      type: apiKey
      in: query
      name: key
      x-in-actual: body
      description: key MUST be supplied within the request body instead of query
    APIKEY_2:
      type: apiKey
      in: header
      name: token
  links: {}
  callbacks: {}
tags:
  - name: users
    description: Everything about the users
  - name: files
    description: Everything about the files processing
  - name: subscriptions
    description: Everything about the subscriptions
servers:
  - url: https://example.com
