openapi: 3.1.0
info:
  title: Example API
  version: 20.15.0
paths:
  /v1/user/retrieve:
    get:
      operationId: GetV1UserRetrieve
      summary: Retrieves the user.
      description: Example user retrieval endpoint.
      tags:
        - users
      parameters:
        - name: id
          in: query
          required: true
          description: a numeric string containing the id of the user
          schema:
            type: string
            pattern: \d+
            description: a numeric string containing the id of the user
      responses:
        "200":
          description: GET /v1/user/retrieve Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        format: int64
                        minimum: 0
                        maximum: 9007199254740991
                      name:
                        type: string
                      features:
                        type: array
                        items:
                          type: object
                          properties:
                            title:
                              type: string
                            features:
                              $ref: "#/components/schemas/Schema1"
                          required:
                            - title
                            - features
                    required:
                      - id
                      - name
                      - features
                required:
                  - status
                  - data
        "400":
          description: GET /v1/user/retrieve Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
  /v1/user/{id}:
    patch:
      operationId: PatchV1UserId
      summary: Changes the user record. Example user update endpâ€¦
      description: Changes the user record. Example user update endpoint.
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          description: PATCH /v1/user/:id Parameter
          schema:
            type: string
          examples:
            example1:
              value: "12"
      requestBody:
        description: PATCH /v1/user/:id Request body
        content:
          application/json:
            schema:
              type: object
              properties:
                key:
                  type: string
                  minLength: 1
                name:
                  type: string
                  minLength: 1
                birthday:
                  description: YYYY-MM-DDTHH:mm:ss.sssZ
                  type: string
                  format: date-time
                  pattern: ^\d{4}-\d{2}-\d{2}(T\d{2}:\d{2}:\d{2}(\.\d+)?)?Z?$
                  externalDocs:
                    url: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString
              required:
                - key
                - name
                - birthday
            examples:
              example1:
                value:
                  key: 1234-5678-90
                  name: John Doe
                  birthday: 1963-04-21
      security:
        - APIKEY_1: []
          APIKEY_2: []
      responses:
        "200":
          description: PATCH /v1/user/:id Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                      createdAt:
                        description: YYYY-MM-DDTHH:mm:ss.sssZ
                        type: string
                        format: date-time
                        externalDocs:
                          url: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString
                    required:
                      - name
                      - createdAt
                    examples:
                      - name: John Doe
                        createdAt: 2021-12-31T00:00:00.000Z
                required:
                  - status
                  - data
              examples:
                example1:
                  value:
                    status: success
                    data:
                      name: John Doe
                      createdAt: 2021-12-31T00:00:00.000Z
        "400":
          description: PATCH /v1/user/:id Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
  /v1/user/create:
    post:
      operationId: PostV1UserCreate
      tags:
        - users
      requestBody:
        description: POST /v1/user/create Request body
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
              required:
                - name
      responses:
        "201":
          description: POST /v1/user/create Positive response 201
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: created
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        format: int64
                        exclusiveMinimum: 0
                        maximum: 9007199254740991
                    required:
                      - id
                required:
                  - status
                  - data
        "202":
          description: POST /v1/user/create Positive response 202
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: created
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        format: int64
                        exclusiveMinimum: 0
                        maximum: 9007199254740991
                    required:
                      - id
                required:
                  - status
                  - data
        "400":
          description: POST /v1/user/create Negative response 400
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  reason:
                    type: string
                required:
                  - status
                  - reason
        "409":
          description: POST /v1/user/create Negative response 409
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: exists
                  id:
                    type: integer
                    format: int64
                    minimum: -9007199254740991
                    maximum: 9007199254740991
                required:
                  - status
                  - id
        "500":
          description: POST /v1/user/create Negative response 500
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  reason:
                    type: string
                required:
                  - status
                  - reason
  /v1/user/list:
    get:
      operationId: GetV1UserList
      tags:
        - users
      responses:
        "200":
          description: GET /v1/user/list Positive response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                  required:
                    - name
              examples:
                example1:
                  value:
                    - name: Hunter Schafer
                    - name: Laverne Cox
                    - name: Patti Harrison
        "400":
          description: GET /v1/user/list Negative response
          content:
            application/json:
              schema:
                type: string
              examples:
                example1:
                  value: Sample error message
  /v1/avatar/send:
    get:
      operationId: GetV1AvatarSend
      summary: Sends a file content.
      tags:
        - files
        - users
      parameters:
        - name: userId
          in: query
          required: true
          description: GET /v1/avatar/send Parameter
          schema:
            type: string
            pattern: \d+
      responses:
        "200":
          description: GET /v1/avatar/send Positive response
          content:
            image/svg+xml:
              schema:
                type: string
        "400":
          description: GET /v1/avatar/send Negative response
          content:
            text/plain:
              schema:
                type: string
  /v1/avatar/stream:
    get:
      operationId: GetV1AvatarStream
      summary: Streams a file content.
      tags:
        - users
        - files
      parameters:
        - name: userId
          in: query
          required: true
          description: GET /v1/avatar/stream Parameter
          schema:
            type: string
            pattern: \d+
      responses:
        "200":
          description: GET /v1/avatar/stream Positive response
          content:
            image/*:
              schema:
                type: string
                format: binary
        "400":
          description: GET /v1/avatar/stream Negative response
          content:
            text/plain:
              schema:
                type: string
  /v1/avatar/upload:
    post:
      operationId: PostV1AvatarUpload
      summary: Handles a file upload.
      description: Handles a file upload.
      tags:
        - files
      requestBody:
        description: POST /v1/avatar/upload Request body
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
              required:
                - avatar
      responses:
        "200":
          description: POST /v1/avatar/upload Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                      size:
                        type: integer
                        format: int64
                        minimum: 0
                        maximum: 9007199254740991
                      mime:
                        type: string
                      hash:
                        type: string
                      otherInputs:
                        type: object
                        additionalProperties:
                          format: any
                    required:
                      - name
                      - size
                      - mime
                      - hash
                      - otherInputs
                required:
                  - status
                  - data
        "400":
          description: POST /v1/avatar/upload Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
  /v1/avatar/raw:
    post:
      operationId: PostV1AvatarRaw
      tags:
        - files
      requestBody:
        description: POST /v1/avatar/raw Request body
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        "200":
          description: POST /v1/avatar/raw Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                    properties:
                      length:
                        type: integer
                        format: int64
                        minimum: 0
                        maximum: 9007199254740991
                    required:
                      - length
                required:
                  - status
                  - data
        "400":
          description: POST /v1/avatar/raw Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
components:
  schemas:
    Schema1:
      type: array
      items:
        type: object
        properties:
          title:
            type: string
          features:
            $ref: "#/components/schemas/Schema1"
        required:
          - title
          - features
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes:
    APIKEY_1:
      type: apiKey
      in: query
      name: key
      x-in-actual: body
      description: key MUST be supplied within the request body instead of query
    APIKEY_2:
      type: apiKey
      in: header
      name: token
  links: {}
  callbacks: {}
tags:
  - name: users
    description: Everything about the users
  - name: files
    description: Everything about the files processing
servers:
  - url: https://example.com
