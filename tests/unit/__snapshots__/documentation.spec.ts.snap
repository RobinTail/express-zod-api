// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Documentation > Basic cases > should be able to specify operation 1`] = `
"openapi: 3.1.0
info:
  title: Testing Operation IDs
  version: 3.4.5
paths:
  /v1/getSome/thing:
    get:
      operationId: coolOperationId
      responses:
        "200":
          description: GET /v1/getSome/thing Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties: {}
                required:
                  - status
                  - data
        "400":
          description: GET /v1/getSome/thing Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      description: thing is the path segment
      summary: thing is the path segment
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Basic cases > should be able to specify the operationId provider depending on method 1`] = `
"openapi: 3.1.0
info:
  title: Testing Operation IDs
  version: 3.4.5
paths:
  /v1/getSome/thing:
    get:
      operationId: getCoolOperationId
      responses:
        "200":
          description: GET /v1/getSome/thing Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties: {}
                required:
                  - status
                  - data
        "400":
          description: GET /v1/getSome/thing Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      description: thing is the path segment
      summary: thing is the path segment
    post:
      operationId: postCoolOperationId
      responses:
        "200":
          description: POST /v1/getSome/thing Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties: {}
                required:
                  - status
                  - data
        "400":
          description: POST /v1/getSome/thing Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      description: thing is the path segment
      summary: thing is the path segment
      requestBody:
        description: POST /v1/getSome/thing Request body
        content:
          application/json:
            schema:
              type: object
              properties: {}
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Basic cases > should ensure the uniq operation ids 1`] = `
"openapi: 3.1.0
info:
  title: Testing Operation IDs
  version: 3.4.5
paths:
  /v1/getSome/thing:
    get:
      operationId: GetV1GetSomeThing
      responses:
        "200":
          description: GET /v1/getSome/thing Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties: {}
                required:
                  - status
                  - data
        "400":
          description: GET /v1/getSome/thing Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      description: thing is the path segment
      summary: thing is the path segment
  /v1/getSome/{thing}:
    get:
      operationId: GetV1GetSomeThing2
      responses:
        "200":
          description: GET /v1/getSome/:thing Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties: {}
                required:
                  - status
                  - data
        "400":
          description: GET /v1/getSome/:thing Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      description: thing is the path parameter
      summary: thing is the path parameter
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Basic cases > should ensure uniq security schema names 1`] = `
"openapi: 3.1.0
info:
  title: Testing Security
  version: 3.4.5
paths:
  /v1/getSomething:
    get:
      operationId: GetV1GetSomething
      responses:
        "200":
          description: GET /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      num:
                        type: number
                        format: double
                        minimum: 5e-324
                        maximum: 1.7976931348623157e+308
                    required:
                      - num
                required:
                  - status
                  - data
        "400":
          description: GET /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      parameters:
        - name: key
          in: query
          required: true
          description: GET /v1/getSomething Parameter
          schema:
            type: string
        - name: str
          in: query
          required: true
          description: GET /v1/getSomething Parameter
          schema:
            type: string
      security:
        - APIKEY_1: []
        - HTTP_1: []
  /v1/setSomething:
    post:
      operationId: PostV1SetSomething
      responses:
        "200":
          description: POST /v1/setSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties: {}
                required:
                  - status
                  - data
        "400":
          description: POST /v1/setSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      requestBody:
        description: POST /v1/setSomething Request body
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties: {}
                - type: object
                  properties: {}
      security:
        - HTTP_1: []
          OAUTH2_1:
            - write
  /v1/updateSomething:
    put:
      operationId: PutV1UpdateSomething
      responses:
        "200":
          description: PUT /v1/updateSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties: {}
                required:
                  - status
                  - data
        "400":
          description: PUT /v1/updateSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      requestBody:
        description: PUT /v1/updateSomething Request body
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties: {}
                - type: object
                  properties: {}
      security:
        - HTTP_2: []
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes:
    APIKEY_1:
      type: apiKey
      in: query
      name: key
    HTTP_1:
      type: http
      scheme: bearer
    OAUTH2_1:
      type: oauth2
      flows:
        password:
          tokenUrl: https://some.url
          scopes:
            read: read something
            write: write something
    HTTP_2:
      type: http
      scheme: bearer
      bearerFormat: JWT
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Basic cases > should generate the correct schema for DELETE request without body 1`] = `
"openapi: 3.1.0
info:
  title: Testing DELETE request without body
  version: 3.4.5
paths:
  /v1/deleteSomething:
    delete:
      operationId: DeleteV1DeleteSomething
      responses:
        "200":
          description: DELETE /v1/deleteSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      whatever:
                        type: number
                        format: double
                        minimum: 5e-324
                        maximum: 1.7976931348623157e+308
                    required:
                      - whatever
                required:
                  - status
                  - data
        "400":
          description: DELETE /v1/deleteSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Basic cases > should generate the correct schema for complex types 1`] = `
"openapi: 3.1.0
info:
  title: Testing Complex Types
  version: 3.4.5
paths:
  /v1/getSomething:
    get:
      operationId: GetV1GetSomething
      responses:
        "200":
          description: GET /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      literal:
                        type: string
                        enum:
                          - something
                      transformation:
                        type: number
                        format: double
                        minimum: 5e-324
                        maximum: 1.7976931348623157e+308
                    required:
                      - literal
                      - transformation
                required:
                  - status
                  - data
        "400":
          description: GET /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      parameters:
        - name: array
          in: query
          required: true
          description: GET /v1/getSomething Parameter
          schema:
            type: array
            items:
              type: integer
              format: int64
              exclusiveMinimum: 0
              maximum: 9007199254740991
            minItems: 1
            maxItems: 3
        - name: unlimited
          in: query
          required: true
          description: GET /v1/getSomething Parameter
          schema:
            type: array
            items:
              type: boolean
        - name: transformer
          in: query
          required: true
          description: GET /v1/getSomething Parameter
          schema:
            type: string
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Basic cases > should generate the correct schema for discriminated union type 1`] = `
"openapi: 3.1.0
info:
  title: Testing Discriminated Union Type
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      operationId: PostV1GetSomething
      responses:
        "200":
          description: POST /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    discriminator:
                      propertyName: status
                    oneOf:
                      - type: object
                        properties:
                          status:
                            type: string
                            enum:
                              - success
                          data:
                            format: any
                        required:
                          - status
                      - type: object
                        properties:
                          status:
                            type: string
                            enum:
                              - error
                          error:
                            type: object
                            properties:
                              message:
                                type: string
                            required:
                              - message
                        required:
                          - status
                          - error
                required:
                  - status
                  - data
        "400":
          description: POST /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      requestBody:
        description: POST /v1/getSomething Request body
        content:
          application/json:
            schema:
              discriminator:
                propertyName: type
              oneOf:
                - type: object
                  properties:
                    type:
                      type: string
                      enum:
                        - a
                    a:
                      type: string
                  required:
                    - type
                    - a
                - type: object
                  properties:
                    type:
                      type: string
                      enum:
                        - b
                    b:
                      type: string
                  required:
                    - type
                    - b
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Basic cases > should generate the correct schema for intersection type 1`] = `
"openapi: 3.1.0
info:
  title: Testing Intersection and And types
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      operationId: PostV1GetSomething
      responses:
        "200":
          description: POST /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      and:
                        allOf:
                          - type: object
                            properties:
                              five:
                                type: integer
                                format: int64
                                minimum: 0
                                maximum: 9007199254740991
                            required:
                              - five
                          - type: object
                            properties:
                              six:
                                type: string
                            required:
                              - six
                    required:
                      - and
                required:
                  - status
                  - data
        "400":
          description: POST /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      requestBody:
        description: POST /v1/getSomething Request body
        content:
          application/json:
            schema:
              type: object
              properties:
                intersection:
                  allOf:
                    - type: object
                      properties:
                        one:
                          type: string
                      required:
                        - one
                    - type: object
                      properties:
                        two:
                          type: string
                      required:
                        - two
              required:
                - intersection
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Basic cases > should generate the correct schema for nullable and optional types 1`] = `
"openapi: 3.1.0
info:
  title: Testing Nullable and Optional Types
  version: 3.4.5
paths:
  /v1/getSomething:
    get:
      operationId: GetV1GetSomething
      responses:
        "200":
          description: GET /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      nullable:
                        type:
                          - string
                          - "null"
                    required:
                      - nullable
                required:
                  - status
                  - data
        "400":
          description: GET /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      parameters:
        - name: optional
          in: query
          required: false
          description: GET /v1/getSomething Parameter
          schema:
            type: string
        - name: optDefault
          in: query
          required: false
          description: GET /v1/getSomething Parameter
          schema:
            type: string
            default: test
        - name: nullish
          in: query
          required: false
          description: GET /v1/getSomething Parameter
          schema:
            type:
              - boolean
              - "null"
        - name: nuDefault
          in: query
          required: false
          description: GET /v1/getSomething Parameter
          schema:
            type:
              - integer
              - "null"
            format: int64
            exclusiveMinimum: 0
            maximum: 9007199254740991
            default: 123
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Basic cases > should generate the correct schema for union type 1`] = `
"openapi: 3.1.0
info:
  title: Testing Union and Or Types
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      operationId: PostV1GetSomething
      responses:
        "200":
          description: POST /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      or:
                        oneOf:
                          - type: string
                          - type: integer
                            format: int64
                            exclusiveMinimum: 0
                            maximum: 9007199254740991
                    required:
                      - or
                required:
                  - status
                  - data
        "400":
          description: POST /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      requestBody:
        description: POST /v1/getSomething Request body
        content:
          application/json:
            schema:
              type: object
              properties:
                union:
                  oneOf:
                    - type: object
                      properties:
                        one:
                          type: string
                        two:
                          type: integer
                          format: int64
                          exclusiveMinimum: 0
                          maximum: 9007199254740991
                      required:
                        - one
                        - two
                    - type: object
                      properties:
                        two:
                          type: integer
                          format: int64
                          minimum: -9007199254740991
                          exclusiveMaximum: 0
                        three:
                          type: string
                      required:
                        - two
                        - three
              required:
                - union
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Basic cases > should generate the correct schema of example routing 0 1`] = `
"openapi: 3.1.0
info:
  title: Example API
  version: 1.2.3
paths:
  /v1/user/retrieve:
    get:
      operationId: GetV1UserRetrieve
      responses:
        "200":
          description: GET /v1/user/retrieve Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        format: int64
                        minimum: 0
                        maximum: 9007199254740991
                      name:
                        type: string
                      features:
                        type: array
                        items:
                          type: object
                          properties:
                            title:
                              type: string
                            features:
                              $ref: "#/components/schemas/2048581c137c5b2130eb860e3ae37da196dfc25b"
                          required:
                            - title
                            - features
                    required:
                      - id
                      - name
                      - features
                required:
                  - status
                  - data
        "400":
          description: GET /v1/user/retrieve Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      description: Example user retrieval endpoint.
      summary: Retrieves the user.
      tags:
        - users
      parameters:
        - name: id
          in: query
          required: true
          description: a numeric string containing the id of the user
          schema:
            type: string
            pattern: /\\d+/
            description: a numeric string containing the id of the user
  /v1/user/{id}:
    patch:
      operationId: PatchV1UserId
      responses:
        "200":
          description: PATCH /v1/user/:id Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                      createdAt:
                        description: YYYY-MM-DDTHH:mm:ss.sssZ
                        type: string
                        format: date-time
                        externalDocs:
                          url: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString
                    required:
                      - name
                      - createdAt
                    examples:
                      - name: John Doe
                        createdAt: 2021-12-31T00:00:00.000Z
                required:
                  - status
                  - data
              examples:
                example1:
                  value:
                    status: success
                    data:
                      name: John Doe
                      createdAt: 2021-12-31T00:00:00.000Z
        "400":
          description: PATCH /v1/user/:id Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      description: Changes the user record. Example user update endpoint.
      summary: Changes the user record. Example user update endp…
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          description: PATCH /v1/user/:id Parameter
          schema:
            type: string
          examples:
            example1:
              value: "12"
      requestBody:
        description: PATCH /v1/user/:id Request body
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties:
                    key:
                      type: string
                      minLength: 1
                  required:
                    - key
                  examples:
                    - key: 1234-5678-90
                - type: object
                  properties:
                    name:
                      type: string
                      minLength: 1
                    birthday:
                      description: YYYY-MM-DDTHH:mm:ss.sssZ
                      type: string
                      format: date-time
                      pattern: ^\\d{4}-\\d{2}-\\d{2}(T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?)?Z?$
                      externalDocs:
                        url: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString
                  required:
                    - name
                    - birthday
                  examples:
                    - name: John Doe
                      birthday: 1963-04-21
            examples:
              example1:
                value:
                  key: 1234-5678-90
                  name: John Doe
                  birthday: 1963-04-21
      security:
        - APIKEY_1: []
          APIKEY_2: []
  /v1/user/create:
    post:
      operationId: PostV1UserCreate
      responses:
        "201":
          description: POST /v1/user/create Positive response 201
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - created
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        format: int64
                        exclusiveMinimum: 0
                        maximum: 9007199254740991
                    required:
                      - id
                required:
                  - status
                  - data
        "202":
          description: POST /v1/user/create Positive response 202
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - created
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        format: int64
                        exclusiveMinimum: 0
                        maximum: 9007199254740991
                    required:
                      - id
                required:
                  - status
                  - data
        "400":
          description: POST /v1/user/create Negative response 400
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  reason:
                    type: string
                required:
                  - status
                  - reason
        "409":
          description: POST /v1/user/create Negative response 409
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - exists
                  id:
                    type: number
                    format: double
                    minimum: 5e-324
                    maximum: 1.7976931348623157e+308
                required:
                  - status
                  - id
        "500":
          description: POST /v1/user/create Negative response 500
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  reason:
                    type: string
                required:
                  - status
                  - reason
      tags:
        - users
      requestBody:
        description: POST /v1/user/create Request body
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
              required:
                - name
  /v1/user/list:
    get:
      operationId: GetV1UserList
      responses:
        "200":
          description: GET /v1/user/list Positive response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                  required:
                    - name
              examples:
                example1:
                  value:
                    - name: Hunter Schafer
                    - name: Laverne Cox
                    - name: Patti Harrison
        "400":
          description: GET /v1/user/list Negative response
          content:
            application/json:
              schema:
                type: string
              examples:
                example1:
                  value: Sample error message
      tags:
        - users
  /v1/avatar/send:
    get:
      operationId: GetV1AvatarSend
      responses:
        "200":
          description: GET /v1/avatar/send Positive response
          content:
            image/svg+xml:
              schema:
                type: string
        "400":
          description: GET /v1/avatar/send Negative response
          content:
            text/plain:
              schema:
                type: string
      summary: Sends a file content.
      tags:
        - files
        - users
      parameters:
        - name: userId
          in: query
          required: true
          description: GET /v1/avatar/send Parameter
          schema:
            type: string
            pattern: /\\d+/
  /v1/avatar/stream:
    get:
      operationId: GetV1AvatarStream
      responses:
        "200":
          description: GET /v1/avatar/stream Positive response
          content:
            image/*:
              schema:
                type: string
                format: binary
        "400":
          description: GET /v1/avatar/stream Negative response
          content:
            text/plain:
              schema:
                type: string
      summary: Streams a file content.
      tags:
        - users
        - files
      parameters:
        - name: userId
          in: query
          required: true
          description: GET /v1/avatar/stream Parameter
          schema:
            type: string
            pattern: /\\d+/
  /v1/avatar/upload:
    post:
      operationId: PostV1AvatarUpload
      responses:
        "200":
          description: POST /v1/avatar/upload Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                      size:
                        type: integer
                        format: int64
                        minimum: 0
                        maximum: 9007199254740991
                      mime:
                        type: string
                      hash:
                        type: string
                      otherInputs:
                        type: object
                        additionalProperties:
                          format: any
                    required:
                      - name
                      - size
                      - mime
                      - hash
                      - otherInputs
                required:
                  - status
                  - data
        "400":
          description: POST /v1/avatar/upload Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      description: Handles a file upload.
      summary: Handles a file upload.
      tags:
        - files
      requestBody:
        description: POST /v1/avatar/upload Request body
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
              required:
                - avatar
  /v1/avatar/raw:
    post:
      operationId: PostV1AvatarRaw
      responses:
        "200":
          description: POST /v1/avatar/raw Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      length:
                        type: integer
                        format: int64
                        minimum: 0
                        maximum: 9007199254740991
                    required:
                      - length
                required:
                  - status
                  - data
        "400":
          description: POST /v1/avatar/raw Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      tags:
        - files
      requestBody:
        description: POST /v1/avatar/raw Request body
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
components:
  schemas:
    2048581c137c5b2130eb860e3ae37da196dfc25b:
      type: array
      items:
        type: object
        properties:
          title:
            type: string
          features:
            $ref: "#/components/schemas/2048581c137c5b2130eb860e3ae37da196dfc25b"
        required:
          - title
          - features
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes:
    APIKEY_1:
      type: apiKey
      in: query
      name: key
      x-in-actual: body
      description: key MUST be supplied within the request body instead of query
    APIKEY_2:
      type: apiKey
      in: header
      name: token
  links: {}
  callbacks: {}
tags:
  - name: users
    description: Everything about the users
  - name: files
    description: Everything about the files processing
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Basic cases > should generate the correct schema of example routing 1 1`] = `
"openapi: 3.1.0
info:
  title: Example API
  version: 1.2.3
paths:
  /v1/user/retrieve:
    get:
      operationId: GetV1UserRetrieve
      responses:
        "200":
          description: GET /v1/user/retrieve Positive response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetV1UserRetrievePositiveResponse"
        "400":
          description: GET /v1/user/retrieve Negative response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetV1UserRetrieveNegativeResponse"
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      description: Example user retrieval endpoint.
      summary: Retrieves the user.
      tags:
        - users
      parameters:
        - name: id
          in: query
          required: true
          description: a numeric string containing the id of the user
          schema:
            $ref: "#/components/schemas/GetV1UserRetrieveParameterId"
  /v1/user/{id}:
    patch:
      operationId: PatchV1UserId
      responses:
        "200":
          description: PATCH /v1/user/:id Positive response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PatchV1UserIdPositiveResponse"
              examples:
                example1:
                  value:
                    status: success
                    data:
                      name: John Doe
                      createdAt: 2021-12-31T00:00:00.000Z
        "400":
          description: PATCH /v1/user/:id Negative response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PatchV1UserIdNegativeResponse"
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      description: Changes the user record. Example user update endpoint.
      summary: Changes the user record. Example user update endp…
      tags:
        - users
      parameters:
        - name: id
          in: path
          required: true
          description: PATCH /v1/user/:id Parameter
          schema:
            $ref: "#/components/schemas/PatchV1UserIdParameterId"
          examples:
            example1:
              value: "12"
      requestBody:
        description: PATCH /v1/user/:id Request body
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchV1UserIdRequestBody"
            examples:
              example1:
                value:
                  key: 1234-5678-90
                  name: John Doe
                  birthday: 1963-04-21
      security:
        - APIKEY_1: []
          APIKEY_2: []
  /v1/user/create:
    post:
      operationId: PostV1UserCreate
      responses:
        "201":
          description: POST /v1/user/create Positive response 201
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostV1UserCreatePositiveResponse201"
        "202":
          description: POST /v1/user/create Positive response 202
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostV1UserCreatePositiveResponse202"
        "400":
          description: POST /v1/user/create Negative response 400
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostV1UserCreateNegativeResponse400"
        "409":
          description: POST /v1/user/create Negative response 409
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostV1UserCreateNegativeResponse409"
        "500":
          description: POST /v1/user/create Negative response 500
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostV1UserCreateNegativeResponse500"
      tags:
        - users
      requestBody:
        description: POST /v1/user/create Request body
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PostV1UserCreateRequestBody"
  /v1/user/list:
    get:
      operationId: GetV1UserList
      responses:
        "200":
          description: GET /v1/user/list Positive response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetV1UserListPositiveResponse"
              examples:
                example1:
                  value:
                    - name: Hunter Schafer
                    - name: Laverne Cox
                    - name: Patti Harrison
        "400":
          description: GET /v1/user/list Negative response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetV1UserListNegativeResponse"
              examples:
                example1:
                  value: Sample error message
      tags:
        - users
  /v1/avatar/send:
    get:
      operationId: GetV1AvatarSend
      responses:
        "200":
          description: GET /v1/avatar/send Positive response
          content:
            image/svg+xml:
              schema:
                $ref: "#/components/schemas/GetV1AvatarSendPositiveResponse"
        "400":
          description: GET /v1/avatar/send Negative response
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/GetV1AvatarSendNegativeResponse"
      summary: Sends a file content.
      tags:
        - files
        - users
      parameters:
        - name: userId
          in: query
          required: true
          description: GET /v1/avatar/send Parameter
          schema:
            $ref: "#/components/schemas/GetV1AvatarSendParameterUserId"
  /v1/avatar/stream:
    get:
      operationId: GetV1AvatarStream
      responses:
        "200":
          description: GET /v1/avatar/stream Positive response
          content:
            image/*:
              schema:
                $ref: "#/components/schemas/GetV1AvatarStreamPositiveResponse"
        "400":
          description: GET /v1/avatar/stream Negative response
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/GetV1AvatarStreamNegativeResponse"
      summary: Streams a file content.
      tags:
        - users
        - files
      parameters:
        - name: userId
          in: query
          required: true
          description: GET /v1/avatar/stream Parameter
          schema:
            $ref: "#/components/schemas/GetV1AvatarStreamParameterUserId"
  /v1/avatar/upload:
    post:
      operationId: PostV1AvatarUpload
      responses:
        "200":
          description: POST /v1/avatar/upload Positive response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostV1AvatarUploadPositiveResponse"
        "400":
          description: POST /v1/avatar/upload Negative response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostV1AvatarUploadNegativeResponse"
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      description: Handles a file upload.
      summary: Handles a file upload.
      tags:
        - files
      requestBody:
        description: POST /v1/avatar/upload Request body
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PostV1AvatarUploadRequestBody"
  /v1/avatar/raw:
    post:
      operationId: PostV1AvatarRaw
      responses:
        "200":
          description: POST /v1/avatar/raw Positive response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostV1AvatarRawPositiveResponse"
        "400":
          description: POST /v1/avatar/raw Negative response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostV1AvatarRawNegativeResponse"
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      tags:
        - files
      requestBody:
        description: POST /v1/avatar/raw Request body
        content:
          application/octet-stream:
            schema:
              $ref: "#/components/schemas/PostV1AvatarRawRequestBody"
components:
  schemas:
    GetV1UserRetrieveParameterId:
      type: string
      pattern: /\\d+/
      description: a numeric string containing the id of the user
    2048581c137c5b2130eb860e3ae37da196dfc25b:
      type: array
      items:
        type: object
        properties:
          title:
            type: string
          features:
            $ref: "#/components/schemas/2048581c137c5b2130eb860e3ae37da196dfc25b"
        required:
          - title
          - features
    GetV1UserRetrievePositiveResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - success
        data:
          type: object
          properties:
            id:
              type: integer
              format: int64
              minimum: 0
              maximum: 9007199254740991
            name:
              type: string
            features:
              type: array
              items:
                type: object
                properties:
                  title:
                    type: string
                  features:
                    $ref: "#/components/schemas/2048581c137c5b2130eb860e3ae37da196dfc25b"
                required:
                  - title
                  - features
          required:
            - id
            - name
            - features
      required:
        - status
        - data
    GetV1UserRetrieveNegativeResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - error
        error:
          type: object
          properties:
            message:
              type: string
          required:
            - message
      required:
        - status
        - error
    PatchV1UserIdParameterId:
      type: string
    PatchV1UserIdPositiveResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - success
        data:
          type: object
          properties:
            name:
              type: string
            createdAt:
              description: YYYY-MM-DDTHH:mm:ss.sssZ
              type: string
              format: date-time
              externalDocs:
                url: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString
          required:
            - name
            - createdAt
          examples:
            - name: John Doe
              createdAt: 2021-12-31T00:00:00.000Z
      required:
        - status
        - data
    PatchV1UserIdNegativeResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - error
        error:
          type: object
          properties:
            message:
              type: string
          required:
            - message
      required:
        - status
        - error
    PatchV1UserIdRequestBody:
      allOf:
        - type: object
          properties:
            key:
              type: string
              minLength: 1
          required:
            - key
          examples:
            - key: 1234-5678-90
        - type: object
          properties:
            name:
              type: string
              minLength: 1
            birthday:
              description: YYYY-MM-DDTHH:mm:ss.sssZ
              type: string
              format: date-time
              pattern: ^\\d{4}-\\d{2}-\\d{2}(T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?)?Z?$
              externalDocs:
                url: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString
          required:
            - name
            - birthday
          examples:
            - name: John Doe
              birthday: 1963-04-21
    PostV1UserCreatePositiveResponse201:
      type: object
      properties:
        status:
          type: string
          enum:
            - created
        data:
          type: object
          properties:
            id:
              type: integer
              format: int64
              exclusiveMinimum: 0
              maximum: 9007199254740991
          required:
            - id
      required:
        - status
        - data
    PostV1UserCreatePositiveResponse202:
      type: object
      properties:
        status:
          type: string
          enum:
            - created
        data:
          type: object
          properties:
            id:
              type: integer
              format: int64
              exclusiveMinimum: 0
              maximum: 9007199254740991
          required:
            - id
      required:
        - status
        - data
    PostV1UserCreateNegativeResponse409:
      type: object
      properties:
        status:
          type: string
          enum:
            - exists
        id:
          type: number
          format: double
          minimum: 5e-324
          maximum: 1.7976931348623157e+308
      required:
        - status
        - id
    PostV1UserCreateNegativeResponse400:
      type: object
      properties:
        status:
          type: string
          enum:
            - error
        reason:
          type: string
      required:
        - status
        - reason
    PostV1UserCreateNegativeResponse500:
      type: object
      properties:
        status:
          type: string
          enum:
            - error
        reason:
          type: string
      required:
        - status
        - reason
    PostV1UserCreateRequestBody:
      type: object
      properties:
        name:
          type: string
          minLength: 1
      required:
        - name
    GetV1UserListPositiveResponse:
      type: array
      items:
        type: object
        properties:
          name:
            type: string
        required:
          - name
    GetV1UserListNegativeResponse:
      type: string
    GetV1AvatarSendParameterUserId:
      type: string
      pattern: /\\d+/
    GetV1AvatarSendPositiveResponse:
      type: string
    GetV1AvatarSendNegativeResponse:
      type: string
    GetV1AvatarStreamParameterUserId:
      type: string
      pattern: /\\d+/
    GetV1AvatarStreamPositiveResponse:
      type: string
      format: binary
    GetV1AvatarStreamNegativeResponse:
      type: string
    PostV1AvatarUploadPositiveResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - success
        data:
          type: object
          properties:
            name:
              type: string
            size:
              type: integer
              format: int64
              minimum: 0
              maximum: 9007199254740991
            mime:
              type: string
            hash:
              type: string
            otherInputs:
              type: object
              additionalProperties:
                format: any
          required:
            - name
            - size
            - mime
            - hash
            - otherInputs
      required:
        - status
        - data
    PostV1AvatarUploadNegativeResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - error
        error:
          type: object
          properties:
            message:
              type: string
          required:
            - message
      required:
        - status
        - error
    PostV1AvatarUploadRequestBody:
      type: object
      properties:
        avatar:
          type: string
          format: binary
      required:
        - avatar
    PostV1AvatarRawPositiveResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - success
        data:
          type: object
          properties:
            length:
              type: integer
              format: int64
              minimum: 0
              maximum: 9007199254740991
          required:
            - length
      required:
        - status
        - data
    PostV1AvatarRawNegativeResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - error
        error:
          type: object
          properties:
            message:
              type: string
          required:
            - message
      required:
        - status
        - error
    PostV1AvatarRawRequestBody:
      type: string
      format: binary
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes:
    APIKEY_1:
      type: apiKey
      in: query
      name: key
      x-in-actual: body
      description: key MUST be supplied within the request body instead of query
    APIKEY_2:
      type: apiKey
      in: header
      name: token
  links: {}
  callbacks: {}
tags:
  - name: users
    description: Everything about the users
  - name: files
    description: Everything about the files processing
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Basic cases > should handle bigint, boolean, date, null and readonly 1`] = `
"openapi: 3.1.0
info:
  title: Testing additional types
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      operationId: PostV1GetSomething
      responses:
        "200":
          description: POST /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      "null":
                        type:
                          - "null"
                      dateOut:
                        description: YYYY-MM-DDTHH:mm:ss.sssZ
                        type: string
                        format: date-time
                        externalDocs:
                          url: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString
                    required:
                      - "null"
                      - dateOut
                required:
                  - status
                  - data
        "400":
          description: POST /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      requestBody:
        description: POST /v1/getSomething Request body
        content:
          application/json:
            schema:
              type: object
              properties:
                bigint:
                  type: integer
                  format: bigint
                boolean:
                  type: boolean
                dateIn:
                  description: YYYY-MM-DDTHH:mm:ss.sssZ
                  type: string
                  format: date-time
                  pattern: ^\\d{4}-\\d{2}-\\d{2}(T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?)?Z?$
                  externalDocs:
                    url: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString
              required:
                - bigint
                - boolean
                - dateIn
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Basic cases > should handle circular schemas via z.lazy() 1`] = `
"openapi: 3.1.0
info:
  title: Testing Lazy
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      operationId: PostV1GetSomething
      responses:
        "200":
          description: POST /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      zodExample:
                        type: object
                        properties:
                          name:
                            type: string
                          subcategories:
                            $ref: "#/components/schemas/2048581c137c5b2130eb860e3ae37da196dfc25b"
                        required:
                          - name
                          - subcategories
                    required:
                      - zodExample
                required:
                  - status
                  - data
        "400":
          description: POST /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      requestBody:
        description: POST /v1/getSomething Request body
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              required:
                - name
components:
  schemas:
    2048581c137c5b2130eb860e3ae37da196dfc25b:
      type: array
      items:
        type: object
        properties:
          name:
            type: string
          subcategories:
            $ref: "#/components/schemas/2048581c137c5b2130eb860e3ae37da196dfc25b"
        required:
          - name
          - subcategories
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Basic cases > should handle custom mime types and status codes 1`] = `
"openapi: 3.1.0
info:
  title: Testing MIME types and status codes
  version: 3.4.5
paths:
  /v1/getSomething:
    get:
      operationId: GetV1GetSomething
      responses:
        "201":
          description: GET /v1/getSomething Positive response
          content:
            application/json:
              schema: &a1
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - OK
                  result:
                    type: object
                    properties: {}
                required:
                  - status
                  - result
            text/vnd.yaml:
              schema: *a1
        "403":
          description: GET /v1/getSomething Negative response
          content:
            text/vnd.yaml:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - NOT OK
                required:
                  - status
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Basic cases > should handle different number types 1`] = `
"openapi: 3.1.0
info:
  title: Testing numbers
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      operationId: PostV1GetSomething
      responses:
        "200":
          description: POST /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      bigint:
                        type: integer
                        format: bigint
                    required:
                      - bigint
                required:
                  - status
                  - data
        "400":
          description: POST /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      requestBody:
        description: POST /v1/getSomething Request body
        content:
          application/json:
            schema:
              type: object
              properties:
                double:
                  type: number
                  format: double
                  minimum: 5e-324
                  maximum: 1.7976931348623157e+308
                doublePositive:
                  type: number
                  format: double
                  exclusiveMinimum: 0
                  maximum: 1.7976931348623157e+308
                doubleNegative:
                  type: number
                  format: double
                  minimum: 5e-324
                  exclusiveMaximum: 0
                doubleLimited:
                  type: number
                  format: double
                  minimum: -0.5
                  maximum: 0.5
                int:
                  type: integer
                  format: int64
                  minimum: -9007199254740991
                  maximum: 9007199254740991
                intPositive:
                  type: integer
                  format: int64
                  exclusiveMinimum: 0
                  maximum: 9007199254740991
                intNegative:
                  type: integer
                  format: int64
                  minimum: -9007199254740991
                  exclusiveMaximum: 0
                intLimited:
                  type: integer
                  format: int64
                  minimum: -100
                  maximum: 100
                zero:
                  type: integer
                  format: int64
                  minimum: 0
                  maximum: 0
              required:
                - double
                - doublePositive
                - doubleNegative
                - doubleLimited
                - int
                - intPositive
                - intNegative
                - intLimited
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Basic cases > should handle different string types 1`] = `
"openapi: 3.1.0
info:
  title: Testing strings
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      operationId: PostV1GetSomething
      responses:
        "200":
          description: POST /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      nonempty:
                        type: string
                        minLength: 1
                    required:
                      - nonempty
                required:
                  - status
                  - data
        "400":
          description: POST /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      requestBody:
        description: POST /v1/getSomething Request body
        content:
          application/json:
            schema:
              type: object
              properties:
                regular:
                  type: string
                min:
                  type: string
                  minLength: 1
                max:
                  type: string
                  maxLength: 15
                range:
                  type: string
                  minLength: 2
                  maxLength: 3
                email:
                  type: string
                  format: email
                uuid:
                  type: string
                  format: uuid
                cuid:
                  type: string
                  format: cuid
                cuid2:
                  type: string
                  format: cuid2
                ulid:
                  type: string
                  format: ulid
                ip:
                  type: string
                  format: ip
                emoji:
                  type: string
                  format: emoji
                url:
                  type: string
                  format: url
                numeric:
                  type: string
                  pattern: /\\d+/
                combined:
                  type: string
                  format: email
                  minLength: 1
                  maxLength: 90
                  pattern: /.*@example\\.com/is
              required:
                - regular
                - min
                - max
                - range
                - email
                - uuid
                - cuid
                - cuid2
                - ulid
                - ip
                - emoji
                - url
                - numeric
                - combined
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Basic cases > should handle enum types 1`] = `
"openapi: 3.1.0
info:
  title: Testing enums
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      operationId: PostV1GetSomething
      responses:
        "200":
          description: POST /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      nativeEnum:
                        type: number
                        enum:
                          - 1
                          - 2
                    required:
                      - nativeEnum
                required:
                  - status
                  - data
        "400":
          description: POST /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      requestBody:
        description: POST /v1/getSomething Request body
        content:
          application/json:
            schema:
              type: object
              properties:
                regularEnum:
                  type: string
                  enum:
                    - ABC
                    - DEF
              required:
                - regularEnum
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Basic cases > should handle record 1`] = `
"openapi: 3.1.0
info:
  title: Testing record
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      operationId: PostV1GetSomething
      responses:
        "200":
          description: POST /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      simple:
                        type: object
                        additionalProperties:
                          type: integer
                          format: int64
                          minimum: -9007199254740991
                          maximum: 9007199254740991
                      stringy:
                        type: object
                        additionalProperties:
                          type: boolean
                      numeric:
                        type: object
                        additionalProperties:
                          type: boolean
                      literal:
                        type: object
                        properties:
                          only:
                            type: boolean
                        required:
                          - only
                      union:
                        type: object
                        properties:
                          option1:
                            type: boolean
                          option2:
                            type: boolean
                        required:
                          - option1
                          - option2
                      enum:
                        type: object
                        properties:
                          option1:
                            type: boolean
                          option2:
                            type: boolean
                        required:
                          - option1
                          - option2
                    required:
                      - simple
                      - stringy
                      - numeric
                      - literal
                      - union
                      - enum
                required:
                  - status
                  - data
        "400":
          description: POST /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      requestBody:
        description: POST /v1/getSomething Request body
        content:
          application/json:
            schema:
              type: object
              properties: {}
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Basic cases > should handle transformation schema in output 1`] = `
"openapi: 3.1.0
info:
  title: Testing Transformation in response schema
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      operationId: PostV1GetSomething
      responses:
        "200":
          description: POST /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      transform:
                        type: number
                    required:
                      - transform
                required:
                  - status
                  - data
        "400":
          description: POST /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      requestBody:
        description: POST /v1/getSomething Request body
        content:
          application/json:
            schema:
              type: object
              properties:
                one:
                  type: string
                two:
                  type: integer
                  format: int64
                  exclusiveMinimum: 0
                  maximum: 9007199254740991
              required:
                - one
                - two
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Basic cases > should handle tuples 1`] = `
"openapi: 3.1.0
info:
  title: Testing tuples
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      operationId: PostV1GetSomething
      responses:
        "200":
          description: POST /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      empty:
                        type: array
                        prefixItems: []
                    required:
                      - empty
                required:
                  - status
                  - data
        "400":
          description: POST /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      requestBody:
        description: POST /v1/getSomething Request body
        content:
          application/json:
            schema:
              type: object
              properties:
                ofOne:
                  type: array
                  prefixItems:
                    - type: boolean
                ofStrings:
                  type: array
                  prefixItems:
                    - type: string
                    - type:
                        - string
                        - "null"
                complex:
                  type: array
                  prefixItems:
                    - type: boolean
                    - type: string
                    - type: integer
                      format: int64
                      exclusiveMinimum: 0
                      maximum: 9007199254740991
              required:
                - ofOne
                - ofStrings
                - complex
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Basic cases > should handle type any 1`] = `
"openapi: 3.1.0
info:
  title: Testing type any
  version: 3.4.5
paths:
  /v1/getSomething:
    get:
      operationId: GetV1GetSomething
      responses:
        "200":
          description: GET /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      any:
                        format: any
                required:
                  - status
                  - data
        "400":
          description: GET /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      parameters:
        - name: any
          in: query
          required: false
          description: GET /v1/getSomething Parameter
          schema:
            format: any
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Basic cases > should handle z.preprocess() 1`] = `
"openapi: 3.1.0
info:
  title: Testing z.preprocess()
  version: 3.4.5
paths:
  /v1/getSomething:
    get:
      operationId: GetV1GetSomething
      responses:
        "200":
          description: GET /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      boolean:
                        type:
                          - boolean
                          - "null"
                required:
                  - status
                  - data
        "400":
          description: GET /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      parameters:
        - name: string
          in: query
          required: false
          description: GET /v1/getSomething Parameter
          schema:
            format: string (preprocessed)
        - name: number
          in: query
          required: true
          description: GET /v1/getSomething Parameter
          schema:
            format: int64 (preprocessed)
            minimum: 0
            maximum: 9007199254740991
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Feature #1431: Multiple schemas for different status codes > should depict accordingly 1`] = `
"openapi: 3.1.0
info:
  title: Testing multiple schemas for different status codes
  version: 3.4.5
paths:
  /v1/mtpl:
    post:
      operationId: PostV1Mtpl
      responses:
        "200":
          description: POST /v1/mtpl Positive response 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - ok
                  data:
                    type: object
                    properties:
                      payload:
                        type: string
                    required:
                      - payload
                required:
                  - status
                  - data
        "201":
          description: POST /v1/mtpl Positive response 201
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - kinda
                  data:
                    type: object
                    properties:
                      payload:
                        type: string
                    required:
                      - payload
                required:
                  - status
                  - data
        "400":
          description: POST /v1/mtpl Negative response 400
          content:
            application/json:
              schema:
                type: string
                enum:
                  - error
        "500":
          description: POST /v1/mtpl Negative response 500
          content:
            application/json:
              schema:
                type: string
                enum:
                  - failure
      requestBody:
        description: POST /v1/mtpl Request body
        content:
          application/json:
            schema:
              type: object
              properties:
                test:
                  type: number
                  format: double
                  minimum: 5e-324
                  maximum: 1.7976931348623157e+308
              required:
                - test
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Feature 1180: Headers opt-in params > should describe x- inputs as header params 1`] = `
"openapi: 3.1.0
info:
  title: Testing headers params
  version: 3.4.5
paths:
  /v1/test:
    get:
      operationId: GetV1Test
      responses:
        "200":
          description: GET /v1/test Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties: {}
                required:
                  - status
                  - data
        "400":
          description: GET /v1/test Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      parameters:
        - name: id
          in: query
          required: true
          description: GET /v1/test Parameter
          schema:
            type: string
        - name: x-request-id
          in: header
          required: true
          description: GET /v1/test Parameter
          schema:
            type: string
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Issue #98 > Should describe non-empty array 1`] = `
"openapi: 3.1.0
info:
  title: "Testing issue #98"
  version: 3.4.5
paths:
  /v1/getSomething:
    get:
      operationId: GetV1GetSomething
      responses:
        "200":
          description: GET /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      arr:
                        type: array
                        items:
                          type: string
                        minItems: 1
                    required:
                      - arr
                required:
                  - status
                  - data
        "400":
          description: GET /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      parameters:
        - name: arr
          in: query
          required: true
          description: GET /v1/getSomething Parameter
          schema:
            type: array
            items:
              type: string
            minItems: 1
    post:
      operationId: PostV1GetSomething
      responses:
        "200":
          description: POST /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      arr:
                        type: array
                        items:
                          type: string
                        minItems: 1
                    required:
                      - arr
                required:
                  - status
                  - data
        "400":
          description: POST /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      requestBody:
        description: POST /v1/getSomething Request body
        content:
          application/json:
            schema:
              type: object
              properties:
                arr:
                  type: array
                  items:
                    type: string
                  minItems: 1
              required:
                - arr
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Issue #98 > should union schemas 1`] = `
"openapi: 3.1.0
info:
  title: "Testing issue #98"
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      operationId: PostV1GetSomething
      responses:
        "200":
          description: POST /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    oneOf:
                      - type: object
                        properties:
                          id:
                            type: string
                          field1:
                            type: string
                        required:
                          - id
                          - field1
                      - type: object
                        properties:
                          id:
                            type: string
                          field2:
                            type: string
                        required:
                          - id
                          - field2
                required:
                  - status
                  - data
        "400":
          description: POST /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      requestBody:
        description: POST /v1/getSomething Request body
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    id:
                      type: string
                    field1:
                      type: string
                  required:
                    - id
                    - field1
                - type: object
                  properties:
                    id:
                      type: string
                    field2:
                      type: string
                  required:
                    - id
                    - field2
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Metadata > Issue #827: withMeta() should be immutable 1`] = `
"openapi: 3.1.0
info:
  title: Testing Metadata:example on IO parameter
  version: 3.4.5
paths:
  /v1/addSomething:
    post:
      operationId: PostV1AddSomething
      responses:
        "200":
          description: POST /v1/addSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      a:
                        type: string
                      b:
                        type: string
                    required:
                      - a
                      - b
                    examples:
                      - a: first
                        b: prefix_first
                      - a: second
                        b: prefix_second
                required:
                  - status
                  - data
              examples:
                example1:
                  value:
                    status: success
                    data:
                      a: first
                      b: prefix_first
                example2:
                  value:
                    status: success
                    data:
                      a: second
                      b: prefix_second
        "400":
          description: POST /v1/addSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      requestBody:
        description: POST /v1/addSomething Request body
        content:
          application/json:
            schema:
              type: object
              properties:
                a:
                  type: string
              required:
                - a
            examples:
              example1:
                value:
                  a: first
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Metadata > Issue #929: the location of the custom description should be on the param level 1`] = `
"openapi: 3.1.0
info:
  title: Testing Metadata:description
  version: 3.4.5
paths:
  /hris/employees:
    get:
      operationId: GetHrisEmployees
      responses:
        "200":
          description: GET /hris/employees Positive response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetHrisEmployeesPositiveResponse"
        "400":
          description: GET /hris/employees Negative response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetHrisEmployeesNegativeResponse"
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      parameters:
        - name: cursor
          in: query
          required: false
          description: An optional cursor string used for pagination. This can be
            retrieved from the \`next\` property of the previous page response.
          schema:
            $ref: "#/components/schemas/GetHrisEmployeesParameterCursor"
components:
  schemas:
    GetHrisEmployeesParameterCursor:
      type: string
      description: An optional cursor string used for pagination. This can be
        retrieved from the \`next\` property of the previous page response.
    GetHrisEmployeesPositiveResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - success
        data:
          type: object
          properties: {}
      required:
        - status
        - data
    GetHrisEmployeesNegativeResponse:
      type: object
      properties:
        status:
          type: string
          enum:
            - error
        error:
          type: object
          properties:
            message:
              type: string
          required:
            - message
      required:
        - status
        - error
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Metadata > should merge endpoint handler examples with its middleware examples 1`] = `
"openapi: 3.1.0
info:
  title: Testing Metadata:example on IO schema + middleware
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      operationId: PostV1GetSomething
      responses:
        "200":
          description: POST /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      num:
                        type: number
                        format: double
                        minimum: 5e-324
                        maximum: 1.7976931348623157e+308
                    required:
                      - num
                    examples:
                      - num: 123
                required:
                  - status
                  - data
              examples:
                example1:
                  value:
                    status: success
                    data:
                      num: 123
        "400":
          description: POST /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      requestBody:
        description: POST /v1/getSomething Request body
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties:
                    key:
                      type: string
                  required:
                    - key
                  examples:
                    - key: 1234-56789-01
                - type: object
                  properties:
                    str:
                      type: string
                  required:
                    - str
                  examples:
                    - str: test
            examples:
              example1:
                value:
                  key: 1234-56789-01
                  str: test
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Metadata > should pass over examples of each param from the whole IO schema examples (GET) 1`] = `
"openapi: 3.1.0
info:
  title: Testing Metadata:example on IO schema
  version: 3.4.5
paths:
  /v1/getSomething:
    get:
      operationId: GetV1GetSomething
      responses:
        "200":
          description: GET /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      numericStr:
                        type: string
                    required:
                      - numericStr
                    examples:
                      - numericStr: "123"
                required:
                  - status
                  - data
              examples:
                example1:
                  value:
                    status: success
                    data:
                      numericStr: "123"
        "400":
          description: GET /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      parameters:
        - name: strNum
          in: query
          required: true
          description: GET /v1/getSomething Parameter
          schema:
            type: string
          examples:
            example1:
              value: "123"
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Metadata > should pass over examples of the whole IO schema (POST) 1`] = `
"openapi: 3.1.0
info:
  title: Testing Metadata:example on IO schema
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      operationId: PostV1GetSomething
      responses:
        "200":
          description: POST /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      numericStr:
                        type: string
                    required:
                      - numericStr
                    examples:
                      - numericStr: "123"
                required:
                  - status
                  - data
              examples:
                example1:
                  value:
                    status: success
                    data:
                      numericStr: "123"
        "400":
          description: POST /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      requestBody:
        description: POST /v1/getSomething Request body
        content:
          application/json:
            schema:
              type: object
              properties:
                strNum:
                  type: string
              required:
                - strNum
            examples:
              example1:
                value:
                  strNum: "123"
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Metadata > should pass over the example of an individual parameter 1`] = `
"openapi: 3.1.0
info:
  title: Testing Metadata:example on IO parameter
  version: 3.4.5
paths:
  /v1/getSomething:
    get:
      operationId: GetV1GetSomething
      responses:
        "200":
          description: GET /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      numericStr:
                        type: string
                        examples:
                          - "123"
                    required:
                      - numericStr
                required:
                  - status
                  - data
        "400":
          description: GET /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      parameters:
        - name: strNum
          in: query
          required: true
          description: GET /v1/getSomething Parameter
          schema:
            type: string
            examples:
              - "123"
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Metadata > should pass over the schema description 1`] = `
"openapi: 3.1.0
info:
  title: Testing Metadata:description
  version: 3.4.5
paths:
  /v1/getSomething:
    get:
      operationId: GetV1GetSomething
      responses:
        "200":
          description: GET /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      result:
                        type: integer
                        format: int64
                        exclusiveMinimum: 0
                        maximum: 9007199254740991
                        description: some positive integer
                    required:
                      - result
                required:
                  - status
                  - data
        "400":
          description: GET /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      parameters:
        - name: str
          in: query
          required: true
          description: here is the test
          schema:
            type: string
            description: here is the test
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Route Path Params > should handle custom descriptions and descriptors 0 1`] = `
"openapi: 3.1.0
info:
  title: Testing route path params
  version: 3.4.5
paths:
  /v1/{name}:
    post:
      operationId: PostV1Name
      responses:
        "200":
          description: Super positive response of /v1/:name
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties: {}
                required:
                  - status
                  - data
        "400":
          description: very negative response of PostV1Name
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      parameters:
        - name: name
          in: path
          required: true
          description: parameter of post /v1/:name
          schema:
            oneOf:
              - type: string
                enum:
                  - John
              - type: string
                enum:
                  - Jane
      requestBody:
        description: the body of request
        content:
          application/json:
            schema:
              type: object
              properties:
                other:
                  type: boolean
              required:
                - other
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Route Path Params > should handle custom descriptions and descriptors 1 1`] = `
"openapi: 3.1.0
info:
  title: Testing route path params
  version: 3.4.5
paths:
  /v1/{name}:
    post:
      operationId: PostV1Name
      responses:
        "200":
          description: Super positive response of /v1/:name
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuperPositiveResponseOfV1Name"
        "400":
          description: very negative response of PostV1Name
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VeryNegativeResponseOfPostV1Name"
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      parameters:
        - name: name
          in: path
          required: true
          description: parameter of post /v1/:name
          schema:
            $ref: "#/components/schemas/ParameterOfPostV1NameName"
      requestBody:
        description: the body of request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TheBodyOfRequest"
components:
  schemas:
    ParameterOfPostV1NameName:
      oneOf:
        - type: string
          enum:
            - John
        - type: string
          enum:
            - Jane
    SuperPositiveResponseOfV1Name:
      type: object
      properties:
        status:
          type: string
          enum:
            - success
        data:
          type: object
          properties: {}
      required:
        - status
        - data
    VeryNegativeResponseOfPostV1Name:
      type: object
      properties:
        status:
          type: string
          enum:
            - error
        error:
          type: object
          properties:
            message:
              type: string
          required:
            - message
      required:
        - status
        - error
    TheBodyOfRequest:
      type: object
      properties:
        other:
          type: boolean
      required:
        - other
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Route Path Params > should handle route path params for GET request 1`] = `
"openapi: 3.1.0
info:
  title: Testing route path params
  version: 3.4.5
paths:
  /v1/{name}:
    get:
      operationId: GetV1Name
      responses:
        "200":
          description: GET /v1/:name Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties: {}
                required:
                  - status
                  - data
        "400":
          description: GET /v1/:name Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      parameters:
        - name: name
          in: path
          required: true
          description: GET /v1/:name Parameter
          schema:
            oneOf:
              - type: string
                enum:
                  - John
              - type: string
                enum:
                  - Jane
        - name: other
          in: query
          required: true
          description: GET /v1/:name Parameter
          schema:
            type: boolean
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Route Path Params > should handle route path params for POST request 1`] = `
"openapi: 3.1.0
info:
  title: Testing route path params
  version: 3.4.5
paths:
  /v1/{name}:
    post:
      operationId: PostV1Name
      responses:
        "200":
          description: POST /v1/:name Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties: {}
                required:
                  - status
                  - data
        "400":
          description: POST /v1/:name Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      parameters:
        - name: name
          in: path
          required: true
          description: POST /v1/:name Parameter
          schema:
            oneOf:
              - type: string
                enum:
                  - John
              - type: string
                enum:
                  - Jane
      requestBody:
        description: POST /v1/:name Request body
        content:
          application/json:
            schema:
              type: object
              properties:
                other:
                  type: boolean
              required:
                - other
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;
