// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Open API helpers depictAny() should depict ZodAny 1`] = `
{
  "description": "test",
  "format": "any",
}
`;

exports[`Open API helpers depictArray() should depict ZodArray 1`] = `
{
  "description": "test",
  "items": {
    "type": "boolean",
  },
  "type": "array",
}
`;

exports[`Open API helpers depictBigInt() should depict ZodBigInt 1`] = `
{
  "description": "test",
  "format": "bigint",
  "type": "integer",
}
`;

exports[`Open API helpers depictBoolean() should depict ZodBoolean 1`] = `
{
  "description": "test",
  "type": "boolean",
}
`;

exports[`Open API helpers depictDateIn should depict ZodDateIn 1`] = `
{
  "description": "test",
  "externalDocs": {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString",
  },
  "format": "date-time",
  "pattern": "^\\d{4}-\\d{2}-\\d{2}(T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?)?Z?$",
  "type": "string",
}
`;

exports[`Open API helpers depictDateIn should throw when ZodDateIn in response 1`] = `[Error: Please use z.dateOut() for output.]`;

exports[`Open API helpers depictDateOut should depict ZodDateOut 1`] = `
{
  "description": "test",
  "externalDocs": {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString",
  },
  "format": "date-time",
  "type": "string",
}
`;

exports[`Open API helpers depictDateOut should throw when ZodDateOut in request 1`] = `[Error: Please use z.dateIn() for input.]`;

exports[`Open API helpers depictDefault() should depict ZodDefault 1`] = `
{
  "default": true,
  "description": "test",
  "type": "boolean",
}
`;

exports[`Open API helpers depictDiscriminatedUnion() should depict ZodDiscriminatedUnion 1`] = `
{
  "description": "test",
  "discriminator": {
    "propertyName": "status",
  },
  "oneOf": [
    {
      "properties": {
        "data": {
          "format": "any",
          "nullable": true,
        },
        "status": {
          "enum": [
            "success",
          ],
          "type": "string",
        },
      },
      "required": [
        "status",
      ],
      "type": "object",
    },
    {
      "properties": {
        "error": {
          "properties": {
            "message": {
              "type": "string",
            },
          },
          "required": [
            "message",
          ],
          "type": "object",
        },
        "status": {
          "enum": [
            "error",
          ],
          "type": "string",
        },
      },
      "required": [
        "status",
        "error",
      ],
      "type": "object",
    },
  ],
}
`;

exports[`Open API helpers depictEffect() should depict ZodEffects preprocess in case of request 1`] = `
{
  "format": "string (preprocessed)",
}
`;

exports[`Open API helpers depictEffect() should depict ZodEffects transformation in case of request 1`] = `
{
  "type": "string",
}
`;

exports[`Open API helpers depictEffect() should depict ZodEffects transformation in case of response 1`] = `
{
  "type": "number",
}
`;

exports[`Open API helpers depictEffect() should depict refinements 1`] = `
{
  "properties": {
    "s": {
      "type": "string",
    },
  },
  "required": [
    "s",
  ],
  "type": "object",
}
`;

exports[`Open API helpers depictEnum() should depict ZodEnum 1`] = `
{
  "description": "test",
  "enum": [
    "one",
    "two",
  ],
  "type": "string",
}
`;

exports[`Open API helpers depictEnum() should depict ZodNativeEnum 1`] = `
{
  "description": "test",
  "enum": [
    "ONE",
    "TWO",
  ],
  "type": "string",
}
`;

exports[`Open API helpers depictFile() should depict ZodFile 1`] = `
{
  "description": "test",
  "format": "binary",
  "type": "string",
}
`;

exports[`Open API helpers depictFile() should throw when using in input 1`] = `[Error: Please use z.file() only within ResultHandler.]`;

exports[`Open API helpers depictIOExamples() should depict examples in case of request 1`] = `
{
  "examples": {
    "example1": {
      "value": {
        "one": "test",
        "two": 123,
      },
    },
    "example2": {
      "value": {
        "one": "test2",
        "two": 456,
      },
    },
  },
}
`;

exports[`Open API helpers depictIOExamples() should depict examples in case of response 1`] = `
{
  "examples": {
    "example1": {
      "value": {
        "one": 4,
        "two": "123",
      },
    },
    "example2": {
      "value": {
        "one": 5,
        "two": "456",
      },
    },
  },
}
`;

exports[`Open API helpers depictIOParamExamples() should depict examples in case of request 1`] = `
{
  "examples": {
    "example1": {
      "value": 123,
    },
    "example2": {
      "value": 456,
    },
  },
}
`;

exports[`Open API helpers depictIOParamExamples() should depict examples in case of response 1`] = `
{
  "examples": {
    "example1": {
      "value": "123",
    },
    "example2": {
      "value": "456",
    },
  },
}
`;

exports[`Open API helpers depictIntersection() should depict ZodIntersection 1`] = `
{
  "allOf": [
    {
      "properties": {
        "one": {
          "exclusiveMaximum": false,
          "exclusiveMinimum": false,
          "format": "double",
          "maximum": 1.7976931348623157e+308,
          "minimum": 5e-324,
          "type": "number",
        },
      },
      "required": [
        "one",
      ],
      "type": "object",
    },
    {
      "properties": {
        "two": {
          "exclusiveMaximum": false,
          "exclusiveMinimum": false,
          "format": "double",
          "maximum": 1.7976931348623157e+308,
          "minimum": 5e-324,
          "type": "number",
        },
      },
      "required": [
        "two",
      ],
      "type": "object",
    },
  ],
  "description": "test",
}
`;

exports[`Open API helpers depictLiteral() should depict ZodLiteral 1`] = `
{
  "description": "test",
  "enum": [
    "testing",
  ],
  "type": "string",
}
`;

exports[`Open API helpers depictNull() should depict ZodNull 1`] = `
{
  "description": "test",
  "format": "null",
  "nullable": true,
  "type": "string",
}
`;

exports[`Open API helpers depictNumber() should depict ZodNumber with refinements 1`] = `
{
  "description": "test",
  "exclusiveMaximum": false,
  "exclusiveMinimum": false,
  "format": "int64",
  "maximum": 20,
  "minimum": 10,
  "type": "integer",
}
`;

exports[`Open API helpers depictNumber() should depict regular ZodNumber 1`] = `
{
  "description": "test",
  "exclusiveMaximum": false,
  "exclusiveMinimum": false,
  "format": "double",
  "maximum": 1.7976931348623157e+308,
  "minimum": 5e-324,
  "type": "number",
}
`;

exports[`Open API helpers depictObject() should depict ZodObject 1`] = `
{
  "description": "test",
  "properties": {
    "one": {
      "exclusiveMaximum": false,
      "exclusiveMinimum": false,
      "format": "double",
      "maximum": 1.7976931348623157e+308,
      "minimum": 5e-324,
      "type": "number",
    },
    "two": {
      "type": "string",
    },
  },
  "required": [
    "one",
    "two",
  ],
  "type": "object",
}
`;

exports[`Open API helpers depictObjectProperties() should depict ZodObject shape 1`] = `
{
  "one": {
    "type": "string",
  },
  "two": {
    "type": "boolean",
  },
}
`;

exports[`Open API helpers depictOptionalOrNullable() should depict ZodNullable 1`] = `
{
  "description": "test",
  "nullable": true,
  "type": "string",
}
`;

exports[`Open API helpers depictOptionalOrNullable() should depict ZodOptional 1`] = `
{
  "description": "test",
  "type": "string",
}
`;

exports[`Open API helpers depictRecord() should depict ZodRecord with key schema enum 1`] = `
{
  "description": "test",
  "properties": {
    "one": {
      "type": "boolean",
    },
    "two": {
      "type": "boolean",
    },
  },
  "required": [
    "one",
    "two",
  ],
  "type": "object",
}
`;

exports[`Open API helpers depictRecord() should depict ZodRecord with key schema literal 1`] = `
{
  "description": "test",
  "properties": {
    "testing": {
      "type": "boolean",
    },
  },
  "required": [
    "testing",
  ],
  "type": "object",
}
`;

exports[`Open API helpers depictRecord() should depict ZodRecord with key schema string 1`] = `
{
  "additionalProperties": {
    "type": "boolean",
  },
  "description": "test",
  "type": "object",
}
`;

exports[`Open API helpers depictRecord() should depict ZodRecord with key schema union of literals 1`] = `
{
  "description": "test",
  "properties": {
    "one": {
      "type": "boolean",
    },
    "two": {
      "type": "boolean",
    },
  },
  "required": [
    "one",
    "two",
  ],
  "type": "object",
}
`;

exports[`Open API helpers depictRecord() should depict classic ZodRecord 1`] = `
{
  "additionalProperties": {
    "type": "boolean",
  },
  "description": "test",
  "type": "object",
}
`;

exports[`Open API helpers depictRequestParams() should depict none if both query and params are disabled 1`] = `[]`;

exports[`Open API helpers depictRequestParams() should depict only path params if query is disabled 1`] = `
[
  {
    "in": "path",
    "name": "id",
    "required": true,
    "schema": {
      "description": "GET /v1/user/:id parameter",
      "type": "string",
    },
  },
]
`;

exports[`Open API helpers depictRequestParams() should depict query and path params 1`] = `
[
  {
    "in": "path",
    "name": "id",
    "required": true,
    "schema": {
      "description": "GET /v1/user/:id parameter",
      "type": "string",
    },
  },
  {
    "in": "query",
    "name": "test",
    "required": true,
    "schema": {
      "description": "GET /v1/user/:id parameter",
      "type": "boolean",
    },
  },
]
`;

exports[`Open API helpers depictSecurity() should depict OAuth2 Security with flows 1`] = `
{
  "flows": {
    "authorizationCode": {
      "authorizationUrl": "https://test.url",
      "refreshUrl": "https://test2.url",
      "scopes": {
        "read": "read something",
        "write": "write something",
      },
      "tokenUrl": "https://test3.url",
    },
    "clientCredentials": {
      "refreshUrl": "https://test2.url",
      "scopes": {
        "read": "read something",
        "write": "write something",
      },
      "tokenUrl": "https://test3.url",
    },
    "implicit": {
      "authorizationUrl": "https://test.url",
      "refreshUrl": "https://test2.url",
      "scopes": {
        "read": "read something",
        "write": "write something",
      },
    },
    "password": {
      "refreshUrl": "https://test2.url",
      "scopes": {
        "read": "read something",
        "write": "write something",
      },
      "tokenUrl": "https://test3.url",
    },
  },
  "type": "oauth2",
}
`;

exports[`Open API helpers depictSecurity() should handle Basic, Bearer and CustomHeader Securities 1`] = `
{
  "or": [
    {
      "and": [
        {
          "scheme": "basic",
          "type": "http",
        },
        {
          "scheme": "bearer",
          "type": "http",
        },
      ],
    },
    {
      "in": "header",
      "name": "X-Key",
      "type": "apiKey",
    },
  ],
}
`;

exports[`Open API helpers depictSecurity() should handle Input and Cookie Securities 1`] = `
{
  "and": [
    {
      "or": [
        {
          "in": "query",
          "name": "apiKey",
          "type": "apiKey",
        },
        {
          "in": "cookie",
          "name": "hash",
          "type": "apiKey",
        },
      ],
    },
  ],
}
`;

exports[`Open API helpers depictSecurity() should handle OpenID and OAuth2 Securities 1`] = `
{
  "or": [
    {
      "openIdConnectUrl": "https://test.url",
      "type": "openIdConnect",
    },
    {
      "flows": {},
      "type": "oauth2",
    },
  ],
}
`;

exports[`Open API helpers depictSecurity() should handle undefined flows 1`] = `
{
  "flows": {},
  "type": "oauth2",
}
`;

exports[`Open API helpers depictSecurityRefs() should handle LogicalAnd 1`] = `
[
  {
    "A": [],
    "B": [],
    "C": [],
  },
]
`;

exports[`Open API helpers depictSecurityRefs() should handle LogicalAnd 2`] = `
[
  {
    "A": [],
    "B": [],
  },
  {
    "A": [],
    "C": [],
  },
]
`;

exports[`Open API helpers depictSecurityRefs() should handle LogicalOr 1`] = `
[
  {
    "A": [],
  },
  {
    "B": [],
  },
  {
    "C": [],
  },
]
`;

exports[`Open API helpers depictSecurityRefs() should handle LogicalOr 2`] = `
[
  {
    "A": [],
  },
  {
    "B": [],
    "C": [],
  },
]
`;

exports[`Open API helpers depictSecurityRefs() should handle the plain value 1`] = `
[
  {
    "A": [],
  },
]
`;

exports[`Open API helpers depictSecurityRefs() should populate the scopes 1`] = `
[
  {
    "A": [
      "write",
    ],
  },
  {
    "B": [
      "read",
    ],
  },
  {
    "C": [
      "read",
      "write",
    ],
  },
]
`;

exports[`Open API helpers depictString() should depict ZodString with refinements 1`] = `
{
  "description": "test",
  "format": "email",
  "maxLength": 20,
  "minLength": 10,
  "type": "string",
}
`;

exports[`Open API helpers depictString() should depict ZodString with regex 1`] = `
{
  "description": "test",
  "pattern": "/^\\d+.\\d+.\\d+$/",
  "type": "string",
}
`;

exports[`Open API helpers depictString() should depict regular ZodString 1`] = `
{
  "description": "test",
  "type": "string",
}
`;

exports[`Open API helpers depictTags() should accept objects with URLs 1`] = `
[
  {
    "description": "Everything about users",
    "name": "users",
  },
  {
    "description": "Everything about files processing",
    "externalDocs": {
      "url": "https://example.com",
    },
    "name": "files",
  },
]
`;

exports[`Open API helpers depictTags() should accept plain descriptions 1`] = `
[
  {
    "description": "Everything about users",
    "name": "users",
  },
  {
    "description": "Everything about files processing",
    "name": "files",
  },
]
`;

exports[`Open API helpers depictTuple() should depict ZodTuple 1`] = `
{
  "description": "test",
  "items": {
    "description": "0: boolean, 1: string, 2: string",
    "format": "tuple",
    "oneOf": [
      {
        "type": "boolean",
      },
      {
        "type": "string",
      },
      {
        "enum": [
          "test",
        ],
        "type": "string",
      },
    ],
  },
  "maxItems": 3,
  "minItems": 3,
  "type": "array",
}
`;

exports[`Open API helpers depictUnion() should depict ZodUnion 1`] = `
{
  "description": "test",
  "oneOf": [
    {
      "type": "string",
    },
    {
      "exclusiveMaximum": false,
      "exclusiveMinimum": false,
      "format": "double",
      "maximum": 1.7976931348623157e+308,
      "minimum": 5e-324,
      "type": "number",
    },
  ],
}
`;

exports[`Open API helpers depictUpload() should depict ZodUpload 1`] = `
{
  "description": "test",
  "format": "binary",
  "type": "string",
}
`;

exports[`Open API helpers depictUpload() should throw when using in response 1`] = `[Error: Please use z.upload() only for input.]`;

exports[`Open API helpers depictZodBranded should depict the actual schema 1`] = `
{
  "minLength": 2,
  "type": "string",
}
`;

exports[`Open API helpers depictZodDate should throw clear error 1`] = `[Error: Using z.date() within output schema is forbidden. Please use z.dateOut() instead. Check out the documentation for details.]`;

exports[`Open API helpers depictZodDate should throw clear error 2`] = `[Error: Using z.date() within input schema is forbidden. Please use z.dateIn() instead. Check out the documentation for details.]`;

exports[`Open API helpers excludeExampleFromDepiction() should remove example property of supplied object 1`] = `
{
  "description": "test",
  "type": "string",
}
`;

exports[`Open API helpers excludeParamsFromDepiction() should handle intersection 1`] = `
{
  "allOf": [
    {
      "properties": {},
      "required": [],
      "type": "object",
    },
    {
      "properties": {
        "b": {
          "type": "string",
        },
      },
      "required": [
        "b",
      ],
      "type": "object",
    },
  ],
}
`;

exports[`Open API helpers excludeParamsFromDepiction() should handle union 1`] = `
{
  "oneOf": [
    {
      "properties": {},
      "required": [],
      "type": "object",
    },
    {
      "properties": {
        "b": {
          "type": "string",
        },
      },
      "required": [
        "b",
      ],
      "type": "object",
    },
  ],
}
`;

exports[`Open API helpers excludeParamsFromDepiction() should omit specified path params 1`] = `
{
  "properties": {
    "b": {
      "type": "string",
    },
  },
  "required": [
    "b",
  ],
  "type": "object",
}
`;

exports[`Open API helpers extractObjectSchema() should handle refined object schema 1`] = `
{
  "_type": "ZodObject",
  "shape": {
    "one": {
      "_type": "ZodString",
    },
  },
}
`;

exports[`Open API helpers extractObjectSchema() should pass the object schema through 1`] = `
{
  "_type": "ZodObject",
  "shape": {
    "one": {
      "_type": "ZodString",
    },
  },
}
`;

exports[`Open API helpers extractObjectSchema() should return object schema for the intersection of object schemas 1`] = `
{
  "_type": "ZodObject",
  "shape": {
    "one": {
      "_type": "ZodString",
    },
    "two": {
      "_type": "ZodNumber",
    },
  },
}
`;

exports[`Open API helpers extractObjectSchema() should return object schema for the union of object schemas 1`] = `
{
  "_type": "ZodObject",
  "shape": {
    "one": {
      "_type": "ZodOptional",
      "value": {
        "_type": "ZodString",
      },
    },
    "two": {
      "_type": "ZodOptional",
      "value": {
        "_type": "ZodNumber",
      },
    },
  },
}
`;
