// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`zod-to-ts Example should produce the expected results 1`] = `
"{
    string: string;
    number: number;
    arrayOfObjects: {
        string: string;
    }[];
    boolean: boolean;
    circular: any;
    union: {
        number: number;
    } | "hi";
    enum: "hi" | "bye";
    intersectionWithTransform: (number & bigint) & (number & string);
    date: any;
    undefined?: any;
    null: null;
    void?: any;
    any?: any;
    unknown?: any;
    never: any;
    optionalString?: string | undefined;
    nullablePartialObject: {
        string?: string | undefined;
        number?: number | undefined;
        fixedArrayOfString?: string[] | undefined;
        object?: {
            string: string;
        } | undefined;
    } | null;
    tuple: [
        string,
        number,
        {
            string: string;
        }
    ];
    record: Record<string, {
        object: {
            arrayOfUnions: ([
                string,
                {
                    string: string;
                }
            ] | bigint)[];
        };
    }>;
    map: any;
    set: any;
    intersection: (string & number) | bigint;
    promise: any;
    function: any;
    optDefaultString?: string | undefined;
    refinedStringWithSomeBullshit: (string | number) & ((bigint | null) | undefined);
    nativeEnum: "A" | "apple" | "banana" | "cantaloupe" | 5;
    lazy: any;
    discUnion: {
        kind: "circle";
        radius: number;
    } | {
        kind: "square";
        x: number;
    } | {
        kind: "triangle";
        x: number;
        y: number;
    };
    branded: string;
    catch?: number;
    pipeline: string;
}"
`;

exports[`zod-to-ts PrimitiveSchema outputs correct typescript 1`] = `
"{
    string: string;
    number: number;
    boolean: boolean;
    date: any;
    undefined?: any;
    null: null;
    void?: any;
    any?: any;
    unknown?: any;
    never: any;
}"
`;

exports[`zod-to-ts createTypeAlias() optionally takes a comment 1`] = `
"/** A basic user */
type User = {
    username: string;
    age: number;
};"
`;

exports[`zod-to-ts createTypeAlias() outputs correct typescript 1`] = `
"type User = {
    username: string;
    age: number;
};"
`;

exports[`zod-to-ts enums handles numeric literals 1`] = `""Red" | "Green" | "Blue" | 0 | 1 | 2"`;

exports[`zod-to-ts enums handles quoted string literals 1`] = `""Two Words" | "'Quotes\\"" | "\\\\\\"Escaped\\\\\\"" | 0 | 1 | 2"`;

exports[`zod-to-ts enums handles string literals 1`] = `""apple" | "banana" | "cantaloupe""`;

exports[`zod-to-ts z.array() outputs correct typescript 1`] = `
"{
    id: number;
    value: string;
}[]"
`;

exports[`zod-to-ts z.discriminatedUnion() outputs correct typescript 1`] = `
"{
    kind: "circle";
    radius: number;
} | {
    kind: "square";
    x: number;
} | {
    kind: "triangle";
    x: number;
    y: number;
}"
`;

exports[`zod-to-ts z.effect() transformations should handle an error within the transformation 1`] = `"any"`;

exports[`zod-to-ts z.effect() transformations should handle unsupported transformation in response 1`] = `"any"`;

exports[`zod-to-ts z.effect() transformations should produce the schema type intact 1`] = `"number"`;

exports[`zod-to-ts z.effect() transformations should produce the schema type transformed 1`] = `"string"`;

exports[`zod-to-ts z.literal() Should produce the correct typescript 0 1`] = `""test""`;

exports[`zod-to-ts z.literal() Should produce the correct typescript 1 1`] = `"true"`;

exports[`zod-to-ts z.literal() Should produce the correct typescript 2 1`] = `"false"`;

exports[`zod-to-ts z.literal() Should produce the correct typescript 3 1`] = `"123"`;

exports[`zod-to-ts z.nullable() outputs correct typescript 1`] = `
"{
    username: string | null;
}"
`;

exports[`zod-to-ts z.object() does not unnecessary quote identifiers 1`] = `
"{
    id: string;
    name: string;
    countryOfOrigin: string;
}"
`;

exports[`zod-to-ts z.object() escapes correctly 1`] = `
"{
    "\\\\": string;
    "\\"": string;
    "'": string;
    "\`": string;
    "\\n": number;
    $e?: any;
    "4t"?: any;
    _r?: any;
    "-r"?: any;
}"
`;

exports[`zod-to-ts z.object() supports string literal properties 1`] = `
"{
    "5": number;
    "string-literal": string;
}"
`;

exports[`zod-to-ts z.object() supports zod.describe() 1`] = `
"{
    /** The name of the item */
    name: string;
    /** The price of the item */
    price: number;
}"
`;

exports[`zod-to-ts z.optional() outputs correct typescript 1`] = `"string | undefined"`;

exports[`zod-to-ts z.optional() should output \`?:\` and undefined union for optional properties 1`] = `
"{
    optional?: string | undefined;
    required: string;
    transform?: number | undefined;
    or?: (number | undefined) | string;
    tuple?: [
        string | undefined,
        number,
        {
            optional?: string | undefined;
            required: string;
        }
    ] | undefined;
}"
`;
