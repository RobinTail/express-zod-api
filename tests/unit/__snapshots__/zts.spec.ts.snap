// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`zod-to-ts Example should produce the expected results 1`] = `
"{
    a: string;
    b: number;
    c: {
        a: string;
    }[];
    d: boolean;
    e: any;
    f: {
        a: number;
    } | "hi";
    g: "hi" | "bye";
    h: (number & bigint) & (number & string);
    i: Date;
    j?: undefined;
    k: null;
    l?: any;
    m?: any;
    n?: any;
    o: any;
    p?: string | undefined;
    q: {
        a?: string | undefined;
        b?: number | undefined;
        c?: string[] | undefined;
        d?: {
            e: string;
        } | undefined;
    } | null;
    r: [
        string,
        number,
        {
            name: string;
        }
    ];
    s: {
        [x: string]: {
            de: {
                me: ([
                    string,
                    {
                        a: string;
                    }
                ] | bigint)[];
            };
        };
    };
    t: Map<string, {
        p: string;
    }[]>;
    u: Set<string>;
    v: (string & number) | bigint;
    w: any;
    x: any;
    y?: string | undefined;
    z: (string | number) & ((bigint | undefined) | null);
    aa: "A" | "apple" | "banana" | "cantaloupe" | 5;
    cc: any;
    dd: "A" | "apple" | "banana" | "cantaloupe" | 5;
    ee: {
        kind: "circle";
        radius: number;
    } | {
        kind: "square";
        x: number;
    } | {
        kind: "triangle";
        x: number;
        y: number;
    };
}"
`;

exports[`zod-to-ts PrimitiveSchema outputs correct typescript 1`] = `
"{
    username: string;
    age: number;
    isAdmin: boolean;
    createdAt: Date;
    undef?: undefined;
    nu: null;
    vo?: any;
    an?: any;
    unknown?: any;
    nev: any;
}"
`;

exports[`zod-to-ts createTypeAlias() optionally takes a comment 1`] = `
"/** A basic user */
type User = {
    username: string;
    age: number;
};"
`;

exports[`zod-to-ts createTypeAlias() outputs correct typescript 1`] = `
"type User = {
    username: string;
    age: number;
};"
`;

exports[`zod-to-ts enums handles numeric literals with resolveNativeEnums 1`] = `""Red" | "Green" | "Blue" | 0 | 1 | 2"`;

exports[`zod-to-ts enums handles string literal properties 1`] = `""Two Words" | "'Quotes\\"" | "\\\\\\"Escaped\\\\\\"" | 0 | 1 | 2"`;

exports[`zod-to-ts enums handles string literals with resolveNativeEnums 1`] = `""apple" | "banana" | "cantaloupe""`;

exports[`zod-to-ts z.array() outputs correct typescript 1`] = `
"{
    id: number;
    value: string;
}[]"
`;

exports[`zod-to-ts z.discriminatedUnion() outputs correct typescript 1`] = `
"{
    kind: "circle";
    radius: number;
} | {
    kind: "square";
    x: number;
} | {
    kind: "triangle";
    x: number;
    y: number;
}"
`;

exports[`zod-to-ts z.nullable() outputs correct typescript 1`] = `
"{
    username: string | null;
}"
`;

exports[`zod-to-ts z.object() does not unnecessary quote identifiers 1`] = `
"{
    id: string;
    name: string;
    countryOfOrigin: string;
}"
`;

exports[`zod-to-ts z.object() escapes correctly 1`] = `
"{
    "\\\\": string;
    "\\"": string;
    "'": string;
    "\`": string;
    "\\n": number;
    $e?: any;
    "4t"?: any;
    _r?: any;
    "-r"?: undefined;
}"
`;

exports[`zod-to-ts z.object() supports string literal properties 1`] = `
"{
    "5": number;
    "string-literal": string;
}"
`;

exports[`zod-to-ts z.object() supports zod.describe() 1`] = `
"{
    /** The name of the item */
    name: string;
    /** The price of the item */
    price: number;
}"
`;

exports[`zod-to-ts z.optional() outputs correct typescript 1`] = `"string | undefined"`;

exports[`zod-to-ts z.optional() should output \`?:\` and undefined union for optional properties 1`] = `
"{
    optional?: string | undefined;
    required: string;
    transform?: number | undefined;
    or?: (number | undefined) | string;
    tuple?: [
        string | undefined,
        number,
        {
            optional?: string | undefined;
            required: string;
        }
    ] | undefined;
}"
`;
