// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Open API generator Issue #98 Should describe non-empty array 1`] = `
"openapi: 3.0.0
info:
  title: \\"Testing issue #98\\"
  version: 3.4.5
paths:
  /v1/getSomething:
    get:
      responses:
        \\"200\\":
          description: GET /v1/getSomething Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      arr:
                        type: array
                        items:
                          type: string
                        minItems: 1
                    required:
                      - arr
                required:
                  - status
                  - data
        \\"400\\":
          description: GET /v1/getSomething Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      parameters:
        - name: arr
          in: query
          required: true
          schema:
            description: GET /v1/getSomething parameter
            type: array
            items:
              type: string
            minItems: 1
    post:
      responses:
        \\"200\\":
          description: POST /v1/getSomething Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      arr:
                        type: array
                        items:
                          type: string
                        minItems: 1
                    required:
                      - arr
                required:
                  - status
                  - data
        \\"400\\":
          description: POST /v1/getSomething Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      requestBody:
        content:
          application/json:
            schema:
              description: POST /v1/getSomething request body
              type: object
              properties:
                arr:
                  type: array
                  items:
                    type: string
                  minItems: 1
              required:
                - arr
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: http://example.com
"
`;

exports[`Open API generator Issue #98 should union schemas 1`] = `
"openapi: 3.0.0
info:
  title: \\"Testing issue #98\\"
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      responses:
        \\"200\\":
          description: POST /v1/getSomething Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    oneOf:
                      - type: object
                        properties:
                          id:
                            type: string
                          field1:
                            type: string
                        required:
                          - id
                          - field1
                      - type: object
                        properties:
                          id:
                            type: string
                          field2:
                            type: string
                        required:
                          - id
                          - field2
                required:
                  - status
                  - data
        \\"400\\":
          description: POST /v1/getSomething Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      requestBody:
        content:
          application/json:
            schema:
              description: POST /v1/getSomething request body
              oneOf:
                - type: object
                  properties:
                    id:
                      type: string
                    field1:
                      type: string
                  required:
                    - id
                    - field1
                - type: object
                  properties:
                    id:
                      type: string
                    field2:
                      type: string
                  required:
                    - id
                    - field2
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: http://example.com
"
`;

exports[`Open API generator Metadata should merge endpoint handler examples with its middleware examples 1`] = `
"openapi: 3.0.0
info:
  title: Testing Metadata:example on IO schema + middleware
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      responses:
        \\"200\\":
          description: POST /v1/getSomething Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    example:
                      num: 123
                    type: object
                    properties:
                      num:
                        type: number
                        format: double
                        minimum: 5e-324
                        exclusiveMinimum: false
                        maximum: 1.7976931348623157e+308
                        exclusiveMaximum: false
                    required:
                      - num
                required:
                  - status
                  - data
              examples:
                example1:
                  value:
                    status: success
                    data:
                      num: 123
        \\"400\\":
          description: POST /v1/getSomething Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      requestBody:
        content:
          application/json:
            schema:
              description: POST /v1/getSomething request body
              allOf:
                - example:
                    key: 1234-56789-01
                  type: object
                  properties:
                    key:
                      type: string
                  required:
                    - key
                - example:
                    str: test
                  type: object
                  properties:
                    str:
                      type: string
                  required:
                    - str
            examples:
              example1:
                value:
                  key: 1234-56789-01
                  str: test
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: http://example.com
"
`;

exports[`Open API generator Metadata should pass over examples of each param from the whole IO schema examples (GET) 1`] = `
"openapi: 3.0.0
info:
  title: Testing Metadata:example on IO schema
  version: 3.4.5
paths:
  /v1/getSomething:
    get:
      responses:
        \\"200\\":
          description: GET /v1/getSomething Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    example:
                      numericStr: \\"123\\"
                    type: object
                    properties:
                      numericStr:
                        type: string
                        format: double
                        minimum: 5e-324
                        exclusiveMinimum: false
                        maximum: 1.7976931348623157e+308
                        exclusiveMaximum: false
                    required:
                      - numericStr
                required:
                  - status
                  - data
              examples:
                example1:
                  value:
                    status: success
                    data:
                      numericStr: \\"123\\"
        \\"400\\":
          description: GET /v1/getSomething Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      parameters:
        - name: strNum
          in: query
          required: true
          schema:
            description: GET /v1/getSomething parameter
            type: string
          examples:
            example1:
              value: \\"123\\"
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: http://example.com
"
`;

exports[`Open API generator Metadata should pass over examples of the whole IO schema (POST) 1`] = `
"openapi: 3.0.0
info:
  title: Testing Metadata:example on IO schema
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      responses:
        \\"200\\":
          description: POST /v1/getSomething Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    example:
                      numericStr: \\"123\\"
                    type: object
                    properties:
                      numericStr:
                        type: string
                        format: double
                        minimum: 5e-324
                        exclusiveMinimum: false
                        maximum: 1.7976931348623157e+308
                        exclusiveMaximum: false
                    required:
                      - numericStr
                required:
                  - status
                  - data
              examples:
                example1:
                  value:
                    status: success
                    data:
                      numericStr: \\"123\\"
        \\"400\\":
          description: POST /v1/getSomething Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      requestBody:
        content:
          application/json:
            schema:
              description: POST /v1/getSomething request body
              type: object
              properties:
                strNum:
                  type: string
              required:
                - strNum
            examples:
              example1:
                value:
                  strNum: \\"123\\"
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: http://example.com
"
`;

exports[`Open API generator Metadata should pass over the example of an individual parameter 1`] = `
"openapi: 3.0.0
info:
  title: Testing Metadata:example on IO parameter
  version: 3.4.5
paths:
  /v1/getSomething:
    get:
      responses:
        \\"200\\":
          description: GET /v1/getSomething Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      numericStr:
                        example: \\"123\\"
                        type: string
                        format: double
                        minimum: 5e-324
                        exclusiveMinimum: false
                        maximum: 1.7976931348623157e+308
                        exclusiveMaximum: false
                    required:
                      - numericStr
                required:
                  - status
                  - data
        \\"400\\":
          description: GET /v1/getSomething Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      parameters:
        - name: strNum
          in: query
          required: true
          schema:
            description: GET /v1/getSomething parameter
            example: \\"123\\"
            type: string
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: http://example.com
"
`;

exports[`Open API generator Metadata should pass over the schema description 1`] = `
"openapi: 3.0.0
info:
  title: Testing Metadata:description
  version: 3.4.5
paths:
  /v1/getSomething:
    get:
      responses:
        \\"200\\":
          description: GET /v1/getSomething Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      result:
                        description: some positive integer
                        type: integer
                        format: int64
                        minimum: 0
                        exclusiveMinimum: true
                        maximum: 9007199254740991
                        exclusiveMaximum: false
                    required:
                      - result
                required:
                  - status
                  - data
        \\"400\\":
          description: GET /v1/getSomething Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      parameters:
        - name: str
          in: query
          required: true
          schema:
            description: here is the test
            type: string
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: http://example.com
"
`;

exports[`Open API generator Route Path Params should handle route path params for GET request 1`] = `
"openapi: 3.0.0
info:
  title: Testing route path params
  version: 3.4.5
paths:
  \\"/v1/{name}\\":
    get:
      responses:
        \\"200\\":
          description: GET /v1/:name Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties: {}
                    required: []
                required:
                  - status
                  - data
        \\"400\\":
          description: GET /v1/:name Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      parameters:
        - name: name
          in: path
          required: true
          schema:
            description: GET /v1/:name parameter
            oneOf:
              - type: string
                enum:
                  - John
              - type: string
                enum:
                  - Jane
        - name: other
          in: query
          required: true
          schema:
            description: GET /v1/:name parameter
            type: boolean
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: http://example.com
"
`;

exports[`Open API generator Route Path Params should handle route path params for POST request 1`] = `
"openapi: 3.0.0
info:
  title: Testing route path params
  version: 3.4.5
paths:
  \\"/v1/{name}\\":
    post:
      responses:
        \\"200\\":
          description: POST /v1/:name Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties: {}
                    required: []
                required:
                  - status
                  - data
        \\"400\\":
          description: POST /v1/:name Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      parameters:
        - name: name
          in: path
          required: true
          schema:
            description: POST /v1/:name parameter
            oneOf:
              - type: string
                enum:
                  - John
              - type: string
                enum:
                  - Jane
      requestBody:
        content:
          application/json:
            schema:
              description: POST /v1/:name request body
              type: object
              properties:
                other:
                  type: boolean
              required:
                - other
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: http://example.com
"
`;

exports[`Open API generator generateOpenApi() should generate the correct schema for complex types 1`] = `
"openapi: 3.0.0
info:
  title: Testing Complex Types
  version: 3.4.5
paths:
  /v1/getSomething:
    get:
      responses:
        \\"200\\":
          description: GET /v1/getSomething Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      literal:
                        type: string
                        enum:
                          - something
                      transformation:
                        type: number
                        format: double
                        minimum: 5e-324
                        exclusiveMinimum: false
                        maximum: 1.7976931348623157e+308
                        exclusiveMaximum: false
                    required:
                      - literal
                      - transformation
                required:
                  - status
                  - data
        \\"400\\":
          description: GET /v1/getSomething Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      parameters:
        - name: array
          in: query
          required: true
          schema:
            description: GET /v1/getSomething parameter
            type: array
            items:
              type: integer
              format: int64
              minimum: 0
              exclusiveMinimum: true
              maximum: 9007199254740991
              exclusiveMaximum: false
            minItems: 1
            maxItems: 3
        - name: unlimited
          in: query
          required: true
          schema:
            description: GET /v1/getSomething parameter
            type: array
            items:
              type: boolean
        - name: transformer
          in: query
          required: true
          schema:
            description: GET /v1/getSomething parameter
            type: string
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: http://example.com
"
`;

exports[`Open API generator generateOpenApi() should generate the correct schema for discriminated union type 1`] = `
"openapi: 3.0.0
info:
  title: Testing Discriminated Union Type
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      responses:
        \\"200\\":
          description: POST /v1/getSomething Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    discriminator:
                      propertyName: status
                    oneOf:
                      - type: object
                        properties:
                          status:
                            type: string
                            enum:
                              - success
                          data:
                            nullable: true
                            format: any
                        required:
                          - status
                      - type: object
                        properties:
                          status:
                            type: string
                            enum:
                              - error
                          error:
                            type: object
                            properties:
                              message:
                                type: string
                            required:
                              - message
                        required:
                          - status
                          - error
                required:
                  - status
                  - data
        \\"400\\":
          description: POST /v1/getSomething Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      requestBody:
        content:
          application/json:
            schema:
              description: POST /v1/getSomething request body
              discriminator:
                propertyName: type
              oneOf:
                - type: object
                  properties:
                    type:
                      type: string
                      enum:
                        - a
                    a:
                      type: string
                  required:
                    - type
                    - a
                - type: object
                  properties:
                    type:
                      type: string
                      enum:
                        - b
                    b:
                      type: string
                  required:
                    - type
                    - b
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: http://example.com
"
`;

exports[`Open API generator generateOpenApi() should generate the correct schema for intersection type 1`] = `
"openapi: 3.0.0
info:
  title: Testing Intersection and And types
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      responses:
        \\"200\\":
          description: POST /v1/getSomething Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      and:
                        allOf:
                          - type: object
                            properties:
                              five:
                                type: integer
                                format: int64
                                minimum: 0
                                exclusiveMinimum: false
                                maximum: 9007199254740991
                                exclusiveMaximum: false
                            required:
                              - five
                          - type: object
                            properties:
                              six:
                                type: string
                            required:
                              - six
                    required:
                      - and
                required:
                  - status
                  - data
        \\"400\\":
          description: POST /v1/getSomething Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      requestBody:
        content:
          application/json:
            schema:
              description: POST /v1/getSomething request body
              type: object
              properties:
                intersection:
                  allOf:
                    - type: object
                      properties:
                        one:
                          type: string
                      required:
                        - one
                    - type: object
                      properties:
                        two:
                          type: string
                      required:
                        - two
              required:
                - intersection
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: http://example.com
"
`;

exports[`Open API generator generateOpenApi() should generate the correct schema for nullable and optional types 1`] = `
"openapi: 3.0.0
info:
  title: Testing Nullable and Optional Types
  version: 3.4.5
paths:
  /v1/getSomething:
    get:
      responses:
        \\"200\\":
          description: GET /v1/getSomething Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      nullable:
                        nullable: true
                        type: string
                    required:
                      - nullable
                required:
                  - status
                  - data
        \\"400\\":
          description: GET /v1/getSomething Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      parameters:
        - name: optional
          in: query
          required: false
          schema:
            description: GET /v1/getSomething parameter
            type: string
        - name: optDefault
          in: query
          required: false
          schema:
            description: GET /v1/getSomething parameter
            type: string
            default: test
        - name: nullish
          in: query
          required: false
          schema:
            description: GET /v1/getSomething parameter
            nullable: true
            type: boolean
        - name: nuDefault
          in: query
          required: false
          schema:
            description: GET /v1/getSomething parameter
            nullable: true
            type: integer
            format: int64
            minimum: 0
            exclusiveMinimum: true
            maximum: 9007199254740991
            exclusiveMaximum: false
            default: 123
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: http://example.com
"
`;

exports[`Open API generator generateOpenApi() should generate the correct schema for union type 1`] = `
"openapi: 3.0.0
info:
  title: Testing Union and Or Types
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      responses:
        \\"200\\":
          description: POST /v1/getSomething Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      or:
                        oneOf:
                          - type: string
                          - type: integer
                            format: int64
                            minimum: 0
                            exclusiveMinimum: true
                            maximum: 9007199254740991
                            exclusiveMaximum: false
                    required:
                      - or
                required:
                  - status
                  - data
        \\"400\\":
          description: POST /v1/getSomething Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      requestBody:
        content:
          application/json:
            schema:
              description: POST /v1/getSomething request body
              type: object
              properties:
                union:
                  oneOf:
                    - type: object
                      properties:
                        one:
                          type: string
                        two:
                          type: integer
                          format: int64
                          minimum: 0
                          exclusiveMinimum: true
                          maximum: 9007199254740991
                          exclusiveMaximum: false
                      required:
                        - one
                        - two
                    - type: object
                      properties:
                        two:
                          type: integer
                          format: int64
                          minimum: -9007199254740991
                          exclusiveMinimum: false
                          maximum: 0
                          exclusiveMaximum: true
                        three:
                          type: string
                      required:
                        - two
                        - three
              required:
                - union
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: http://example.com
"
`;

exports[`Open API generator generateOpenApi() should generate the correct schema of example routing 1`] = `
"openapi: 3.0.0
info:
  title: Example API
  version: 1.2.3
paths:
  /v1/user/retrieve:
    get:
      responses:
        \\"200\\":
          description: GET /v1/user/retrieve Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        format: int64
                        minimum: 0
                        exclusiveMinimum: false
                        maximum: 9007199254740991
                        exclusiveMaximum: false
                      name:
                        type: string
                    required:
                      - id
                      - name
                required:
                  - status
                  - data
        \\"400\\":
          description: GET /v1/user/retrieve Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      description: example user retrieval endpoint
      parameters:
        - name: id
          in: query
          required: true
          schema:
            description: a numeric string containing the id of the user
            type: string
            pattern: /\\\\d+/
  \\"/v1/user/{id}\\":
    post:
      responses:
        \\"200\\":
          description: POST /v1/user/:id Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    example:
                      name: John Doe
                      createdAt: 2021-12-31T00:00:00.000Z
                    type: object
                    properties:
                      name:
                        type: string
                      createdAt:
                        type: string
                        format: date-time
                        description: YYYY-MM-DDTHH:mm:ss.sssZ
                        externalDocs:
                          url: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString
                    required:
                      - name
                      - createdAt
                required:
                  - status
                  - data
              examples:
                example1:
                  value:
                    status: success
                    data:
                      name: John Doe
                      createdAt: 2021-12-31T00:00:00.000Z
        \\"400\\":
          description: POST /v1/user/:id Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      description: example user update endpoint
      parameters:
        - name: id
          in: path
          required: true
          schema:
            description: POST /v1/user/:id parameter
            type: string
          examples:
            example1:
              value: \\"12\\"
      requestBody:
        content:
          application/json:
            schema:
              description: POST /v1/user/:id request body
              allOf:
                - example:
                    key: 1234-5678-90
                  type: object
                  properties:
                    key:
                      type: string
                      minLength: 1
                  required:
                    - key
                - example:
                    name: John Doe
                    birthday: 1963-04-21
                  type: object
                  properties:
                    name:
                      type: string
                      minLength: 1
                    birthday:
                      type: string
                      format: date-time
                      pattern: ^\\\\d{4}-\\\\d{2}-\\\\d{2}(T\\\\d{2}:\\\\d{2}:\\\\d{2}(\\\\.\\\\d{3})?)?Z?$
                      description: YYYY-MM-DDTHH:mm:ss.sssZ
                      externalDocs:
                        url: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString
                  required:
                    - name
                    - birthday
            examples:
              example1:
                value:
                  key: 1234-5678-90
                  name: John Doe
                  birthday: 1963-04-21
  /v1/avatar/send:
    get:
      responses:
        \\"200\\":
          description: GET /v1/avatar/send Successful response
          content:
            image/svg+xml:
              schema:
                type: string
        \\"400\\":
          description: GET /v1/avatar/send Error response
          content:
            text/plain:
              schema:
                type: string
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            description: GET /v1/avatar/send parameter
            type: string
            pattern: /\\\\d+/
  /v1/avatar/stream:
    get:
      responses:
        \\"200\\":
          description: GET /v1/avatar/stream Successful response
          content:
            image/*:
              schema:
                type: string
                format: binary
        \\"400\\":
          description: GET /v1/avatar/stream Error response
          content:
            text/plain:
              schema:
                type: string
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            description: GET /v1/avatar/stream parameter
            type: string
            pattern: /\\\\d+/
  /v1/avatar/upload:
    post:
      responses:
        \\"200\\":
          description: POST /v1/avatar/upload Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                      size:
                        type: integer
                        format: int64
                        minimum: 0
                        exclusiveMinimum: false
                        maximum: 9007199254740991
                        exclusiveMaximum: false
                      mime:
                        type: string
                      hash:
                        type: string
                      otherInputs:
                        type: object
                        additionalProperties:
                          nullable: true
                          format: any
                    required:
                      - name
                      - size
                      - mime
                      - hash
                      - otherInputs
                required:
                  - status
                  - data
        \\"400\\":
          description: POST /v1/avatar/upload Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      requestBody:
        content:
          multipart/form-data:
            schema:
              description: POST /v1/avatar/upload request body
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
              required:
                - avatar
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: http://example.com
"
`;

exports[`Open API generator generateOpenApi() should handle bigint, boolean, date and null 1`] = `
"openapi: 3.0.0
info:
  title: Testing additional types
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      responses:
        \\"200\\":
          description: POST /v1/getSomething Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      \\"null\\":
                        nullable: true
                        type: string
                        format: \\"null\\"
                      dateOut:
                        type: string
                        format: date-time
                        description: YYYY-MM-DDTHH:mm:ss.sssZ
                        externalDocs:
                          url: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString
                    required:
                      - \\"null\\"
                      - dateOut
                required:
                  - status
                  - data
        \\"400\\":
          description: POST /v1/getSomething Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      requestBody:
        content:
          application/json:
            schema:
              description: POST /v1/getSomething request body
              type: object
              properties:
                bigint:
                  type: integer
                  format: bigint
                boolean:
                  type: boolean
                dateIn:
                  type: string
                  format: date-time
                  pattern: ^\\\\d{4}-\\\\d{2}-\\\\d{2}(T\\\\d{2}:\\\\d{2}:\\\\d{2}(\\\\.\\\\d{3})?)?Z?$
                  description: YYYY-MM-DDTHH:mm:ss.sssZ
                  externalDocs:
                    url: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString
              required:
                - bigint
                - boolean
                - dateIn
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: http://example.com
"
`;

exports[`Open API generator generateOpenApi() should handle different number types 1`] = `
"openapi: 3.0.0
info:
  title: Testing numbers
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      responses:
        \\"200\\":
          description: POST /v1/getSomething Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      bigint:
                        type: integer
                        format: bigint
                    required:
                      - bigint
                required:
                  - status
                  - data
        \\"400\\":
          description: POST /v1/getSomething Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      requestBody:
        content:
          application/json:
            schema:
              description: POST /v1/getSomething request body
              type: object
              properties:
                double:
                  type: number
                  format: double
                  minimum: 5e-324
                  exclusiveMinimum: false
                  maximum: 1.7976931348623157e+308
                  exclusiveMaximum: false
                doublePositive:
                  type: number
                  format: double
                  minimum: 0
                  exclusiveMinimum: true
                  maximum: 1.7976931348623157e+308
                  exclusiveMaximum: false
                doubleNegative:
                  type: number
                  format: double
                  minimum: 5e-324
                  exclusiveMinimum: false
                  maximum: 0
                  exclusiveMaximum: true
                doubleLimited:
                  type: number
                  format: double
                  minimum: -0.5
                  exclusiveMinimum: false
                  maximum: 0.5
                  exclusiveMaximum: false
                int:
                  type: integer
                  format: int64
                  minimum: -9007199254740991
                  exclusiveMinimum: false
                  maximum: 9007199254740991
                  exclusiveMaximum: false
                intPositive:
                  type: integer
                  format: int64
                  minimum: 0
                  exclusiveMinimum: true
                  maximum: 9007199254740991
                  exclusiveMaximum: false
                intNegative:
                  type: integer
                  format: int64
                  minimum: -9007199254740991
                  exclusiveMinimum: false
                  maximum: 0
                  exclusiveMaximum: true
                intLimited:
                  type: integer
                  format: int64
                  minimum: -100
                  exclusiveMinimum: false
                  maximum: 100
                  exclusiveMaximum: false
                zero:
                  type: integer
                  format: int64
                  minimum: 0
                  exclusiveMinimum: false
                  maximum: 0
                  exclusiveMaximum: false
              required:
                - double
                - doublePositive
                - doubleNegative
                - doubleLimited
                - int
                - intPositive
                - intNegative
                - intLimited
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: http://example.com
"
`;

exports[`Open API generator generateOpenApi() should handle different string types 1`] = `
"openapi: 3.0.0
info:
  title: Testing strings
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      responses:
        \\"200\\":
          description: POST /v1/getSomething Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      nonempty:
                        type: string
                        minLength: 1
                    required:
                      - nonempty
                required:
                  - status
                  - data
        \\"400\\":
          description: POST /v1/getSomething Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      requestBody:
        content:
          application/json:
            schema:
              description: POST /v1/getSomething request body
              type: object
              properties:
                regular:
                  type: string
                min:
                  type: string
                  minLength: 1
                max:
                  type: string
                  maxLength: 15
                range:
                  type: string
                  minLength: 2
                  maxLength: 3
                email:
                  type: string
                  format: email
                uuid:
                  type: string
                  format: uuid
                cuid:
                  type: string
                  format: cuid
                url:
                  type: string
                  format: url
                numeric:
                  type: string
                  pattern: /\\\\d+/
                combined:
                  type: string
                  format: email
                  minLength: 1
                  maxLength: 90
                  pattern: /.*@example\\\\.com/is
              required:
                - regular
                - min
                - max
                - range
                - email
                - uuid
                - cuid
                - url
                - numeric
                - combined
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: http://example.com
"
`;

exports[`Open API generator generateOpenApi() should handle enum types 1`] = `
"openapi: 3.0.0
info:
  title: Testing enums
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      responses:
        \\"200\\":
          description: POST /v1/getSomething Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      nativeEnum:
                        type: number
                        enum:
                          - 1
                          - 2
                    required:
                      - nativeEnum
                required:
                  - status
                  - data
        \\"400\\":
          description: POST /v1/getSomething Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      requestBody:
        content:
          application/json:
            schema:
              description: POST /v1/getSomething request body
              type: object
              properties:
                regularEnum:
                  type: string
                  enum:
                    - ABC
                    - DEF
              required:
                - regularEnum
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: http://example.com
"
`;

exports[`Open API generator generateOpenApi() should handle record 1`] = `
"openapi: 3.0.0
info:
  title: Testing record
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      responses:
        \\"200\\":
          description: POST /v1/getSomething Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      simple:
                        type: object
                        additionalProperties:
                          type: integer
                          format: int64
                          minimum: -9007199254740991
                          exclusiveMinimum: false
                          maximum: 9007199254740991
                          exclusiveMaximum: false
                      stringy:
                        type: object
                        additionalProperties:
                          type: boolean
                      numeric:
                        type: object
                        additionalProperties:
                          type: boolean
                      literal:
                        type: object
                        properties:
                          only:
                            type: boolean
                        required:
                          - only
                      union:
                        type: object
                        properties:
                          option1:
                            type: boolean
                          option2:
                            type: boolean
                        required:
                          - option1
                          - option2
                      enum:
                        type: object
                        properties:
                          option1:
                            type: boolean
                          option2:
                            type: boolean
                        required:
                          - option1
                          - option2
                    required:
                      - simple
                      - stringy
                      - numeric
                      - literal
                      - union
                      - enum
                required:
                  - status
                  - data
        \\"400\\":
          description: POST /v1/getSomething Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      requestBody:
        content:
          application/json:
            schema:
              description: POST /v1/getSomething request body
              type: object
              properties: {}
              required: []
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: http://example.com
"
`;

exports[`Open API generator generateOpenApi() should handle transformation schema in output 1`] = `
"openapi: 3.0.0
info:
  title: Testing Transformation in response schema
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      responses:
        \\"200\\":
          description: POST /v1/getSomething Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      transform:
                        type: number
                    required:
                      - transform
                required:
                  - status
                  - data
        \\"400\\":
          description: POST /v1/getSomething Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      requestBody:
        content:
          application/json:
            schema:
              description: POST /v1/getSomething request body
              type: object
              properties:
                one:
                  type: string
                two:
                  type: integer
                  format: int64
                  minimum: 0
                  exclusiveMinimum: true
                  maximum: 9007199254740991
                  exclusiveMaximum: false
              required:
                - one
                - two
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: http://example.com
"
`;

exports[`Open API generator generateOpenApi() should handle tuples 1`] = `
"openapi: 3.0.0
info:
  title: Testing tuples
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      responses:
        \\"200\\":
          description: POST /v1/getSomething Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      empty:
                        type: array
                        minItems: 0
                        maxItems: 0
                        items:
                          oneOf: []
                          format: tuple
                    required:
                      - empty
                required:
                  - status
                  - data
        \\"400\\":
          description: POST /v1/getSomething Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      requestBody:
        content:
          application/json:
            schema:
              description: POST /v1/getSomething request body
              type: object
              properties:
                ofOne:
                  type: array
                  minItems: 1
                  maxItems: 1
                  items:
                    oneOf:
                      - type: boolean
                    format: tuple
                    description: \\"0: boolean\\"
                ofStrings:
                  type: array
                  minItems: 2
                  maxItems: 2
                  items:
                    oneOf:
                      - type: string
                      - nullable: true
                        type: string
                    format: tuple
                    description: \\"0: string, 1: string\\"
                complex:
                  type: array
                  minItems: 3
                  maxItems: 3
                  items:
                    oneOf:
                      - type: boolean
                      - type: string
                      - type: integer
                        format: int64
                        minimum: 0
                        exclusiveMinimum: true
                        maximum: 9007199254740991
                        exclusiveMaximum: false
                    format: tuple
                    description: \\"0: boolean, 1: string, 2: integer\\"
              required:
                - ofOne
                - ofStrings
                - complex
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: http://example.com
"
`;

exports[`Open API generator generateOpenApi() should handle type any 1`] = `
"openapi: 3.0.0
info:
  title: Testing type any
  version: 3.4.5
paths:
  /v1/getSomething:
    get:
      responses:
        \\"200\\":
          description: GET /v1/getSomething Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      any:
                        nullable: true
                        format: any
                    required: []
                required:
                  - status
                  - data
        \\"400\\":
          description: GET /v1/getSomething Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      parameters:
        - name: any
          in: query
          required: false
          schema:
            description: GET /v1/getSomething parameter
            nullable: true
            format: any
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: http://example.com
"
`;

exports[`Open API generator generateOpenApi() should handle z.preprocess() 1`] = `
"openapi: 3.0.0
info:
  title: Testing z.preprocess()
  version: 3.4.5
paths:
  /v1/getSomething:
    get:
      responses:
        \\"200\\":
          description: GET /v1/getSomething Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      boolean:
                        nullable: true
                        type: boolean
                    required: []
                required:
                  - status
                  - data
        \\"400\\":
          description: GET /v1/getSomething Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
      parameters:
        - name: string
          in: query
          required: false
          schema:
            description: GET /v1/getSomething parameter
            nullable: true
            format: string (preprocessed)
        - name: number
          in: query
          required: true
          schema:
            description: GET /v1/getSomething parameter
            format: int64 (preprocessed)
            minimum: 0
            exclusiveMinimum: false
            maximum: 9007199254740991
            exclusiveMaximum: false
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: http://example.com
"
`;
