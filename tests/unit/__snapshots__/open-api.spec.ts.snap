// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Open API generator generateOpenApi() should generate the correct schema for complex types 1`] = `
"openapi: 3.0.0
info:
  title: Testing Complex Types
  version: 3.4.5
paths:
  /v1/getSomething:
    get:
      responses:
        default:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: \\"#/components/schemas/responseSchema1\\"
      parameters:
        - $ref: \\"#/components/parameters/parameter1\\"
        - $ref: \\"#/components/parameters/parameter2\\"
components:
  schemas:
    responseSchema1:
      type: object
      properties:
        literal:
          type: string
          enum:
            - something
        transformation:
          type: number
      required:
        - literal
        - transformation
      description: /v1/getSomething GET response schema
  responses: {}
  parameters:
    parameter1:
      name: array
      in: query
      required: true
      schema:
        type: array
        items:
          type: number
        description: /v1/getSomething GET parameter
    parameter2:
      name: transformer
      in: query
      required: true
      schema:
        type: string
        description: /v1/getSomething GET parameter
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: http://example.com
"
`;

exports[`Open API generator generateOpenApi() should generate the correct schema for intersection type 1`] = `
"openapi: 3.0.0
info:
  title: Testing Intersection and And types
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      responses:
        default:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: \\"#/components/schemas/responseSchema1\\"
      requestBody:
        content:
          application/json:
            schema:
              $ref: \\"#/components/schemas/requestBody1\\"
components:
  schemas:
    responseSchema1:
      type: object
      properties:
        and:
          allOf:
            - type: object
              properties:
                five:
                  type: number
              required:
                - five
            - type: object
              properties:
                six:
                  type: string
              required:
                - six
      required:
        - and
      description: /v1/getSomething POST response schema
    requestBody1:
      type: object
      properties:
        intersection:
          allOf:
            - type: object
              properties:
                one:
                  type: string
              required:
                - one
            - type: object
              properties:
                two:
                  type: string
              required:
                - two
      required:
        - intersection
      description: /v1/getSomething POST request body
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: http://example.com
"
`;

exports[`Open API generator generateOpenApi() should generate the correct schema for nullable and optional types 1`] = `
"openapi: 3.0.0
info:
  title: Testing Nullable and Optional Types
  version: 3.4.5
paths:
  /v1/getSomething:
    get:
      responses:
        default:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: \\"#/components/schemas/responseSchema1\\"
      parameters:
        - $ref: \\"#/components/parameters/parameter1\\"
components:
  schemas:
    responseSchema1:
      type: object
      properties:
        nullable:
          nullable: true
          type: string
      required:
        - nullable
      description: /v1/getSomething GET response schema
  responses: {}
  parameters:
    parameter1:
      name: optional
      in: query
      required: false
      schema:
        type: string
        description: /v1/getSomething GET parameter
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: http://example.com
"
`;

exports[`Open API generator generateOpenApi() should generate the correct schema of example routing 1`] = `
"openapi: 3.0.0
info:
  title: Example API
  version: 1.2.3
paths:
  /v1/getUser:
    get:
      responses:
        default:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: \\"#/components/schemas/responseSchema1\\"
      description: example user retrieval endpoint
      parameters:
        - $ref: \\"#/components/parameters/parameter1\\"
  /v1/setUser:
    post:
      responses:
        default:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: \\"#/components/schemas/responseSchema2\\"
      description: example user update endpoint
      requestBody:
        content:
          application/json:
            schema:
              $ref: \\"#/components/schemas/requestBody1\\"
components:
  schemas:
    responseSchema1:
      type: object
      properties:
        status:
          type: string
          enum:
            - That's ok
            - Some kind of warning
        name:
          type: string
      required:
        - status
        - name
      description: /v1/getUser GET response schema
    responseSchema2:
      type: object
      properties:
        status:
          type: string
          enum:
            - Success
            - I'll fix it later
      required:
        - status
      description: /v1/setUser POST response schema
    requestBody1:
      type: object
      properties:
        key:
          type: string
        id:
          type: number
        name:
          type: string
      required:
        - key
        - id
        - name
      description: /v1/setUser POST request body
  responses: {}
  parameters:
    parameter1:
      name: id
      in: query
      required: true
      schema:
        type: string
        description: /v1/getUser GET parameter
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: http://example.com
"
`;

exports[`Open API generator should generate the correct schema for union type 1`] = `
"openapi: 3.0.0
info:
  title: Testing Union and Or Types
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      responses:
        default:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: \\"#/components/schemas/responseSchema1\\"
      requestBody:
        content:
          application/json:
            schema:
              $ref: \\"#/components/schemas/requestBody1\\"
components:
  schemas:
    responseSchema1:
      type: object
      properties:
        or:
          oneOf:
            - type: string
            - type: number
      required:
        - or
      description: /v1/getSomething POST response schema
    requestBody1:
      type: object
      properties:
        union:
          oneOf:
            - type: object
              properties:
                one:
                  type: string
                two:
                  type: number
              required:
                - one
                - two
            - type: object
              properties:
                two:
                  type: number
                three:
                  type: string
              required:
                - two
                - three
      required:
        - union
      description: /v1/getSomething POST request body
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: http://example.com
"
`;

exports[`Open API generator should handle transformation schema in output 1`] = `
"openapi: 3.0.0
info:
  title: Testing Transformation in response schema
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      responses:
        default:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: \\"#/components/schemas/responseSchema1\\"
      requestBody:
        content:
          application/json:
            schema:
              $ref: \\"#/components/schemas/requestBody1\\"
components:
  schemas:
    responseSchema1:
      type: object
      properties:
        transform:
          type: number
      required:
        - transform
      description: /v1/getSomething POST response schema
    requestBody1:
      type: object
      properties:
        one:
          type: string
        two:
          type: number
      required:
        - one
        - two
      description: /v1/getSomething POST request body
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: http://example.com
"
`;
