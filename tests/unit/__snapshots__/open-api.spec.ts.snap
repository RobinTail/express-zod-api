// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Open API generator generateOpenApi() should generate the correct schema for complex types 1`] = `
"openapi: 3.0.0
info:
  title: Testing Complex Types
  version: 3.4.5
paths:
  /v1/getSomething:
    get:
      responses:
        \\"200\\":
          description: GET /v1/getSomething Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      literal:
                        type: string
                        enum:
                          - something
                      transformation:
                        type: number
                    required:
                      - literal
                      - transformation
                required:
                  - status
                  - data
        \\"400\\":
          description: GET /v1/getSomething Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
      parameters:
        - name: array
          in: query
          required: true
          schema:
            type: array
            items:
              type: number
            description: GET /v1/getSomething parameter
        - name: transformer
          in: query
          required: true
          schema:
            type: string
            description: GET /v1/getSomething parameter
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: http://example.com
"
`;

exports[`Open API generator generateOpenApi() should generate the correct schema for intersection type 1`] = `
"openapi: 3.0.0
info:
  title: Testing Intersection and And types
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      responses:
        \\"200\\":
          description: POST /v1/getSomething Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      and:
                        allOf:
                          - type: object
                            properties:
                              five:
                                type: number
                            required:
                              - five
                          - type: object
                            properties:
                              six:
                                type: string
                            required:
                              - six
                    required:
                      - and
                required:
                  - status
                  - data
        \\"400\\":
          description: POST /v1/getSomething Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                intersection:
                  allOf:
                    - type: object
                      properties:
                        one:
                          type: string
                      required:
                        - one
                    - type: object
                      properties:
                        two:
                          type: string
                      required:
                        - two
              required:
                - intersection
              description: POST /v1/getSomething request body
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: http://example.com
"
`;

exports[`Open API generator generateOpenApi() should generate the correct schema for nullable and optional types 1`] = `
"openapi: 3.0.0
info:
  title: Testing Nullable and Optional Types
  version: 3.4.5
paths:
  /v1/getSomething:
    get:
      responses:
        \\"200\\":
          description: GET /v1/getSomething Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      nullable:
                        nullable: true
                        type: string
                    required:
                      - nullable
                required:
                  - status
                  - data
        \\"400\\":
          description: GET /v1/getSomething Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
      parameters:
        - name: optional
          in: query
          required: false
          schema:
            type: string
            description: GET /v1/getSomething parameter
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: http://example.com
"
`;

exports[`Open API generator generateOpenApi() should generate the correct schema for union type 1`] = `
"openapi: 3.0.0
info:
  title: Testing Union and Or Types
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      responses:
        \\"200\\":
          description: POST /v1/getSomething Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      or:
                        oneOf:
                          - type: string
                          - type: number
                    required:
                      - or
                required:
                  - status
                  - data
        \\"400\\":
          description: POST /v1/getSomething Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                union:
                  oneOf:
                    - type: object
                      properties:
                        one:
                          type: string
                        two:
                          type: number
                      required:
                        - one
                        - two
                    - type: object
                      properties:
                        two:
                          type: number
                        three:
                          type: string
                      required:
                        - two
                        - three
              required:
                - union
              description: POST /v1/getSomething request body
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: http://example.com
"
`;

exports[`Open API generator generateOpenApi() should generate the correct schema of example routing 1`] = `
"openapi: 3.0.0
info:
  title: Example API
  version: 1.2.3
paths:
  /v1/getUser:
    get:
      responses:
        \\"200\\":
          description: GET /v1/getUser Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      id:
                        type: number
                      name:
                        type: string
                    required:
                      - id
                      - name
                required:
                  - status
                  - data
        \\"400\\":
          description: GET /v1/getUser Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
      description: example user retrieval endpoint
      parameters:
        - name: id
          in: query
          required: true
          schema:
            type: string
            description: GET /v1/getUser parameter
  /v1/setUser:
    post:
      responses:
        \\"200\\":
          description: POST /v1/setUser Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                      timestamp:
                        type: number
                    required:
                      - name
                      - timestamp
                required:
                  - status
                  - data
        \\"400\\":
          description: POST /v1/setUser Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
      description: example user update endpoint
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                key:
                  type: string
                id:
                  type: number
                name:
                  type: string
              required:
                - key
                - id
                - name
              description: POST /v1/setUser request body
  /v1/avatar:
    get:
      responses:
        \\"200\\":
          description: GET /v1/avatar Successful response
          content:
            image/svg+xml:
              schema:
                type: string
        \\"400\\":
          description: GET /v1/avatar Error response
          content:
            text/plain:
              schema:
                type: string
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
            description: GET /v1/avatar parameter
  /v1/stream:
    get:
      responses:
        \\"200\\":
          description: GET /v1/stream Successful response
          content:
            image/*:
              schema:
                type: string
                format: binary
        \\"400\\":
          description: GET /v1/stream Error response
          content:
            text/plain:
              schema:
                type: string
      parameters:
        - name: userId
          in: query
          required: true
          schema:
            type: string
            description: GET /v1/stream parameter
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: http://example.com
"
`;

exports[`Open API generator generateOpenApi() should handle bigint, boolean, date and null 1`] = `
"openapi: 3.0.0
info:
  title: Testing additional types
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      responses:
        \\"200\\":
          description: POST /v1/getSomething Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      \\"null\\":
                        nullable: true
                        type: string
                        format: \\"null\\"
                    required:
                      - \\"null\\"
                required:
                  - status
                  - data
        \\"400\\":
          description: POST /v1/getSomething Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                bigint:
                  type: integer
                  format: int64
                boolean:
                  type: boolean
                date:
                  type: string
                  format: date
              required:
                - bigint
                - boolean
                - date
              description: POST /v1/getSomething request body
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: http://example.com
"
`;

exports[`Open API generator generateOpenApi() should handle enum types 1`] = `
"openapi: 3.0.0
info:
  title: Testing enums
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      responses:
        \\"200\\":
          description: POST /v1/getSomething Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      nativeEnum:
                        type: number
                        enum:
                          - 1
                          - 2
                    required:
                      - nativeEnum
                required:
                  - status
                  - data
        \\"400\\":
          description: POST /v1/getSomething Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                regularEnum:
                  type: string
                  enum:
                    - ABC
                    - DEF
              required:
                - regularEnum
              description: POST /v1/getSomething request body
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: http://example.com
"
`;

exports[`Open API generator generateOpenApi() should handle transformation schema in output 1`] = `
"openapi: 3.0.0
info:
  title: Testing Transformation in response schema
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      responses:
        \\"200\\":
          description: POST /v1/getSomething Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - success
                  data:
                    type: object
                    properties:
                      transform:
                        type: number
                    required:
                      - transform
                required:
                  - status
                  - data
        \\"400\\":
          description: POST /v1/getSomething Error response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                one:
                  type: string
                two:
                  type: number
              required:
                - one
                - two
              description: POST /v1/getSomething request body
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: http://example.com
"
`;
