// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Documentation helpers > depictAny() > should set format:any 1`] = `
{
  "format": "any",
}
`;

exports[`Documentation helpers > depictArray() > should set type:array and pass items depiction 1`] = `
{
  "items": {
    "type": "boolean",
  },
  "type": "array",
}
`;

exports[`Documentation helpers > depictBigInt() > should set type:integer and format:bigint 1`] = `
{
  "format": "bigint",
  "type": "integer",
}
`;

exports[`Documentation helpers > depictBoolean() > should set type:boolean 1`] = `
{
  "type": "boolean",
}
`;

exports[`Documentation helpers > depictBranded > should pass the next depicter 1`] = `
{
  "minLength": 2,
  "type": "string",
}
`;

exports[`Documentation helpers > depictCatch() > should pass next depicter 1`] = `
{
  "type": "boolean",
}
`;

exports[`Documentation helpers > depictDate > should throw clear error 0 1`] = `
[DocumentationError: Using z.date() within output schema is forbidden. Please use z.dateOut() instead. Check out the documentation for details.
Caused by response schema of an Endpoint assigned to GET method of /v1/user/:id path.]
`;

exports[`Documentation helpers > depictDate > should throw clear error 1 1`] = `
[DocumentationError: Using z.date() within input schema is forbidden. Please use z.dateIn() instead. Check out the documentation for details.
Caused by input schema of an Endpoint assigned to GET method of /v1/user/:id path.]
`;

exports[`Documentation helpers > depictDateIn > should set type:string, pattern and format 1`] = `
{
  "description": "YYYY-MM-DDTHH:mm:ss.sssZ",
  "externalDocs": {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString",
  },
  "format": "date-time",
  "pattern": "^\\d{4}-\\d{2}-\\d{2}(T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?)?Z?$",
  "type": "string",
}
`;

exports[`Documentation helpers > depictDateIn > should throw when ZodDateIn in response 1`] = `
[DocumentationError: Please use z.dateOut() for output.
Caused by response schema of an Endpoint assigned to GET method of /v1/user/:id path.]
`;

exports[`Documentation helpers > depictDateOut > should set type:string, description and format 1`] = `
{
  "description": "YYYY-MM-DDTHH:mm:ss.sssZ",
  "externalDocs": {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString",
  },
  "format": "date-time",
  "type": "string",
}
`;

exports[`Documentation helpers > depictDateOut > should throw when ZodDateOut in request 1`] = `
[DocumentationError: Please use z.dateIn() for input.
Caused by input schema of an Endpoint assigned to GET method of /v1/user/:id path.]
`;

exports[`Documentation helpers > depictDefault() > should set default property 1`] = `
{
  "default": true,
  "type": "boolean",
}
`;

exports[`Documentation helpers > depictDiscriminatedUnion() > should wrap next depicters in oneOf prop and set discriminator prop 1`] = `
{
  "discriminator": {
    "propertyName": "status",
  },
  "oneOf": [
    {
      "properties": {
        "data": {
          "format": "any",
        },
        "status": {
          "enum": [
            "success",
          ],
          "type": "string",
        },
      },
      "required": [
        "status",
      ],
      "type": "object",
    },
    {
      "properties": {
        "error": {
          "properties": {
            "message": {
              "type": "string",
            },
          },
          "required": [
            "message",
          ],
          "type": "object",
        },
        "status": {
          "enum": [
            "error",
          ],
          "type": "string",
        },
      },
      "required": [
        "status",
        "error",
      ],
      "type": "object",
    },
  ],
}
`;

exports[`Documentation helpers > depictEffect() > should depict as 'number (out)' 1`] = `
{
  "type": "number",
}
`;

exports[`Documentation helpers > depictEffect() > should depict as 'object (refinement)' 1`] = `
{
  "properties": {
    "s": {
      "type": "string",
    },
  },
  "required": [
    "s",
  ],
  "type": "object",
}
`;

exports[`Documentation helpers > depictEffect() > should depict as 'string (in)' 1`] = `
{
  "type": "string",
}
`;

exports[`Documentation helpers > depictEffect() > should depict as 'string (preprocess)' 1`] = `
{
  "format": "string (preprocessed)",
}
`;

exports[`Documentation helpers > depictEffect() > should handle edge cases 1`] = `
{
  "format": "any",
}
`;

exports[`Documentation helpers > depictEffect() > should handle edge cases 2`] = `
{
  "format": "any",
}
`;

exports[`Documentation helpers > depictEnum() > should set type and enum properties 1`] = `
{
  "enum": [
    "one",
    "two",
  ],
  "type": "string",
}
`;

exports[`Documentation helpers > depictEnum() > should set type and enum properties 2`] = `
{
  "enum": [
    "ONE",
    "TWO",
  ],
  "type": "string",
}
`;

exports[`Documentation helpers > depictExamples() > should 'pass' examples in case of 'request' 1`] = `
{
  "example1": {
    "value": {
      "one": "test",
      "two": 123,
    },
  },
  "example2": {
    "value": {
      "one": "test2",
      "two": 456,
    },
  },
}
`;

exports[`Documentation helpers > depictExamples() > should 'transform' examples in case of 'response' 1`] = `
{
  "example1": {
    "value": {
      "one": 4,
      "two": "123",
    },
  },
  "example2": {
    "value": {
      "one": 5,
      "two": "456",
    },
  },
}
`;

exports[`Documentation helpers > depictFile() > should set type:string and format accordingly 0 1`] = `
{
  "format": "file",
  "type": "string",
}
`;

exports[`Documentation helpers > depictFile() > should set type:string and format accordingly 1 1`] = `
{
  "format": "binary",
  "type": "string",
}
`;

exports[`Documentation helpers > depictFile() > should set type:string and format accordingly 2 1`] = `
{
  "format": "byte",
  "type": "string",
}
`;

exports[`Documentation helpers > depictIntersection() > should wrap next depicters in allOf property 1`] = `
{
  "allOf": [
    {
      "properties": {
        "one": {
          "format": "double",
          "maximum": 1.7976931348623157e+308,
          "minimum": 5e-324,
          "type": "number",
        },
      },
      "required": [
        "one",
      ],
      "type": "object",
    },
    {
      "properties": {
        "two": {
          "format": "double",
          "maximum": 1.7976931348623157e+308,
          "minimum": 5e-324,
          "type": "number",
        },
      },
      "required": [
        "two",
      ],
      "type": "object",
    },
  ],
}
`;

exports[`Documentation helpers > depictLazy > should handle circular references 0 1`] = `
{
  "$ref": "#/components/schemas/6cbbd837811754902ea1e68d3e5c75e36250b880",
}
`;

exports[`Documentation helpers > depictLazy > should handle circular references 0 2`] = `
{
  "items": {
    "$ref": "#/components/schemas/6cbbd837811754902ea1e68d3e5c75e36250b880",
  },
  "type": "array",
}
`;

exports[`Documentation helpers > depictLazy > should handle circular references 1 1`] = `
{
  "$ref": "#/components/schemas/7a225c55e65ab4a2fd3ce390265b255ee6747049",
}
`;

exports[`Documentation helpers > depictLazy > should handle circular references 1 2`] = `
{
  "$ref": "#/components/schemas/7a225c55e65ab4a2fd3ce390265b255ee6747049",
}
`;

exports[`Documentation helpers > depictLazy > should handle circular references 2 1`] = `
{
  "$ref": "#/components/schemas/118cb3b11b8a1f3b6b1e60a89f96a8be9da32a0f",
}
`;

exports[`Documentation helpers > depictLazy > should handle circular references 2 2`] = `
{
  "properties": {
    "prop": {
      "$ref": "#/components/schemas/118cb3b11b8a1f3b6b1e60a89f96a8be9da32a0f",
    },
  },
  "required": [
    "prop",
  ],
  "type": "object",
}
`;

exports[`Documentation helpers > depictLiteral() > should set type and involve enum property 1`] = `
{
  "enum": [
    "testing",
  ],
  "type": "string",
}
`;

exports[`Documentation helpers > depictNull() > should give type:null 1`] = `
{
  "type": "null",
}
`;

exports[`Documentation helpers > depictNullable() > should add null to the type 0 1`] = `
{
  "type": [
    "string",
    "null",
  ],
}
`;

exports[`Documentation helpers > depictNullable() > should add null to the type 1 1`] = `
{
  "type": [
    "string",
    "null",
  ],
}
`;

exports[`Documentation helpers > depictNullable() > should only add null type once 0 1`] = `
{
  "type": [
    "string",
    "null",
  ],
}
`;

exports[`Documentation helpers > depictNullable() > should only add null type once 1 1`] = `
{
  "type": [
    "null",
  ],
}
`;

exports[`Documentation helpers > depictNullable() > should only add null type once 2 1`] = `
{
  "type": [
    "string",
    "null",
  ],
}
`;

exports[`Documentation helpers > depictNumber() > should type:number, min/max, format and exclusiveness props 1`] = `
{
  "format": "double",
  "maximum": 1.7976931348623157e+308,
  "minimum": 5e-324,
  "type": "number",
}
`;

exports[`Documentation helpers > depictNumber() > should type:number, min/max, format and exclusiveness props 2`] = `
{
  "format": "int64",
  "maximum": 20,
  "minimum": 10,
  "type": "integer",
}
`;

exports[`Documentation helpers > depictObject() > Bug #758 1`] = `
{
  "properties": {
    "a": {
      "type": "string",
    },
    "b": {
      "type": "string",
    },
    "c": {
      "type": [
        "string",
        "null",
      ],
    },
  },
  "required": [
    "a",
    "b",
  ],
  "type": "object",
}
`;

exports[`Documentation helpers > depictObject() > should type:object, properties and required props 0 1`] = `
{
  "properties": {
    "a": {
      "format": "double",
      "maximum": 1.7976931348623157e+308,
      "minimum": 5e-324,
      "type": "number",
    },
    "b": {
      "type": "string",
    },
  },
  "required": [
    "a",
    "b",
  ],
  "type": "object",
}
`;

exports[`Documentation helpers > depictObject() > should type:object, properties and required props 1 1`] = `
{
  "properties": {
    "a": {
      "format": "double",
      "maximum": 1.7976931348623157e+308,
      "minimum": 5e-324,
      "type": "number",
    },
    "b": {
      "type": "string",
    },
  },
  "required": [
    "a",
    "b",
  ],
  "type": "object",
}
`;

exports[`Documentation helpers > depictObject() > should type:object, properties and required props 2 1`] = `
{
  "properties": {
    "a": {
      "format": "double",
      "maximum": 1.7976931348623157e+308,
      "minimum": 5e-324,
      "type": "number",
    },
    "b": {
      "type": "string",
    },
  },
  "required": [
    "a",
    "b",
  ],
  "type": "object",
}
`;

exports[`Documentation helpers > depictObject() > should type:object, properties and required props 3 1`] = `
{
  "properties": {
    "a": {
      "format": "double",
      "maximum": 1.7976931348623157e+308,
      "minimum": 5e-324,
      "type": "number",
    },
    "b": {
      "type": "string",
    },
  },
  "required": [
    "a",
  ],
  "type": "object",
}
`;

exports[`Documentation helpers > depictObject() > should type:object, properties and required props 4 1`] = `
{
  "properties": {
    "a": {
      "format": "double",
      "maximum": 1.7976931348623157e+308,
      "minimum": 5e-324,
      "type": "number",
    },
    "b": {
      "type": [
        "string",
        "null",
      ],
    },
  },
  "type": "object",
}
`;

exports[`Documentation helpers > depictObjectProperties() > should wrap next depicters in a shape of object 1`] = `
{
  "one": {
    "type": "string",
  },
  "two": {
    "type": "boolean",
  },
}
`;

exports[`Documentation helpers > depictOptional() > should pass the next depicter 0 1`] = `
{
  "type": "string",
}
`;

exports[`Documentation helpers > depictOptional() > should pass the next depicter 1 1`] = `
{
  "type": "string",
}
`;

exports[`Documentation helpers > depictParamExamples() > should 'pass' examples in case of 'request' 1`] = `
{
  "example1": {
    "value": 123,
  },
  "example2": {
    "value": 456,
  },
}
`;

exports[`Documentation helpers > depictParamExamples() > should 'transform' examples in case of 'response' 1`] = `
{
  "example1": {
    "value": "123",
  },
  "example2": {
    "value": "456",
  },
}
`;

exports[`Documentation helpers > depictPipeline > should depict as 'boolean (out)' 1`] = `
{
  "type": "boolean",
}
`;

exports[`Documentation helpers > depictPipeline > should depict as 'string (in)' 1`] = `
{
  "type": "string",
}
`;

exports[`Documentation helpers > depictReadonly > should pass the next depicter 1`] = `
{
  "type": "string",
}
`;

exports[`Documentation helpers > depictRecord() > should set properties+required or additionalProperties props 0 1`] = `
{
  "additionalProperties": {
    "type": "boolean",
  },
  "type": "object",
}
`;

exports[`Documentation helpers > depictRecord() > should set properties+required or additionalProperties props 1 1`] = `
{
  "additionalProperties": {
    "type": "boolean",
  },
  "type": "object",
}
`;

exports[`Documentation helpers > depictRecord() > should set properties+required or additionalProperties props 2 1`] = `
{
  "properties": {
    "one": {
      "type": "boolean",
    },
    "two": {
      "type": "boolean",
    },
  },
  "required": [
    "one",
    "two",
  ],
  "type": "object",
}
`;

exports[`Documentation helpers > depictRecord() > should set properties+required or additionalProperties props 3 1`] = `
{
  "properties": {
    "testing": {
      "type": "boolean",
    },
  },
  "required": [
    "testing",
  ],
  "type": "object",
}
`;

exports[`Documentation helpers > depictRecord() > should set properties+required or additionalProperties props 4 1`] = `
{
  "properties": {
    "one": {
      "type": "boolean",
    },
    "two": {
      "type": "boolean",
    },
  },
  "required": [
    "one",
    "two",
  ],
  "type": "object",
}
`;

exports[`Documentation helpers > depictRecord() > should set properties+required or additionalProperties props 5 1`] = `
{
  "additionalProperties": {
    "format": "any",
  },
  "type": "object",
}
`;

exports[`Documentation helpers > depictRequestParams() > Feature 1180: should depict header params when enabled 1`] = `
[
  {
    "description": "GET /v1/user/:id Parameter",
    "examples": undefined,
    "in": "header",
    "name": "x-request-id",
    "required": true,
    "schema": {
      "type": "string",
    },
  },
  {
    "description": "GET /v1/user/:id Parameter",
    "examples": undefined,
    "in": "path",
    "name": "id",
    "required": true,
    "schema": {
      "type": "string",
    },
  },
  {
    "description": "GET /v1/user/:id Parameter",
    "examples": undefined,
    "in": "query",
    "name": "test",
    "required": true,
    "schema": {
      "type": "boolean",
    },
  },
]
`;

exports[`Documentation helpers > depictRequestParams() > should depict none if both query and params are disabled 1`] = `[]`;

exports[`Documentation helpers > depictRequestParams() > should depict only path params if query is disabled 1`] = `
[
  {
    "description": "GET /v1/user/:id Parameter",
    "examples": undefined,
    "in": "path",
    "name": "id",
    "required": true,
    "schema": {
      "type": "string",
    },
  },
]
`;

exports[`Documentation helpers > depictRequestParams() > should depict query and path params 1`] = `
[
  {
    "description": "GET /v1/user/:id Parameter",
    "examples": undefined,
    "in": "path",
    "name": "id",
    "required": true,
    "schema": {
      "type": "string",
    },
  },
  {
    "description": "GET /v1/user/:id Parameter",
    "examples": undefined,
    "in": "query",
    "name": "test",
    "required": true,
    "schema": {
      "type": "boolean",
    },
  },
]
`;

exports[`Documentation helpers > depictSecurity() > should depict OAuth2 Security with flows 1`] = `
{
  "flows": {
    "authorizationCode": {
      "authorizationUrl": "https://test.url",
      "refreshUrl": "https://test2.url",
      "scopes": {
        "read": "read something",
        "write": "write something",
      },
      "tokenUrl": "https://test3.url",
    },
    "clientCredentials": {
      "refreshUrl": "https://test2.url",
      "scopes": {
        "read": "read something",
        "write": "write something",
      },
      "tokenUrl": "https://test3.url",
    },
    "implicit": {
      "authorizationUrl": "https://test.url",
      "refreshUrl": "https://test2.url",
      "scopes": {
        "read": "read something",
        "write": "write something",
      },
    },
    "password": {
      "refreshUrl": "https://test2.url",
      "scopes": {
        "read": "read something",
        "write": "write something",
      },
      "tokenUrl": "https://test3.url",
    },
  },
  "type": "oauth2",
}
`;

exports[`Documentation helpers > depictSecurity() > should handle Basic, Bearer and CustomHeader Securities 1`] = `
{
  "or": [
    {
      "and": [
        {
          "scheme": "basic",
          "type": "http",
        },
        {
          "scheme": "bearer",
          "type": "http",
        },
      ],
    },
    {
      "in": "header",
      "name": "X-Key",
      "type": "apiKey",
    },
  ],
}
`;

exports[`Documentation helpers > depictSecurity() > should handle Input and Cookie Securities 1`] = `
{
  "and": [
    {
      "or": [
        {
          "in": "query",
          "name": "apiKey",
          "type": "apiKey",
        },
        {
          "in": "cookie",
          "name": "hash",
          "type": "apiKey",
        },
      ],
    },
  ],
}
`;

exports[`Documentation helpers > depictSecurity() > should handle OpenID and OAuth2 Securities 1`] = `
{
  "or": [
    {
      "openIdConnectUrl": "https://test.url",
      "type": "openIdConnect",
    },
    {
      "flows": {},
      "type": "oauth2",
    },
  ],
}
`;

exports[`Documentation helpers > depictSecurity() > should handle undefined flows 1`] = `
{
  "flows": {},
  "type": "oauth2",
}
`;

exports[`Documentation helpers > depictSecurity() > should inform on 'actual' placement of the input security parameter 1`] = `
{
  "description": "key MUST be supplied within the request body instead of query",
  "in": "query",
  "name": "key",
  "type": "apiKey",
  "x-in-actual": "body",
}
`;

exports[`Documentation helpers > depictSecurity() > should inform on 'alternative' placement of the input security parameter 1`] = `
{
  "description": "key CAN also be supplied within the request body",
  "in": "query",
  "name": "key",
  "type": "apiKey",
  "x-in-alternative": "body",
}
`;

exports[`Documentation helpers > depictSecurityRefs() > should handle LogicalAnd 1`] = `
[
  {
    "A": [],
    "B": [],
    "C": [],
  },
]
`;

exports[`Documentation helpers > depictSecurityRefs() > should handle LogicalAnd 2`] = `
[
  {
    "A": [],
    "B": [],
  },
  {
    "A": [],
    "C": [],
  },
]
`;

exports[`Documentation helpers > depictSecurityRefs() > should handle LogicalOr 1`] = `
[
  {
    "A": [],
  },
  {
    "B": [],
  },
  {
    "C": [],
  },
]
`;

exports[`Documentation helpers > depictSecurityRefs() > should handle LogicalOr 2`] = `
[
  {
    "A": [],
  },
  {
    "B": [],
    "C": [],
  },
]
`;

exports[`Documentation helpers > depictSecurityRefs() > should handle the plain value 1`] = `
[
  {
    "A": [],
  },
]
`;

exports[`Documentation helpers > depictSecurityRefs() > should populate the scopes 1`] = `
[
  {
    "A": [
      "write",
    ],
  },
  {
    "B": [
      "read",
    ],
  },
  {
    "C": [
      "read",
      "write",
    ],
  },
]
`;

exports[`Documentation helpers > depictString() > should set format, pattern and min/maxLength props 0 1`] = `
{
  "format": "email",
  "maxLength": 20,
  "minLength": 10,
  "type": "string",
}
`;

exports[`Documentation helpers > depictString() > should set format, pattern and min/maxLength props 1 1`] = `
{
  "format": "url",
  "type": "string",
}
`;

exports[`Documentation helpers > depictString() > should set format, pattern and min/maxLength props 2 1`] = `
{
  "format": "uuid",
  "type": "string",
}
`;

exports[`Documentation helpers > depictString() > should set format, pattern and min/maxLength props 3 1`] = `
{
  "format": "cuid",
  "type": "string",
}
`;

exports[`Documentation helpers > depictString() > should set format, pattern and min/maxLength props 4 1`] = `
{
  "format": "date-time",
  "pattern": "/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?Z$/",
  "type": "string",
}
`;

exports[`Documentation helpers > depictString() > should set format, pattern and min/maxLength props 5 1`] = `
{
  "format": "date-time",
  "pattern": "/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?(([+-]\\d{2}:\\d{2})|Z)$/",
  "type": "string",
}
`;

exports[`Documentation helpers > depictString() > should set format, pattern and min/maxLength props 6 1`] = `
{
  "pattern": "/^\\d+.\\d+.\\d+$/",
  "type": "string",
}
`;

exports[`Documentation helpers > depictString() > should set type:string 1`] = `
{
  "type": "string",
}
`;

exports[`Documentation helpers > depictTags() > should accept objects with URLs 1`] = `
[
  {
    "description": "Everything about users",
    "name": "users",
  },
  {
    "description": "Everything about files processing",
    "externalDocs": {
      "url": "https://example.com",
    },
    "name": "files",
  },
]
`;

exports[`Documentation helpers > depictTags() > should accept plain descriptions 1`] = `
[
  {
    "description": "Everything about users",
    "name": "users",
  },
  {
    "description": "Everything about files processing",
    "name": "files",
  },
]
`;

exports[`Documentation helpers > depictTuple() > should utilize prefixItems 1`] = `
{
  "prefixItems": [
    {
      "type": "boolean",
    },
    {
      "type": "string",
    },
    {
      "enum": [
        "test",
      ],
      "type": "string",
    },
  ],
  "type": "array",
}
`;

exports[`Documentation helpers > depictUnion() > should wrap next depicters into oneOf property 1`] = `
{
  "oneOf": [
    {
      "type": "string",
    },
    {
      "format": "double",
      "maximum": 1.7976931348623157e+308,
      "minimum": 5e-324,
      "type": "number",
    },
  ],
}
`;

exports[`Documentation helpers > depictUpload() > should set format:binary and type:string 1`] = `
{
  "format": "binary",
  "type": "string",
}
`;

exports[`Documentation helpers > depictUpload() > should throw when using in response 1`] = `
[DocumentationError: Please use z.upload() only for input.
Caused by response schema of an Endpoint assigned to GET method of /v1/user/:id path.]
`;

exports[`Documentation helpers > excludeExamplesFromDepiction() > should remove example property of supplied object 1`] = `
{
  "description": "test",
  "type": "string",
}
`;

exports[`Documentation helpers > excludeParamsFromDepiction() > should handle the ReferenceObject 1`] = `
{
  "$ref": "test",
}
`;

exports[`Documentation helpers > excludeParamsFromDepiction() > should omit specified path params 0 1`] = `
{
  "properties": {
    "b": {
      "type": "string",
    },
  },
  "required": [
    "b",
  ],
  "type": "object",
}
`;

exports[`Documentation helpers > excludeParamsFromDepiction() > should omit specified path params 1 1`] = `
{
  "oneOf": [
    {
      "properties": {},
      "required": [],
      "type": "object",
    },
    {
      "properties": {
        "b": {
          "type": "string",
        },
      },
      "required": [
        "b",
      ],
      "type": "object",
    },
  ],
}
`;

exports[`Documentation helpers > excludeParamsFromDepiction() > should omit specified path params 2 1`] = `
{
  "allOf": [
    {
      "properties": {},
      "required": [],
      "type": "object",
    },
    {
      "properties": {
        "b": {
          "type": "string",
        },
      },
      "required": [
        "b",
      ],
      "type": "object",
    },
  ],
}
`;

exports[`Documentation helpers > extractObjectSchema() > Feature #600: Top level refinements > should handle refined object schema 1`] = `
{
  "_type": "ZodObject",
  "shape": {
    "one": {
      "_type": "ZodString",
    },
  },
}
`;

exports[`Documentation helpers > extractObjectSchema() > should pass the object schema through 1`] = `
{
  "_type": "ZodObject",
  "shape": {
    "one": {
      "_type": "ZodString",
    },
  },
}
`;

exports[`Documentation helpers > extractObjectSchema() > should return object schema for the intersection of object schemas 1`] = `
{
  "_type": "ZodObject",
  "shape": {
    "one": {
      "_type": "ZodString",
    },
    "two": {
      "_type": "ZodNumber",
    },
  },
}
`;

exports[`Documentation helpers > extractObjectSchema() > should return object schema for the union of object schemas 1`] = `
{
  "_type": "ZodObject",
  "shape": {
    "one": {
      "_type": "ZodOptional",
      "value": {
        "_type": "ZodString",
      },
    },
    "two": {
      "_type": "ZodOptional",
      "value": {
        "_type": "ZodNumber",
      },
    },
  },
}
`;
