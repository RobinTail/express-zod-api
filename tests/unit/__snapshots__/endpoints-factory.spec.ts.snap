// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`EndpointsFactory .build() Should create an endpoint with intersection middleware 1`] = `
Object {
  "n1": ZodNumber {
    "_def": Object {
      "checks": Array [],
      "typeName": "ZodNumber",
    },
    "array": [Function],
    "default": [Function],
    "gt": [Function],
    "gte": [Function],
    "int": [Function],
    "isNullable": [Function],
    "isOptional": [Function],
    "lt": [Function],
    "lte": [Function],
    "max": [Function],
    "min": [Function],
    "negative": [Function],
    "nonnegative": [Function],
    "nonpositive": [Function],
    "nullable": [Function],
    "nullish": [Function],
    "optional": [Function],
    "parse": [Function],
    "parseAsync": [Function],
    "positive": [Function],
    "promise": [Function],
    "refine": [Function],
    "refinement": [Function],
    "safeParse": [Function],
    "safeParseAsync": [Function],
    "setLimit": [Function],
    "spa": [Function],
    "superRefine": [Function],
    "transform": [Function],
  },
  "n2": ZodNumber {
    "_def": Object {
      "checks": Array [],
      "typeName": "ZodNumber",
    },
    "array": [Function],
    "default": [Function],
    "gt": [Function],
    "gte": [Function],
    "int": [Function],
    "isNullable": [Function],
    "isOptional": [Function],
    "lt": [Function],
    "lte": [Function],
    "max": [Function],
    "min": [Function],
    "negative": [Function],
    "nonnegative": [Function],
    "nonpositive": [Function],
    "nullable": [Function],
    "nullish": [Function],
    "optional": [Function],
    "parse": [Function],
    "parseAsync": [Function],
    "positive": [Function],
    "promise": [Function],
    "refine": [Function],
    "refinement": [Function],
    "safeParse": [Function],
    "safeParseAsync": [Function],
    "setLimit": [Function],
    "spa": [Function],
    "superRefine": [Function],
    "transform": [Function],
  },
  "s": ZodString {
    "_def": Object {
      "checks": Array [],
      "typeName": "ZodString",
    },
    "_regex": [Function],
    "array": [Function],
    "default": [Function],
    "email": [Function],
    "isNullable": [Function],
    "isOptional": [Function],
    "max": [Function],
    "min": [Function],
    "nonempty": [Function],
    "nullable": [Function],
    "nullish": [Function],
    "optional": [Function],
    "parse": [Function],
    "parseAsync": [Function],
    "promise": [Function],
    "refine": [Function],
    "refinement": [Function],
    "regex": [Function],
    "safeParse": [Function],
    "safeParseAsync": [Function],
    "spa": [Function],
    "superRefine": [Function],
    "transform": [Function],
    "url": [Function],
    "uuid": [Function],
  },
}
`;

exports[`EndpointsFactory .build() Should create an endpoint with intersection middleware 2`] = `
Object {
  "b": ZodBoolean {
    "_def": Object {
      "typeName": "ZodBoolean",
    },
    "array": [Function],
    "default": [Function],
    "isNullable": [Function],
    "isOptional": [Function],
    "nullable": [Function],
    "nullish": [Function],
    "optional": [Function],
    "parse": [Function],
    "parseAsync": [Function],
    "promise": [Function],
    "refine": [Function],
    "refinement": [Function],
    "safeParse": [Function],
    "safeParseAsync": [Function],
    "spa": [Function],
    "superRefine": [Function],
    "transform": [Function],
  },
}
`;

exports[`EndpointsFactory .build() Should create an endpoint with simple middleware 1`] = `
Object {
  "n": ZodNumber {
    "_def": Object {
      "checks": Array [],
      "typeName": "ZodNumber",
    },
    "array": [Function],
    "default": [Function],
    "gt": [Function],
    "gte": [Function],
    "int": [Function],
    "isNullable": [Function],
    "isOptional": [Function],
    "lt": [Function],
    "lte": [Function],
    "max": [Function],
    "min": [Function],
    "negative": [Function],
    "nonnegative": [Function],
    "nonpositive": [Function],
    "nullable": [Function],
    "nullish": [Function],
    "optional": [Function],
    "parse": [Function],
    "parseAsync": [Function],
    "positive": [Function],
    "promise": [Function],
    "refine": [Function],
    "refinement": [Function],
    "safeParse": [Function],
    "safeParseAsync": [Function],
    "setLimit": [Function],
    "spa": [Function],
    "superRefine": [Function],
    "transform": [Function],
  },
  "s": ZodString {
    "_def": Object {
      "checks": Array [],
      "typeName": "ZodString",
    },
    "_regex": [Function],
    "array": [Function],
    "default": [Function],
    "email": [Function],
    "isNullable": [Function],
    "isOptional": [Function],
    "max": [Function],
    "min": [Function],
    "nonempty": [Function],
    "nullable": [Function],
    "nullish": [Function],
    "optional": [Function],
    "parse": [Function],
    "parseAsync": [Function],
    "promise": [Function],
    "refine": [Function],
    "refinement": [Function],
    "regex": [Function],
    "safeParse": [Function],
    "safeParseAsync": [Function],
    "spa": [Function],
    "superRefine": [Function],
    "transform": [Function],
    "url": [Function],
    "uuid": [Function],
  },
}
`;

exports[`EndpointsFactory .build() Should create an endpoint with simple middleware 2`] = `
Object {
  "b": ZodBoolean {
    "_def": Object {
      "typeName": "ZodBoolean",
    },
    "array": [Function],
    "default": [Function],
    "isNullable": [Function],
    "isOptional": [Function],
    "nullable": [Function],
    "nullish": [Function],
    "optional": [Function],
    "parse": [Function],
    "parseAsync": [Function],
    "promise": [Function],
    "refine": [Function],
    "refinement": [Function],
    "safeParse": [Function],
    "safeParseAsync": [Function],
    "spa": [Function],
    "superRefine": [Function],
    "transform": [Function],
  },
}
`;

exports[`EndpointsFactory .build() Should create an endpoint with union middleware 1`] = `
Object {
  "n1": ZodOptional {
    "_def": Object {
      "innerType": ZodNumber {
        "_def": Object {
          "checks": Array [],
          "typeName": "ZodNumber",
        },
        "array": [Function],
        "default": [Function],
        "gt": [Function],
        "gte": [Function],
        "int": [Function],
        "isNullable": [Function],
        "isOptional": [Function],
        "lt": [Function],
        "lte": [Function],
        "max": [Function],
        "min": [Function],
        "negative": [Function],
        "nonnegative": [Function],
        "nonpositive": [Function],
        "nullable": [Function],
        "nullish": [Function],
        "optional": [Function],
        "parse": [Function],
        "parseAsync": [Function],
        "positive": [Function],
        "promise": [Function],
        "refine": [Function],
        "refinement": [Function],
        "safeParse": [Function],
        "safeParseAsync": [Function],
        "setLimit": [Function],
        "spa": [Function],
        "superRefine": [Function],
        "transform": [Function],
      },
      "typeName": "ZodOptional",
    },
    "array": [Function],
    "default": [Function],
    "isNullable": [Function],
    "isOptional": [Function],
    "nullable": [Function],
    "nullish": [Function],
    "optional": [Function],
    "parse": [Function],
    "parseAsync": [Function],
    "promise": [Function],
    "refine": [Function],
    "refinement": [Function],
    "safeParse": [Function],
    "safeParseAsync": [Function],
    "spa": [Function],
    "superRefine": [Function],
    "transform": [Function],
  },
  "n2": ZodOptional {
    "_def": Object {
      "innerType": ZodNumber {
        "_def": Object {
          "checks": Array [],
          "typeName": "ZodNumber",
        },
        "array": [Function],
        "default": [Function],
        "gt": [Function],
        "gte": [Function],
        "int": [Function],
        "isNullable": [Function],
        "isOptional": [Function],
        "lt": [Function],
        "lte": [Function],
        "max": [Function],
        "min": [Function],
        "negative": [Function],
        "nonnegative": [Function],
        "nonpositive": [Function],
        "nullable": [Function],
        "nullish": [Function],
        "optional": [Function],
        "parse": [Function],
        "parseAsync": [Function],
        "positive": [Function],
        "promise": [Function],
        "refine": [Function],
        "refinement": [Function],
        "safeParse": [Function],
        "safeParseAsync": [Function],
        "setLimit": [Function],
        "spa": [Function],
        "superRefine": [Function],
        "transform": [Function],
      },
      "typeName": "ZodOptional",
    },
    "array": [Function],
    "default": [Function],
    "isNullable": [Function],
    "isOptional": [Function],
    "nullable": [Function],
    "nullish": [Function],
    "optional": [Function],
    "parse": [Function],
    "parseAsync": [Function],
    "promise": [Function],
    "refine": [Function],
    "refinement": [Function],
    "safeParse": [Function],
    "safeParseAsync": [Function],
    "spa": [Function],
    "superRefine": [Function],
    "transform": [Function],
  },
  "s": ZodString {
    "_def": Object {
      "checks": Array [],
      "typeName": "ZodString",
    },
    "_regex": [Function],
    "array": [Function],
    "default": [Function],
    "email": [Function],
    "isNullable": [Function],
    "isOptional": [Function],
    "max": [Function],
    "min": [Function],
    "nonempty": [Function],
    "nullable": [Function],
    "nullish": [Function],
    "optional": [Function],
    "parse": [Function],
    "parseAsync": [Function],
    "promise": [Function],
    "refine": [Function],
    "refinement": [Function],
    "regex": [Function],
    "safeParse": [Function],
    "safeParseAsync": [Function],
    "spa": [Function],
    "superRefine": [Function],
    "transform": [Function],
    "url": [Function],
    "uuid": [Function],
  },
}
`;

exports[`EndpointsFactory .build() Should create an endpoint with union middleware 2`] = `
Object {
  "b": ZodBoolean {
    "_def": Object {
      "typeName": "ZodBoolean",
    },
    "array": [Function],
    "default": [Function],
    "isNullable": [Function],
    "isOptional": [Function],
    "nullable": [Function],
    "nullish": [Function],
    "optional": [Function],
    "parse": [Function],
    "parseAsync": [Function],
    "promise": [Function],
    "refine": [Function],
    "refinement": [Function],
    "safeParse": [Function],
    "safeParseAsync": [Function],
    "spa": [Function],
    "superRefine": [Function],
    "transform": [Function],
  },
}
`;
