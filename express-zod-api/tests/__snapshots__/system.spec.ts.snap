// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`App in production mode > Negative > Should call Last Resort Handler in case of faulty ResultHandler 1`] = `
[
  "Result handler failure",
  ResultHandlerError({
    "cause": AssertionError({
      "message": "I am faulty",
    }),
    "message": "I am faulty",
  }),
]
`;

exports[`App in production mode > Negative > Should treat custom errors in endpoint input validations as they are 1`] = `
[
  "Result handler failure",
  ResultHandlerError({
    "cause": AssertionError({
      "message": "I am faulty",
    }),
    "handled": AssertionError({
      "message": "Custom error in the Endpoint input validation",
    }),
    "message": "I am faulty",
  }),
]
`;

exports[`App in production mode > Negative > Should treat custom errors in middleware input validations as they are 1`] = `
[
  "Result handler failure",
  ResultHandlerError({
    "cause": AssertionError({
      "message": "I am faulty",
    }),
    "handled": AssertionError({
      "message": "Custom error in the Middleware input validation",
    }),
    "message": "I am faulty",
  }),
]
`;

exports[`App in production mode > Positive > Should br-compress the response in case it is supported by client 1`] = `
{
  "data": {
    "anything": 300,
    "doubleKey": "123123",
    "method": "get",
    "permissions": [
      "any",
    ],
    "userId": 354,
  },
  "status": "success",
}
`;

exports[`App in production mode > Positive > Should gzip-compress the response in case it is supported by client 1`] = `
{
  "data": {
    "anything": 300,
    "doubleKey": "123123",
    "method": "get",
    "permissions": [
      "any",
    ],
    "userId": 354,
  },
  "status": "success",
}
`;

exports[`App in production mode > Protocol > Should fail on invalid method 1`] = `
{
  "error": {
    "message": "PUT is not allowed",
  },
  "status": "error",
}
`;

exports[`App in production mode > Protocol > Should fail on invalid path 1`] = `
{
  "error": {
    "message": "Can not GET /v1/wrong",
  },
  "status": "error",
}
`;

exports[`App in production mode > Protocol > Should fail when missing content type header 1`] = `
{
  "error": {
    "message": "Invalid input: expected string, received undefined at key",
  },
  "status": "error",
}
`;

exports[`App in production mode > Protocol > Should handle JSON parser failures 1`] = `
{
  "error": {
    "message": StringMatching /Unterminated string in JSON at position 25/,
  },
  "status": "error",
}
`;

exports[`App in production mode > Validation > Problem 787: Should NOT treat ZodError thrown from within the handler as IOSchema validation error 1`] = `
{
  "error": {
    "message": "Internal Server Error",
  },
  "status": "error",
}
`;

exports[`App in production mode > Validation > Problem 787: Should NOT treat ZodError thrown from within the handler as IOSchema validation error 2`] = `
[
  "Server side error",
  {
    "error": InternalServerError({
      "cause": ZodError({
        "issues": [
          {
            "code": "invalid_type",
            "expected": "number",
            "message": "Invalid input: expected number, received string",
            "path": [],
          },
        ],
      }),
      "message": "Invalid input: expected number, received string",
    }),
    "payload": {
      "key": "123",
      "something": "internal_zod_error",
    },
    "url": "/v1/test",
  },
]
`;

exports[`App in production mode > Validation > Should fail on handler input type mismatch 1`] = `
{
  "error": {
    "message": "Invalid input: expected string, received number at something",
  },
  "status": "error",
}
`;

exports[`App in production mode > Validation > Should fail on handler output type mismatch 1`] = `
{
  "error": {
    "message": "Internal Server Error",
  },
  "status": "error",
}
`;

exports[`App in production mode > Validation > Should fail on handler output type mismatch 2`] = `
[
  "Server side error",
  {
    "error": InternalServerError({
      "cause": ZodError({
        "issues": [
          {
            "code": "too_small",
            "inclusive": false,
            "message": "Too small: expected number to be >0",
            "minimum": 0,
            "origin": "number",
            "path": [
              "anything",
            ],
          },
        ],
      }),
      "message": "Too small: expected number to be >0 at output.anything",
    }),
    "payload": {
      "key": "123",
      "something": "gimme fail",
    },
    "url": "/v1/test",
  },
]
`;

exports[`App in production mode > Validation > Should fail on middleware input type mismatch 1`] = `
{
  "error": {
    "message": "Invalid input: expected string, received number at key",
  },
  "status": "error",
}
`;

exports[`App in production mode > Validation > Should fail on middleware refinement mismatch 1`] = `
{
  "error": {
    "message": "Invalid key at key",
  },
  "status": "error",
}
`;
