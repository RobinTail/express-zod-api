// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Endpoint > #handleResult > Should handle errors within ResultHandler 1`] = `
[
  [
    "Result handler failure",
    ResultHandlerError({
      "cause": AssertionError({
        "message": "Something unexpected happened",
      }),
      "message": "Something unexpected happened",
    }),
  ],
]
`;

exports[`Endpoint > #parseOutput > Should throw on output validation failure 1`] = `
{
  "error": {
    "message": "output.email: Invalid email address",
  },
  "status": "error",
}
`;

exports[`Endpoint > .getResponses() > should return the negative responses (readonly) 1`] = `
[
  {
    "mimeTypes": [
      "application/json",
    ],
    "schema": {
      "$defs": {
        "errorTreeSchema": {
          "additionalProperties": false,
          "id": "errorTreeSchema",
          "properties": {
            "errors": {
              "items": {
                "type": "string",
              },
              "type": "array",
            },
            "items": {
              "items": {
                "$ref": "#/$defs/errorTreeSchema",
              },
              "type": "array",
            },
            "properties": {
              "additionalProperties": {
                "$ref": "#/$defs/errorTreeSchema",
              },
              "propertyNames": {
                "type": "string",
              },
              "type": "object",
            },
          },
          "required": [
            "errors",
          ],
          "type": "object",
        },
      },
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "additionalProperties": false,
      "examples": [
        {
          "error": {
            "message": "Sample error message",
          },
          "status": "error",
        },
      ],
      "properties": {
        "error": {
          "additionalProperties": false,
          "properties": {
            "message": {
              "type": "string",
            },
          },
          "required": [
            "message",
          ],
          "type": "object",
        },
        "status": {
          "const": "error",
          "type": "string",
        },
        "tree": {
          "$ref": "#/$defs/errorTreeSchema",
        },
      },
      "required": [
        "status",
        "error",
      ],
      "type": "object",
    },
    "statusCodes": [
      400,
    ],
  },
]
`;

exports[`Endpoint > .getResponses() > should return the positive responses (readonly) 1`] = `
[
  {
    "mimeTypes": [
      "application/json",
    ],
    "schema": {
      "$schema": "https://json-schema.org/draft/2020-12/schema",
      "additionalProperties": false,
      "properties": {
        "data": {
          "additionalProperties": false,
          "properties": {
            "something": {
              "type": "number",
            },
          },
          "required": [
            "something",
          ],
          "type": "object",
        },
        "status": {
          "const": "success",
          "type": "string",
        },
      },
      "required": [
        "status",
        "data",
      ],
      "type": "object",
    },
    "statusCodes": [
      200,
    ],
  },
]
`;

exports[`Endpoint > Feature #600: Top level refinements > should fail during the refinement of invalid inputs 1`] = `
{
  "error": {
    "message": "Please provide at least one property",
  },
  "status": "error",
  "tree": {
    "errors": [
      "Please provide at least one property",
    ],
  },
}
`;

exports[`Endpoint > Issue #585: Handling non-Error exceptions > thrown in #handleResult() 1`] = `
[
  [
    "Result handler failure",
    ResultHandlerError({
      "cause": AssertionError({
        "message": "Something unexpected happened",
      }),
      "message": "Something unexpected happened",
    }),
  ],
]
`;

exports[`Endpoint > Issue #654: Top level refinements > should fail during the refinement of invalid inputs 1`] = `
{
  "error": {
    "message": "dynamicValue: type1Attribute is required if type is type1",
  },
  "status": "error",
  "tree": {
    "errors": [],
    "properties": {
      "dynamicValue": {
        "errors": [
          "type1Attribute is required if type is type1",
        ],
      },
    },
  },
}
`;
