// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Documentation > Basic cases > should be able to specify operation 1`] = `
"openapi: 3.1.0
info:
  title: Testing Operation IDs
  version: 3.4.5
paths:
  /v1/getSome/thing:
    get:
      operationId: coolOperationId
      summary: thing is the path segment
      description: thing is the path segment
      responses:
        "200":
          description: GET /v1/getSome/thing Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                required:
                  - status
                  - data
        "400":
          description: GET /v1/getSome/thing Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Basic cases > should be able to specify the operationId provider depending on method 1`] = `
"openapi: 3.1.0
info:
  title: Testing Operation IDs
  version: 3.4.5
paths:
  /v1/getSome/thing:
    get:
      operationId: getCoolOperationId
      summary: thing is the path segment
      description: thing is the path segment
      responses:
        "200":
          description: GET /v1/getSome/thing Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                required:
                  - status
                  - data
        "400":
          description: GET /v1/getSome/thing Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
    post:
      operationId: postCoolOperationId
      summary: thing is the path segment
      description: thing is the path segment
      requestBody:
        description: POST /v1/getSome/thing Request body
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: POST /v1/getSome/thing Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                required:
                  - status
                  - data
        "400":
          description: POST /v1/getSome/thing Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Basic cases > should ensure the uniq operation ids 1`] = `
"openapi: 3.1.0
info:
  title: Testing Operation IDs
  version: 3.4.5
paths:
  /v1/getSome/thing:
    get:
      operationId: GetV1GetSomeThing
      summary: operationIdEndpoint
      description: thing is the path segment
      responses:
        "200":
          description: GET /v1/getSome/thing Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                required:
                  - status
                  - data
        "400":
          description: GET /v1/getSome/thing Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
  /v1/getSome/{thing}:
    get:
      operationId: GetV1GetSomeThing2
      summary: thing is the path parameter
      description: thing is the path parameter
      responses:
        "200":
          description: GET /v1/getSome/:thing Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                required:
                  - status
                  - data
        "400":
          description: GET /v1/getSome/:thing Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Basic cases > should ensure uniq security schema names 1`] = `
"openapi: 3.1.0
info:
  title: Testing Security
  version: 3.4.5
paths:
  /v1/getSomething:
    get:
      operationId: GetV1GetSomething
      parameters:
        - name: key
          in: query
          required: true
          description: GET /v1/getSomething Parameter
          schema:
            type: string
        - name: str
          in: query
          required: true
          description: GET /v1/getSomething Parameter
          schema:
            type: string
      security:
        - APIKEY_1: []
        - HTTP_1: []
      responses:
        "200":
          description: GET /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                    properties:
                      num:
                        type: number
                        format: double
                        minimum: -1.7976931348623157e+308
                        maximum: 1.7976931348623157e+308
                    required:
                      - num
                required:
                  - status
                  - data
        "400":
          description: GET /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
  /v1/setSomething:
    post:
      operationId: PostV1SetSomething
      requestBody:
        description: POST /v1/setSomething Request body
        content:
          application/json:
            schema:
              type: object
      security:
        - HTTP_1: []
          OAUTH2_1:
            - write
      responses:
        "200":
          description: POST /v1/setSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                required:
                  - status
                  - data
        "400":
          description: POST /v1/setSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
  /v1/updateSomething:
    put:
      operationId: PutV1UpdateSomething
      requestBody:
        description: PUT /v1/updateSomething Request body
        content:
          application/json:
            schema:
              type: object
      security:
        - HTTP_2: []
      responses:
        "200":
          description: PUT /v1/updateSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                required:
                  - status
                  - data
        "400":
          description: PUT /v1/updateSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes:
    APIKEY_1:
      type: apiKey
      in: query
      name: key
    HTTP_1:
      type: http
      scheme: bearer
    OAUTH2_1:
      type: oauth2
      flows:
        password:
          tokenUrl: https://some.url
          scopes:
            read: read something
            write: write something
    HTTP_2:
      type: http
      scheme: bearer
      bearerFormat: JWT
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Basic cases > should generate the correct schema for DELETE request without body 1`] = `
"openapi: 3.1.0
info:
  title: Testing DELETE request without body
  version: 3.4.5
paths:
  /v1/deleteSomething:
    delete:
      operationId: DeleteV1DeleteSomething
      responses:
        "200":
          description: DELETE /v1/deleteSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                    properties:
                      whatever:
                        type: number
                        format: double
                    required:
                      - whatever
                required:
                  - status
                  - data
        "400":
          description: DELETE /v1/deleteSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Basic cases > should generate the correct schema for complex types 1`] = `
"openapi: 3.1.0
info:
  title: Testing Complex Types
  version: 3.4.5
paths:
  /v1/getSomething:
    get:
      operationId: GetV1GetSomething
      parameters:
        - name: array
          in: query
          required: true
          description: GET /v1/getSomething Parameter
          schema:
            type: array
            items:
              type: integer
              format: int64
              exclusiveMinimum: 0
              maximum: 9007199254740991
            minItems: 1
            maxItems: 3
        - name: unlimited
          in: query
          required: true
          description: GET /v1/getSomething Parameter
          schema:
            type: array
            items:
              type: boolean
        - name: transformer
          in: query
          required: true
          description: GET /v1/getSomething Parameter
          schema:
            type: string
      responses:
        "200":
          description: GET /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                    properties:
                      literal:
                        type: string
                        const: something
                      transformation:
                        type: number
                        format: double
                        minimum: -1.7976931348623157e+308
                        maximum: 1.7976931348623157e+308
                    required:
                      - literal
                      - transformation
                required:
                  - status
                  - data
        "400":
          description: GET /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Basic cases > should generate the correct schema for discriminated union type 1`] = `
"openapi: 3.1.0
info:
  title: Testing Discriminated Union Type
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      operationId: PostV1GetSomething
      requestBody:
        description: POST /v1/getSomething Request body
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    type:
                      type: string
                      const: a
                    a:
                      type: string
                  required:
                    - type
                    - a
                - type: object
                  properties:
                    type:
                      type: string
                      const: b
                    b:
                      type: string
                  required:
                    - type
                    - b
              discriminator:
                propertyName: type
        required: true
      responses:
        "200":
          description: POST /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    oneOf:
                      - type: object
                        properties:
                          status:
                            type: string
                            const: success
                          data:
                            format: any
                        required:
                          - status
                      - type: object
                        properties:
                          status:
                            type: string
                            const: error
                          error:
                            type: object
                            properties:
                              message:
                                type: string
                            required:
                              - message
                        required:
                          - status
                          - error
                    discriminator:
                      propertyName: status
                required:
                  - status
                  - data
        "400":
          description: POST /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Basic cases > should generate the correct schema for intersection type 1`] = `
"openapi: 3.1.0
info:
  title: Testing Intersection and And types
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      operationId: PostV1GetSomething
      requestBody:
        description: POST /v1/getSomething Request body
        content:
          application/json:
            schema:
              type: object
              properties:
                intersection:
                  type: object
                  properties:
                    one:
                      type: string
                    two:
                      type: string
                  required:
                    - one
                    - two
              required:
                - intersection
        required: true
      responses:
        "200":
          description: POST /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                    properties:
                      and:
                        type: object
                        properties:
                          five:
                            type: integer
                            format: int64
                            minimum: 0
                            maximum: 9007199254740991
                          six:
                            type: string
                        required:
                          - five
                          - six
                    required:
                      - and
                required:
                  - status
                  - data
        "400":
          description: POST /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Basic cases > should generate the correct schema for nullable and optional types 1`] = `
"openapi: 3.1.0
info:
  title: Testing Nullable and Optional Types
  version: 3.4.5
paths:
  /v1/getSomething:
    get:
      operationId: GetV1GetSomething
      parameters:
        - name: optional
          in: query
          required: false
          description: GET /v1/getSomething Parameter
          schema:
            type: string
        - name: optDefault
          in: query
          required: false
          description: GET /v1/getSomething Parameter
          schema:
            type: string
            default: test
        - name: nullish
          in: query
          required: false
          description: GET /v1/getSomething Parameter
          schema:
            type:
              - boolean
              - "null"
        - name: nuDefault
          in: query
          required: false
          description: GET /v1/getSomething Parameter
          schema:
            type:
              - integer
              - "null"
            format: int64
            exclusiveMinimum: 0
            maximum: 9007199254740991
            default: 123
      responses:
        "200":
          description: GET /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                    properties:
                      nullable:
                        type:
                          - string
                          - "null"
                    required:
                      - nullable
                required:
                  - status
                  - data
        "400":
          description: GET /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Basic cases > should generate the correct schema for union type 1`] = `
"openapi: 3.1.0
info:
  title: Testing Union and Or Types
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      operationId: PostV1GetSomething
      requestBody:
        description: POST /v1/getSomething Request body
        content:
          application/json:
            schema:
              type: object
              properties:
                union:
                  oneOf:
                    - type: object
                      properties:
                        one:
                          type: string
                        two:
                          type: integer
                          format: int64
                          exclusiveMinimum: 0
                          maximum: 9007199254740991
                      required:
                        - one
                        - two
                    - type: object
                      properties:
                        two:
                          type: integer
                          format: int64
                          minimum: -9007199254740991
                          exclusiveMaximum: 0
                        three:
                          type: string
                      required:
                        - two
                        - three
              required:
                - union
        required: true
      responses:
        "200":
          description: POST /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                    properties:
                      or:
                        oneOf:
                          - type: string
                          - type: integer
                            format: int64
                            exclusiveMinimum: 0
                            maximum: 9007199254740991
                    required:
                      - or
                required:
                  - status
                  - data
        "400":
          description: POST /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Basic cases > should handle bigint, boolean, date, null and readonly 1`] = `
"openapi: 3.1.0
info:
  title: Testing additional types
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      operationId: PostV1GetSomething
      requestBody:
        description: POST /v1/getSomething Request body
        content:
          application/json:
            schema:
              type: object
              properties:
                bigint:
                  type: integer
                  format: bigint
                boolean:
                  type: boolean
                dateIn:
                  description: YYYY-MM-DDTHH:mm:ss.sssZ
                  type: string
                  format: date-time
                  pattern: ^\\d{4}-\\d{2}-\\d{2}(T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?)?Z?$
                  externalDocs:
                    url: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString
              required:
                - bigint
                - boolean
                - dateIn
        required: true
      responses:
        "200":
          description: POST /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                    properties:
                      "null":
                        type: "null"
                      dateOut:
                        description: YYYY-MM-DDTHH:mm:ss.sssZ
                        type: string
                        format: date-time
                        externalDocs:
                          url: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString
                    required:
                      - "null"
                      - dateOut
                required:
                  - status
                  - data
        "400":
          description: POST /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Basic cases > should handle circular schemas via z.lazy() 1`] = `
"openapi: 3.1.0
info:
  title: Testing Lazy
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      operationId: PostV1GetSomething
      requestBody:
        description: POST /v1/getSomething Request body
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              required:
                - name
        required: true
      responses:
        "200":
          description: POST /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                    properties:
                      zodExample:
                        type: object
                        properties:
                          name:
                            type: string
                          subcategories:
                            $ref: "#/components/schemas/Schema1"
                        required:
                          - name
                          - subcategories
                    required:
                      - zodExample
                required:
                  - status
                  - data
        "400":
          description: POST /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
components:
  schemas:
    Schema1:
      type: array
      items:
        type: object
        properties:
          name:
            type: string
          subcategories:
            $ref: "#/components/schemas/Schema1"
        required:
          - name
          - subcategories
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Basic cases > should handle custom mime types and status codes 1`] = `
"openapi: 3.1.0
info:
  title: Testing MIME types and status codes
  version: 3.4.5
paths:
  /v1/getSomething:
    get:
      operationId: GetV1GetSomething
      responses:
        "201":
          description: GET /v1/getSomething Positive response
          content:
            application/json: &a1
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: OK
                  result:
                    type: object
                required:
                  - status
                  - result
            text/vnd.yaml: *a1
        "403":
          description: GET /v1/getSomething Negative response
          content:
            text/vnd.yaml:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: NOT OK
                required:
                  - status
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Basic cases > should handle different number types 1`] = `
"openapi: 3.1.0
info:
  title: Testing numbers
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      operationId: PostV1GetSomething
      requestBody:
        description: POST /v1/getSomething Request body
        content:
          application/json:
            schema:
              type: object
              properties:
                double:
                  type: number
                  format: double
                  minimum: -1.7976931348623157e+308
                  maximum: 1.7976931348623157e+308
                doublePositive:
                  type: number
                  format: double
                  exclusiveMinimum: 0
                  maximum: 1.7976931348623157e+308
                doubleNegative:
                  type: number
                  format: double
                  minimum: -1.7976931348623157e+308
                  exclusiveMaximum: 0
                doubleLimited:
                  type: number
                  format: double
                  minimum: -0.5
                  maximum: 0.5
                int:
                  type: integer
                  format: int64
                  minimum: -9007199254740991
                  maximum: 9007199254740991
                intPositive:
                  type: integer
                  format: int64
                  exclusiveMinimum: 0
                  maximum: 9007199254740991
                intNegative:
                  type: integer
                  format: int64
                  minimum: -9007199254740991
                  exclusiveMaximum: 0
                intLimited:
                  type: integer
                  format: int64
                  minimum: -100
                  maximum: 100
                zero:
                  type: integer
                  format: int64
                  minimum: 0
                  maximum: 0
              required:
                - double
                - doublePositive
                - doubleNegative
                - doubleLimited
                - int
                - intPositive
                - intNegative
                - intLimited
        required: true
      responses:
        "200":
          description: POST /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                    properties:
                      bigint:
                        type: integer
                        format: bigint
                    required:
                      - bigint
                required:
                  - status
                  - data
        "400":
          description: POST /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Basic cases > should handle different string types 1`] = `
"openapi: 3.1.0
info:
  title: Testing strings
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      operationId: PostV1GetSomething
      requestBody:
        description: POST /v1/getSomething Request body
        content:
          application/json:
            schema:
              type: object
              properties:
                regular:
                  type: string
                min:
                  type: string
                  minLength: 1
                max:
                  type: string
                  maxLength: 15
                range:
                  type: string
                  minLength: 2
                  maxLength: 3
                email:
                  type: string
                  format: email
                uuid:
                  type: string
                  format: uuid
                cuid:
                  type: string
                  format: cuid
                cuid2:
                  type: string
                  format: cuid2
                ulid:
                  type: string
                  format: ulid
                ip:
                  type: string
                  format: ip
                emoji:
                  type: string
                  format: emoji
                url:
                  type: string
                  format: url
                numeric:
                  type: string
                  pattern: \\d+
                combined:
                  type: string
                  minLength: 1
                  format: email
                  pattern: .*@example\\.com
                  maxLength: 90
              required:
                - regular
                - min
                - max
                - range
                - email
                - uuid
                - cuid
                - cuid2
                - ulid
                - ip
                - emoji
                - url
                - numeric
                - combined
        required: true
      responses:
        "200":
          description: POST /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                    properties:
                      nonempty:
                        type: string
                        minLength: 1
                    required:
                      - nonempty
                required:
                  - status
                  - data
        "400":
          description: POST /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Basic cases > should handle enum types 1`] = `
"openapi: 3.1.0
info:
  title: Testing enums
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      operationId: PostV1GetSomething
      requestBody:
        description: POST /v1/getSomething Request body
        content:
          application/json:
            schema:
              type: object
              properties:
                regularEnum:
                  enum:
                    - ABC
                    - DEF
                  type: string
              required:
                - regularEnum
        required: true
      responses:
        "200":
          description: POST /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                    properties:
                      nativeEnum:
                        enum:
                          - 1
                          - 2
                        type: number
                    required:
                      - nativeEnum
                required:
                  - status
                  - data
        "400":
          description: POST /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Basic cases > should handle record 1`] = `
"openapi: 3.1.0
info:
  title: Testing record
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      operationId: PostV1GetSomething
      requestBody:
        description: POST /v1/getSomething Request body
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: POST /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                    properties:
                      simple:
                        type: object
                        propertyNames:
                          type: string
                        additionalProperties:
                          type: integer
                          format: int64
                          minimum: -9007199254740991
                          maximum: 9007199254740991
                      stringy:
                        type: object
                        propertyNames:
                          type: string
                          pattern: "[A-Z]+"
                        additionalProperties:
                          type: boolean
                      numeric:
                        type: object
                        propertyNames:
                          type: integer
                          format: int64
                          minimum: -9007199254740991
                          maximum: 9007199254740991
                        additionalProperties:
                          type: boolean
                      literal:
                        type: object
                        properties:
                          only:
                            type: boolean
                        required:
                          - only
                      union:
                        type: object
                        properties:
                          option1:
                            type: boolean
                          option2:
                            type: boolean
                        required:
                          - option1
                          - option2
                      enum:
                        type: object
                        properties:
                          option1:
                            type: boolean
                          option2:
                            type: boolean
                        required:
                          - option1
                          - option2
                    required:
                      - simple
                      - stringy
                      - numeric
                      - literal
                      - union
                      - enum
                required:
                  - status
                  - data
        "400":
          description: POST /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Basic cases > should handle transformation schema in output 1`] = `
"openapi: 3.1.0
info:
  title: Testing Transformation in response schema
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      operationId: PostV1GetSomething
      requestBody:
        description: POST /v1/getSomething Request body
        content:
          application/json:
            schema:
              type: object
              properties:
                one:
                  type: string
                two:
                  type: integer
                  format: int64
                  exclusiveMinimum: 0
                  maximum: 9007199254740991
              required:
                - one
                - two
        required: true
      responses:
        "200":
          description: POST /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                    properties:
                      transform:
                        type: number
                    required:
                      - transform
                required:
                  - status
                  - data
        "400":
          description: POST /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Basic cases > should handle tuples 1`] = `
"openapi: 3.1.0
info:
  title: Testing tuples
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      operationId: PostV1GetSomething
      requestBody:
        description: POST /v1/getSomething Request body
        content:
          application/json:
            schema:
              type: object
              properties:
                ofOne:
                  type: array
                  prefixItems:
                    - type: boolean
                  items:
                    not: {}
                ofStrings:
                  type: array
                  prefixItems:
                    - type: string
                    - type:
                        - string
                        - "null"
                  items:
                    not: {}
                complex:
                  type: array
                  prefixItems:
                    - type: boolean
                    - type: string
                    - type: integer
                      format: int64
                      exclusiveMinimum: 0
                      maximum: 9007199254740991
                  items:
                    not: {}
              required:
                - ofOne
                - ofStrings
                - complex
        required: true
      responses:
        "200":
          description: POST /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                    properties:
                      empty:
                        type: array
                        prefixItems: []
                        items:
                          not: {}
                    required:
                      - empty
                required:
                  - status
                  - data
        "400":
          description: POST /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Basic cases > should handle type any 1`] = `
"openapi: 3.1.0
info:
  title: Testing type any
  version: 3.4.5
paths:
  /v1/getSomething:
    get:
      operationId: GetV1GetSomething
      parameters:
        - name: any
          in: query
          required: false
          description: GET /v1/getSomething Parameter
          schema:
            format: any
      responses:
        "200":
          description: GET /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                    properties:
                      any:
                        format: any
                required:
                  - status
                  - data
        "400":
          description: GET /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Basic cases > should handle z.preprocess() 1`] = `
"openapi: 3.1.0
info:
  title: Testing z.preprocess()
  version: 3.4.5
paths:
  /v1/getSomething:
    get:
      operationId: GetV1GetSomething
      parameters:
        - name: string
          in: query
          required: false
          description: GET /v1/getSomething Parameter
          schema:
            format: string (preprocessed)
        - name: number
          in: query
          required: true
          description: GET /v1/getSomething Parameter
          schema:
            format: int64 (preprocessed)
            minimum: 0
            maximum: 9007199254740991
      responses:
        "200":
          description: GET /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                    properties:
                      boolean:
                        type:
                          - boolean
                          - "null"
                required:
                  - status
                  - data
        "400":
          description: GET /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Feature #1431: Multiple schemas for different status codes > should depict accordingly 1`] = `
"openapi: 3.1.0
info:
  title: Testing multiple schemas for different status codes
  version: 3.4.5
paths:
  /v1/mtpl:
    post:
      operationId: PostV1Mtpl
      requestBody:
        description: POST /v1/mtpl Request body
        content:
          application/json:
            schema:
              type: object
              properties:
                test:
                  type: number
                  format: double
                  minimum: -1.7976931348623157e+308
                  maximum: 1.7976931348623157e+308
              required:
                - test
        required: true
      responses:
        "200":
          description: POST /v1/mtpl Positive response 200
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: ok
                  data:
                    type: object
                    properties:
                      payload:
                        type: string
                    required:
                      - payload
                required:
                  - status
                  - data
        "201":
          description: POST /v1/mtpl Positive response 201
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: kinda
                  data:
                    type: object
                    properties:
                      payload:
                        type: string
                    required:
                      - payload
                required:
                  - status
                  - data
        "400":
          description: POST /v1/mtpl Negative response 400
          content:
            application/json:
              schema:
                type: string
                const: error
        "500":
          description: POST /v1/mtpl Negative response 500
          content:
            application/json:
              schema:
                type: string
                const: failure
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Feature #1470: Custom brands > should be handled accordingly in request, response and params 1`] = `
"openapi: 3.1.0
info:
  title: Testing custom brands handling
  version: 3.4.5
paths:
  /v1/{name}:
    get:
      operationId: GetV1Name
      parameters:
        - name: name
          in: path
          required: true
          description: GET /v1/:name Parameter
          schema:
            summary: My custom schema
        - name: other
          in: query
          required: true
          description: GET /v1/:name Parameter
          schema:
            summary: My custom schema
        - name: regular
          in: query
          required: true
          description: GET /v1/:name Parameter
          schema:
            type: boolean
      responses:
        "200":
          description: GET /v1/:name Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                    properties:
                      number:
                        summary: My custom schema
                    required:
                      - number
                required:
                  - status
                  - data
        "400":
          description: GET /v1/:name Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Feature #1869: Top level transformations > should handle explicit renaming 1`] = `
"openapi: 3.1.0
info:
  title: Testing top level transformations
  version: 3.4.5
paths:
  /v1/test:
    get:
      operationId: GetV1Test
      parameters:
        - name: user_id
          in: query
          required: true
          description: GET /v1/test Parameter
          schema:
            type: string
        - name: at
          in: query
          required: true
          description: YYYY-MM-DDTHH:mm:ss.sssZ
          schema:
            description: YYYY-MM-DDTHH:mm:ss.sssZ
            type: string
            format: date-time
            pattern: ^\\d{4}-\\d{2}-\\d{2}(T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?)?Z?$
            externalDocs:
              url: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString
      responses:
        "200":
          description: GET /v1/test Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                    properties:
                      user_name:
                        type: string
                    required:
                      - user_name
                required:
                  - status
                  - data
        "400":
          description: GET /v1/test Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Feature #1869: Top level transformations > should handle object-to-object functional transformations and mapping 1`] = `
"openapi: 3.1.0
info:
  title: Testing top level transformations
  version: 3.4.5
paths:
  /v1/test:
    get:
      operationId: GetV1Test
      parameters:
        - name: user_id
          in: query
          required: true
          description: GET /v1/test Parameter
          schema:
            type: string
      responses:
        "200":
          description: GET /v1/test Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                    properties:
                      user_name:
                        type: string
                    required:
                      - user_name
                required:
                  - status
                  - data
        "400":
          description: GET /v1/test Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Feature 1180: Headers opt-in params > should describe x- inputs as header params in get request 1`] = `
"openapi: 3.1.0
info:
  title: Testing headers params
  version: 3.4.5
paths:
  /v1/test:
    get:
      operationId: GetV1Test
      parameters:
        - name: id
          in: query
          required: true
          description: GET /v1/test Parameter
          schema:
            type: string
        - name: x-request-id
          in: header
          required: true
          description: GET /v1/test Parameter
          schema:
            type: string
      responses:
        "200":
          description: GET /v1/test Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                required:
                  - status
                  - data
        "400":
          description: GET /v1/test Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Feature 1180: Headers opt-in params > should describe x- inputs as header params in post request 1`] = `
"openapi: 3.1.0
info:
  title: Testing headers params
  version: 3.4.5
paths:
  /v1/test:
    post:
      operationId: PostV1Test
      parameters:
        - name: id
          in: query
          required: true
          description: POST /v1/test Parameter
          schema:
            type: string
        - name: x-request-id
          in: header
          required: true
          description: POST /v1/test Parameter
          schema:
            type: string
      requestBody:
        description: POST /v1/test Request body
        content:
          application/json:
            schema:
              type: object
              properties: {}
              required: []
      responses:
        "200":
          description: POST /v1/test Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                required:
                  - status
                  - data
        "400":
          description: POST /v1/test Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Feature 1180: Headers opt-in params > should describe x- inputs as header params in put request 1`] = `
"openapi: 3.1.0
info:
  title: Testing headers params
  version: 3.4.5
paths:
  /v1/test:
    put:
      operationId: PutV1Test
      parameters:
        - name: x-request-id
          in: header
          required: true
          description: PUT /v1/test Parameter
          schema:
            type: string
      requestBody:
        description: PUT /v1/test Request body
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
              required:
                - id
        required: true
      responses:
        "200":
          description: PUT /v1/test Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                required:
                  - status
                  - data
        "400":
          description: PUT /v1/test Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Issue #98 > Should describe non-empty array 1`] = `
"openapi: 3.1.0
info:
  title: "Testing issue #98"
  version: 3.4.5
paths:
  /v1/getSomething:
    get:
      operationId: GetV1GetSomething
      parameters:
        - name: arr
          in: query
          required: true
          description: GET /v1/getSomething Parameter
          schema:
            type: array
            items:
              type: string
            minItems: 1
      responses:
        "200":
          description: GET /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                    properties:
                      arr:
                        type: array
                        items:
                          type: string
                        minItems: 1
                    required:
                      - arr
                required:
                  - status
                  - data
        "400":
          description: GET /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
    post:
      operationId: PostV1GetSomething
      requestBody:
        description: POST /v1/getSomething Request body
        content:
          application/json:
            schema:
              type: object
              properties:
                arr:
                  type: array
                  items:
                    type: string
                  minItems: 1
              required:
                - arr
        required: true
      responses:
        "200":
          description: POST /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                    properties:
                      arr:
                        type: array
                        items:
                          type: string
                        minItems: 1
                    required:
                      - arr
                required:
                  - status
                  - data
        "400":
          description: POST /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Issue #98 > should union schemas 1`] = `
"openapi: 3.1.0
info:
  title: "Testing issue #98"
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      operationId: PostV1GetSomething
      requestBody:
        description: POST /v1/getSomething Request body
        content:
          application/json:
            schema:
              oneOf:
                - type: object
                  properties:
                    id:
                      type: string
                    field1:
                      type: string
                  required:
                    - id
                    - field1
                - type: object
                  properties:
                    id:
                      type: string
                    field2:
                      type: string
                  required:
                    - id
                    - field2
        required: true
      responses:
        "200":
          description: POST /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    oneOf:
                      - type: object
                        properties:
                          id:
                            type: string
                          field1:
                            type: string
                        required:
                          - id
                          - field1
                      - type: object
                        properties:
                          id:
                            type: string
                          field2:
                            type: string
                        required:
                          - id
                          - field2
                required:
                  - status
                  - data
        "400":
          description: POST /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Metadata > Feature #2390: should support deprecations 1`] = `
"openapi: 3.1.0
info:
  title: Testing Metadata:deprecations
  version: 3.4.5
paths:
  /v1/getSomething:
    get:
      operationId: GetV1GetSomething
      deprecated: true
      parameters:
        - name: str
          in: query
          deprecated: true
          required: true
          description: GET /v1/getSomething Parameter
          schema:
            type: string
            deprecated: true
      responses:
        "200":
          description: GET /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                required:
                  - status
                  - data
        "400":
          description: GET /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Metadata > Issue #827: .example() should be immutable 1`] = `
"openapi: 3.1.0
info:
  title: Testing Metadata:example on IO parameter
  version: 3.4.5
paths:
  /v1/addSomething:
    post:
      operationId: PostV1AddSomething
      requestBody:
        description: POST /v1/addSomething Request body
        content:
          application/json:
            schema:
              type: object
              properties:
                a:
                  type: string
              required:
                - a
            examples:
              example1:
                value:
                  a: first
        required: true
      responses:
        "200":
          description: POST /v1/addSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                    properties:
                      a:
                        type: string
                      b:
                        type: string
                    required:
                      - a
                      - b
                    examples:
                      - a: first
                        b: prefix_first
                      - a: second
                        b: prefix_second
                required:
                  - status
                  - data
              examples:
                example1:
                  value:
                    status: success
                    data:
                      a: first
                      b: prefix_first
                example2:
                  value:
                    status: success
                    data:
                      a: second
                      b: prefix_second
        "400":
          description: POST /v1/addSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Metadata > Issue #929: the location of the custom description should be on the param level 1`] = `
"openapi: 3.1.0
info:
  title: Testing Metadata:description
  version: 3.4.5
paths:
  /hris/employees:
    get:
      operationId: GetHrisEmployees
      parameters:
        - name: cursor
          in: query
          required: false
          description: An optional cursor string used for pagination. This can be
            retrieved from the \`next\` property of the previous page response.
          schema:
            $ref: "#/components/schemas/GetHrisEmployeesParameterCursor"
      responses:
        "200":
          description: GET /hris/employees Positive response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetHrisEmployeesPositiveResponse"
        "400":
          description: GET /hris/employees Negative response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GetHrisEmployeesNegativeResponse"
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
components:
  schemas:
    GetHrisEmployeesParameterCursor:
      type: string
      description: An optional cursor string used for pagination. This can be
        retrieved from the \`next\` property of the previous page response.
    GetHrisEmployeesPositiveResponse:
      type: object
      properties:
        status:
          type: string
          const: success
        data:
          type: object
      required:
        - status
        - data
    GetHrisEmployeesNegativeResponse:
      type: object
      properties:
        status:
          type: string
          const: error
        error:
          type: object
          properties:
            message:
              type: string
          required:
            - message
      required:
        - status
        - error
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Metadata > should merge endpoint handler examples with its middleware examples 1`] = `
"openapi: 3.1.0
info:
  title: Testing Metadata:example on IO schema + middleware
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      operationId: PostV1GetSomething
      requestBody:
        description: POST /v1/getSomething Request body
        content:
          application/json:
            schema:
              type: object
              properties:
                key:
                  type: string
                str:
                  type: string
              required:
                - key
                - str
        required: true
      responses:
        "200":
          description: POST /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                    properties:
                      num:
                        type: number
                        format: double
                        minimum: -1.7976931348623157e+308
                        maximum: 1.7976931348623157e+308
                    required:
                      - num
                    examples:
                      - num: 123
                required:
                  - status
                  - data
              examples:
                example1:
                  value:
                    status: success
                    data:
                      num: 123
        "400":
          description: POST /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Metadata > should pass over examples of each param from the whole IO schema examples (GET) 1`] = `
"openapi: 3.1.0
info:
  title: Testing Metadata:example on IO schema
  version: 3.4.5
paths:
  /v1/getSomething:
    get:
      operationId: GetV1GetSomething
      parameters:
        - name: strNum
          in: query
          required: true
          description: GET /v1/getSomething Parameter
          schema:
            type: string
          examples:
            example1:
              value: "123"
      responses:
        "200":
          description: GET /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                    properties:
                      numericStr:
                        type: string
                    required:
                      - numericStr
                    examples:
                      - numericStr: "123"
                required:
                  - status
                  - data
              examples:
                example1:
                  value:
                    status: success
                    data:
                      numericStr: "123"
        "400":
          description: GET /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Metadata > should pass over examples of the whole IO schema (POST) 1`] = `
"openapi: 3.1.0
info:
  title: Testing Metadata:example on IO schema
  version: 3.4.5
paths:
  /v1/getSomething:
    post:
      operationId: PostV1GetSomething
      requestBody:
        description: POST /v1/getSomething Request body
        content:
          application/json:
            schema:
              type: object
              properties:
                strNum:
                  type: string
              required:
                - strNum
            examples:
              example1:
                value:
                  strNum: "123"
        required: true
      responses:
        "200":
          description: POST /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                    properties:
                      numericStr:
                        type: string
                    required:
                      - numericStr
                    examples:
                      - numericStr: "123"
                required:
                  - status
                  - data
              examples:
                example1:
                  value:
                    status: success
                    data:
                      numericStr: "123"
        "400":
          description: POST /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Metadata > should pass over the example of an individual parameter 1`] = `
"openapi: 3.1.0
info:
  title: Testing Metadata:example on IO parameter
  version: 3.4.5
paths:
  /v1/getSomething:
    get:
      operationId: GetV1GetSomething
      parameters:
        - name: strNum
          in: query
          required: true
          description: GET /v1/getSomething Parameter
          schema:
            type: string
            examples:
              - "123"
          examples:
            example1:
              value: "123"
      responses:
        "200":
          description: GET /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                    properties:
                      numericStr:
                        type: string
                        examples:
                          - "123"
                    required:
                      - numericStr
                required:
                  - status
                  - data
              examples:
                example1:
                  value:
                    status: success
                    data:
                      numericStr: "123"
        "400":
          description: GET /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Metadata > should pass over the schema description 1`] = `
"openapi: 3.1.0
info:
  title: Testing Metadata:description
  version: 3.4.5
paths:
  /v1/getSomething:
    get:
      operationId: GetV1GetSomething
      parameters:
        - name: str
          in: query
          required: true
          description: here is the test
          schema:
            type: string
            description: here is the test
      responses:
        "200":
          description: GET /v1/getSomething Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                    properties:
                      result:
                        type: integer
                        format: int64
                        exclusiveMinimum: 0
                        maximum: 9007199254740991
                        description: some positive integer
                    required:
                      - result
                required:
                  - status
                  - data
        "400":
          description: GET /v1/getSomething Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Route Path Params > should handle custom descriptions and descriptors 0 1`] = `
"openapi: 3.1.0
info:
  title: Testing route path params
  version: 3.4.5
paths:
  /v1/{name}:
    post:
      operationId: PostV1Name
      parameters:
        - name: name
          in: path
          required: true
          description: parameter of post /v1/:name
          schema:
            oneOf:
              - type: string
                const: John
              - type: string
                const: Jane
      requestBody:
        description: the body of request
        content:
          application/json:
            schema:
              type: object
              properties:
                other:
                  type: boolean
              required:
                - other
        required: true
      responses:
        "200":
          description: Super positive response of /v1/:name
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                required:
                  - status
                  - data
        "400":
          description: very negative response of PostV1Name
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Route Path Params > should handle custom descriptions and descriptors 1 1`] = `
"openapi: 3.1.0
info:
  title: Testing route path params
  version: 3.4.5
paths:
  /v1/{name}:
    post:
      operationId: PostV1Name
      parameters:
        - name: name
          in: path
          required: true
          description: parameter of post /v1/:name
          schema:
            $ref: "#/components/schemas/ParameterOfPostV1NameName"
      requestBody:
        description: the body of request
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TheBodyOfRequest"
        required: true
      responses:
        "200":
          description: Super positive response of /v1/:name
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuperPositiveResponseOfV1Name"
        "400":
          description: very negative response of PostV1Name
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VeryNegativeResponseOfPostV1Name"
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
components:
  schemas:
    ParameterOfPostV1NameName:
      oneOf:
        - type: string
          const: John
        - type: string
          const: Jane
    SuperPositiveResponseOfV1Name:
      type: object
      properties:
        status:
          type: string
          const: success
        data:
          type: object
      required:
        - status
        - data
    VeryNegativeResponseOfPostV1Name:
      type: object
      properties:
        status:
          type: string
          const: error
        error:
          type: object
          properties:
            message:
              type: string
          required:
            - message
      required:
        - status
        - error
    TheBodyOfRequest:
      type: object
      properties:
        other:
          type: boolean
      required:
        - other
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Route Path Params > should handle route path params for GET request 1`] = `
"openapi: 3.1.0
info:
  title: Testing route path params
  version: 3.4.5
paths:
  /v1/{name}:
    get:
      operationId: GetV1Name
      parameters:
        - name: name
          in: path
          required: true
          description: GET /v1/:name Parameter
          schema:
            oneOf:
              - type: string
                const: John
              - type: string
                const: Jane
        - name: other
          in: query
          required: true
          description: GET /v1/:name Parameter
          schema:
            type: boolean
      responses:
        "200":
          description: GET /v1/:name Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                required:
                  - status
                  - data
        "400":
          description: GET /v1/:name Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;

exports[`Documentation > Route Path Params > should handle route path params for POST request 1`] = `
"openapi: 3.1.0
info:
  title: Testing route path params
  version: 3.4.5
paths:
  /v1/{name}:
    post:
      operationId: PostV1Name
      parameters:
        - name: name
          in: path
          required: true
          description: POST /v1/:name Parameter
          schema:
            oneOf:
              - type: string
                const: John
              - type: string
                const: Jane
      requestBody:
        description: POST /v1/:name Request body
        content:
          application/json:
            schema:
              type: object
              properties:
                other:
                  type: boolean
              required:
                - other
        required: true
      responses:
        "200":
          description: POST /v1/:name Positive response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: success
                  data:
                    type: object
                required:
                  - status
                  - data
        "400":
          description: POST /v1/:name Negative response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    const: error
                  error:
                    type: object
                    properties:
                      message:
                        type: string
                    required:
                      - message
                required:
                  - status
                  - error
              examples:
                example1:
                  value:
                    status: error
                    error:
                      message: Sample error message
components:
  schemas: {}
  responses: {}
  parameters: {}
  examples: {}
  requestBodies: {}
  headers: {}
  securitySchemes: {}
  links: {}
  callbacks: {}
tags: []
servers:
  - url: https://example.com
"
`;
