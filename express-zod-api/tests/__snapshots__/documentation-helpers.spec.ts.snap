// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Documentation helpers > depictBigInt() > should set type:string and format:bigint 1`] = `
{
  "format": "bigint",
  "pattern": "^-?\\d+$",
  "type": "string",
}
`;

exports[`Documentation helpers > depictBuffer() > should set hint with external docs 1`] = `
{
  "externalDocs": {
    "description": "raw binary data",
    "url": "https://swagger.io/specification/#working-with-binary-data",
  },
}
`;

exports[`Documentation helpers > depictDateIn > should set type:string, pattern and format 0 1`] = `
{
  "description": "YYYY-MM-DDTHH:mm:ss.sssZ",
  "externalDocs": {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString",
  },
  "format": "date-time",
  "pattern": "^\\d{4}-\\d{2}-\\d{2}(T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?)?Z?$",
  "type": "string",
}
`;

exports[`Documentation helpers > depictDateIn > should set type:string, pattern and format 1 1`] = `
{
  "description": "YYYY-MM-DDTHH:mm:ss.sssZ",
  "externalDocs": {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString",
  },
  "format": "date-time",
  "pattern": "^\\d{4}-\\d{2}-\\d{2}(T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?)?Z?$",
  "type": "string",
}
`;

exports[`Documentation helpers > depictDateIn > should set type:string, pattern and format 2 1`] = `
{
  "description": "YYYY-MM-DDTHH:mm:ss.sssZ",
  "examples": [
    "2024-01-01",
  ],
  "externalDocs": {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString",
  },
  "format": "date-time",
  "pattern": "^\\d{4}-\\d{2}-\\d{2}(T\\d{2}:\\d{2}:\\d{2}(\\.\\d+)?)?Z?$",
  "type": "string",
}
`;

exports[`Documentation helpers > depictDateIn > should throw when ZodDateIn in response 1`] = `
DocumentationError({
  "cause": "Response schema of an Endpoint assigned to GET method of /v1/user/:id path.",
  "message": "Please use ez.dateOut() for output.",
})
`;

exports[`Documentation helpers > depictDateOut > should set type:string, description and format 0 1`] = `
{
  "description": "YYYY-MM-DDTHH:mm:ss.sssZ",
  "externalDocs": {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString",
  },
  "format": "date-time",
  "type": "string",
}
`;

exports[`Documentation helpers > depictDateOut > should set type:string, description and format 1 1`] = `
{
  "description": "YYYY-MM-DDTHH:mm:ss.sssZ",
  "externalDocs": {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString",
  },
  "format": "date-time",
  "type": "string",
}
`;

exports[`Documentation helpers > depictDateOut > should set type:string, description and format 2 1`] = `
{
  "description": "YYYY-MM-DDTHH:mm:ss.sssZ",
  "examples": [
    "2024-01-01",
  ],
  "externalDocs": {
    "url": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString",
  },
  "format": "date-time",
  "type": "string",
}
`;

exports[`Documentation helpers > depictDateOut > should throw when ZodDateOut in request 1`] = `
DocumentationError({
  "cause": "Input schema of an Endpoint assigned to GET method of /v1/user/:id path.",
  "message": "Please use ez.dateIn() for input.",
})
`;

exports[`Documentation helpers > depictEnum() > should set type 1`] = `
{
  "enum": [
    "test",
    "jest",
  ],
  "type": "string",
}
`;

exports[`Documentation helpers > depictIntersection() > should NOT flatten object schemas having conflicting props 1`] = `
{
  "allOf": [
    {
      "properties": {
        "one": {
          "type": "number",
        },
      },
      "type": "object",
    },
    {
      "properties": {
        "one": {
          "type": "string",
        },
      },
      "type": "object",
    },
  ],
}
`;

exports[`Documentation helpers > depictIntersection() > should flatten objects with same prop of same type 1`] = `
{
  "properties": {
    "one": {
      "type": "number",
    },
  },
  "type": "object",
}
`;

exports[`Documentation helpers > depictIntersection() > should flatten two object schemas 1`] = `
{
  "description": "some",
  "properties": {
    "one": {
      "type": "number",
    },
    "two": {
      "type": "number",
    },
  },
  "type": "object",
}
`;

exports[`Documentation helpers > depictIntersection() > should maintain uniqueness in the array of required props 1`] = `
{
  "properties": {
    "test": {
      "const": 5,
      "type": "number",
    },
  },
  "required": [
    "test",
  ],
  "type": "object",
}
`;

exports[`Documentation helpers > depictIntersection() > should merge examples deeply 1`] = `
{
  "examples": [
    {
      "a": 123,
      "b": 456,
    },
  ],
  "properties": {
    "a": {
      "type": "number",
    },
    "b": {
      "type": "number",
    },
  },
  "type": "object",
}
`;

exports[`Documentation helpers > depictLiteral() > should set type from either const or enum prop 0 1`] = `
{
  "const": "test",
  "type": "string",
}
`;

exports[`Documentation helpers > depictLiteral() > should set type from either const or enum prop 1 1`] = `
{
  "enum": [
    "test",
    "jest",
  ],
  "type": "string",
}
`;

exports[`Documentation helpers > depictNullable() > should add null type to the first of anyOf 0 1`] = `
{
  "type": [
    "string",
    "null",
  ],
}
`;

exports[`Documentation helpers > depictNullable() > should add null type to the first of anyOf 1 1`] = `
{
  "type": [
    "string",
    "null",
  ],
}
`;

exports[`Documentation helpers > depictNullable() > should not add null type when it's already there 0 1`] = `
{
  "type": "null",
}
`;

exports[`Documentation helpers > depictNullable() > should not add null type when it's already there 1 1`] = `
{
  "type": "null",
}
`;

exports[`Documentation helpers > depictNullable() > should not add null type when it's already there 2 1`] = `
{
  "type": [
    "string",
    "null",
  ],
}
`;

exports[`Documentation helpers > depictPipeline > should depict as 'number (out)' 1`] = `
{
  "type": "number",
}
`;

exports[`Documentation helpers > depictPipeline > should depict as 'string (preprocess)' 1`] = `
{
  "format": "string (preprocessed)",
}
`;

exports[`Documentation helpers > depictRaw() > should extract the raw property 1`] = `
{
  "format": "binary",
  "type": "string",
}
`;

exports[`Documentation helpers > depictRequest > should simply delegate it all to Zod 4 1`] = `
{
  "properties": {
    "id": {
      "type": "string",
    },
    "test": {
      "type": "boolean",
    },
  },
  "required": [
    "id",
    "test",
  ],
  "type": "object",
}
`;

exports[`Documentation helpers > depictRequestParams() > Features 1180 and 2344: should depict header params when enabled 1`] = `
[
  {
    "deprecated": undefined,
    "description": "GET /v1/user/:id Parameter",
    "examples": undefined,
    "in": "header",
    "name": "x-request-id",
    "required": true,
    "schema": {
      "type": "string",
    },
  },
  {
    "deprecated": undefined,
    "description": "GET /v1/user/:id Parameter",
    "examples": undefined,
    "in": "path",
    "name": "id",
    "required": true,
    "schema": {
      "type": "string",
    },
  },
  {
    "deprecated": undefined,
    "description": "GET /v1/user/:id Parameter",
    "examples": undefined,
    "in": "query",
    "name": "test",
    "required": true,
    "schema": {
      "type": "boolean",
    },
  },
  {
    "deprecated": undefined,
    "description": "GET /v1/user/:id Parameter",
    "examples": undefined,
    "in": "header",
    "name": "secure",
    "required": true,
    "schema": {
      "type": "string",
    },
  },
]
`;

exports[`Documentation helpers > depictRequestParams() > should depict none if both query and params are disabled 1`] = `[]`;

exports[`Documentation helpers > depictRequestParams() > should depict only path params if query is disabled 1`] = `
[
  {
    "deprecated": undefined,
    "description": "GET /v1/user/:id Parameter",
    "examples": undefined,
    "in": "path",
    "name": "id",
    "required": true,
    "schema": {
      "type": "string",
    },
  },
]
`;

exports[`Documentation helpers > depictRequestParams() > should depict query and path params 1`] = `
[
  {
    "deprecated": undefined,
    "description": "GET /v1/user/:id Parameter",
    "examples": undefined,
    "in": "path",
    "name": "id",
    "required": true,
    "schema": {
      "type": "string",
    },
  },
  {
    "deprecated": undefined,
    "description": "GET /v1/user/:id Parameter",
    "examples": undefined,
    "in": "query",
    "name": "test",
    "required": true,
    "schema": {
      "type": "boolean",
    },
  },
]
`;

exports[`Documentation helpers > depictSecurity() > should add scopes when missing 1`] = `
[
  [
    {
      "flows": {
        "password": {
          "scopes": {},
          "tokenUrl": "https://test.url",
        },
      },
      "type": "oauth2",
    },
  ],
]
`;

exports[`Documentation helpers > depictSecurity() > should depict OAuth2 Security with flows 1`] = `
[
  [
    {
      "flows": {
        "authorizationCode": {
          "authorizationUrl": "https://test.url",
          "refreshUrl": "https://test2.url",
          "scopes": {
            "read": "read something",
            "write": "write something",
          },
          "tokenUrl": "https://test3.url",
        },
        "clientCredentials": {
          "refreshUrl": "https://test2.url",
          "scopes": {
            "read": "read something",
            "write": "write something",
          },
          "tokenUrl": "https://test3.url",
        },
        "implicit": {
          "authorizationUrl": "https://test.url",
          "refreshUrl": "https://test2.url",
          "scopes": {
            "read": "read something",
            "write": "write something",
          },
        },
        "password": {
          "refreshUrl": "https://test2.url",
          "scopes": {
            "read": "read something",
            "write": "write something",
          },
          "tokenUrl": "https://test3.url",
        },
      },
      "type": "oauth2",
    },
  ],
]
`;

exports[`Documentation helpers > depictSecurity() > should handle Basic, Bearer and Header Securities 1`] = `
[
  [
    {
      "scheme": "basic",
      "type": "http",
    },
    {
      "scheme": "bearer",
      "type": "http",
    },
  ],
  [
    {
      "in": "header",
      "name": "X-Key",
      "type": "apiKey",
    },
  ],
]
`;

exports[`Documentation helpers > depictSecurity() > should handle Input and Cookie Securities 1`] = `
[
  [
    {
      "in": "query",
      "name": "apiKey",
      "type": "apiKey",
    },
  ],
  [
    {
      "in": "cookie",
      "name": "hash",
      "type": "apiKey",
    },
  ],
]
`;

exports[`Documentation helpers > depictSecurity() > should handle OpenID and OAuth2 Securities 1`] = `
[
  [
    {
      "openIdConnectUrl": "https://test.url",
      "type": "openIdConnect",
    },
  ],
  [
    {
      "flows": {},
      "type": "oauth2",
    },
  ],
]
`;

exports[`Documentation helpers > depictSecurity() > should handle undefined flows 1`] = `
[
  [
    {
      "flows": {},
      "type": "oauth2",
    },
  ],
]
`;

exports[`Documentation helpers > depictSecurity() > should inform on 'actual' placement of the input security parameter 1`] = `
[
  [
    {
      "description": "key MUST be supplied within the request body instead of query",
      "in": "query",
      "name": "key",
      "type": "apiKey",
      "x-in-actual": "body",
    },
  ],
]
`;

exports[`Documentation helpers > depictSecurity() > should inform on 'alternative' placement of the input security parameter 1`] = `
[
  [
    {
      "description": "key CAN also be supplied within the request body",
      "in": "query",
      "name": "key",
      "type": "apiKey",
      "x-in-alternative": "body",
    },
  ],
]
`;

exports[`Documentation helpers > depictSecurityRefs() > should handle alternatives 1`] = `
[
  {
    "apiKey": [],
    "oauth2": [],
    "openIdConnect": [],
  },
]
`;

exports[`Documentation helpers > depictSecurityRefs() > should handle alternatives 2`] = `
[
  {
    "apiKey": [],
    "oauth2": [],
  },
  {
    "apiKey": [],
    "openIdConnect": [],
  },
]
`;

exports[`Documentation helpers > depictSecurityRefs() > should handle alternatives 3`] = `
[
  {
    "apiKey": [],
  },
  {
    "oauth2": [],
  },
  {
    "openIdConnect": [],
  },
]
`;

exports[`Documentation helpers > depictSecurityRefs() > should populate the scopes 1`] = `
[
  {
    "apiKey": [],
  },
  {
    "oauth2": [
      "read",
      "write",
    ],
  },
  {
    "openIdConnect": [
      "read",
      "write",
    ],
  },
]
`;

exports[`Documentation helpers > depictTags() > should accept objects with URLs 1`] = `
[
  {
    "description": "Everything about users",
    "name": "users",
  },
  {
    "description": "Everything about files processing",
    "externalDocs": {
      "url": "https://example.com",
    },
    "name": "files",
  },
]
`;

exports[`Documentation helpers > depictTags() > should accept plain descriptions 1`] = `
[
  {
    "description": "Everything about users",
    "name": "users",
  },
  {
    "description": "Everything about files processing",
    "name": "files",
  },
]
`;

exports[`Documentation helpers > depictTuple() > should add items:not:{} when no rest 0 1`] = `
{
  "items": {
    "not": {},
  },
}
`;

exports[`Documentation helpers > depictTuple() > should add items:not:{} when no rest 1 1`] = `
{
  "items": {
    "not": {},
  },
}
`;

exports[`Documentation helpers > depictUnion() > should set discriminator prop for such union 1`] = `
{
  "discriminator": {
    "propertyName": "status",
  },
}
`;

exports[`Documentation helpers > depictUpload() > should set format:binary and type:string 1`] = `
{
  "format": "binary",
  "type": "string",
}
`;

exports[`Documentation helpers > depictUpload() > should throw when using in response 1`] = `
DocumentationError({
  "cause": "Response schema of an Endpoint assigned to GET method of /v1/user/:id path.",
  "message": "Please use ez.upload() only for input.",
})
`;

exports[`Documentation helpers > excludeParamsFromDepiction() > should handle the ReferenceObject 1`] = `
{
  "$ref": "test",
}
`;

exports[`Documentation helpers > excludeParamsFromDepiction() > should omit specified params 0 1`] = `
{
  "properties": {
    "b": {
      "type": "string",
    },
  },
  "required": [
    "b",
  ],
  "type": "object",
}
`;

exports[`Documentation helpers > excludeParamsFromDepiction() > should omit specified params 0 2`] = `true`;

exports[`Documentation helpers > excludeParamsFromDepiction() > should omit specified params 1 1`] = `
{
  "anyOf": [
    {
      "properties": {},
      "required": [],
      "type": "object",
    },
    {
      "properties": {
        "b": {
          "type": "string",
        },
      },
      "required": [
        "b",
      ],
      "type": "object",
    },
  ],
}
`;

exports[`Documentation helpers > excludeParamsFromDepiction() > should omit specified params 1 2`] = `true`;

exports[`Documentation helpers > excludeParamsFromDepiction() > should omit specified params 2 1`] = `
{
  "properties": {
    "b": {
      "type": "string",
    },
  },
  "required": [
    "b",
  ],
  "type": "object",
}
`;

exports[`Documentation helpers > excludeParamsFromDepiction() > should omit specified params 2 2`] = `true`;

exports[`Documentation helpers > excludeParamsFromDepiction() > should omit specified params 3 1`] = `
{
  "allOf": [
    {
      "additionalProperties": {
        "type": "string",
      },
      "propertyNames": {
        "const": "a",
      },
      "type": "object",
    },
    {
      "additionalProperties": {
        "type": "string",
      },
      "propertyNames": {
        "type": "string",
      },
      "type": "object",
    },
  ],
}
`;

exports[`Documentation helpers > excludeParamsFromDepiction() > should omit specified params 3 2`] = `false`;
