// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`zod-to-ts > Example > should produce the expected results 1`] = `
"{
    string: string;
    number: number;
    arrayOfObjects: {
        string: string;
    }[];
    boolean: boolean;
    circular: SomeType;
    circular2: SomeType;
    union: {
        number: number;
    } | "hi";
    enum: "hi" | "bye";
    intersectionWithTransform: (number & bigint) & (number & string);
    date: any;
    undefined?: undefined;
    null: null;
    void: undefined;
    any: any;
    unknown: unknown;
    never: never;
    optionalString?: string | undefined;
    nullablePartialObject: {
        string?: string | undefined;
        number?: number | undefined;
        fixedArrayOfString?: string[] | undefined;
        object?: {
            string: string;
        } | undefined;
    } | null;
    tuple: [
        string,
        number,
        {
            string: string;
        }
    ];
    tupleRest: [
        string,
        number,
        ...boolean
    ];
    record: Record<string, {
        object: {
            arrayOfUnions: ([
                string,
                {
                    string: string;
                }
            ] | bigint)[];
        };
    }>;
    map: any;
    set: any;
    intersection: (string & number) | bigint;
    promise: any;
    optDefaultString?: string | undefined;
    refinedStringWithSomeBullshit: (string | number) & (bigint | null);
    lazy: SomeType;
    discUnion: {
        kind: "circle";
        radius: number;
    } | {
        kind: "square";
        x: number;
    } | {
        kind: "triangle";
        x: number;
        y: number;
    };
    branded: string;
    catch: number;
    pipeline: string;
    readonly: string;
}"
`;

exports[`zod-to-ts > Issue #2352: intersection of objects having same prop %# > should deduplicate the prop with a same name 1`] = `
"{
    query: string;
}"
`;

exports[`zod-to-ts > Issue #2352: intersection of objects having same prop %# > should deduplicate the prop with a same name 2`] = `
"{
    query: string;
}"
`;

exports[`zod-to-ts > Issue #2352: intersection of objects having same prop %# > should deduplicate the prop with a same name 3`] = `
"{
    query: string;
}"
`;

exports[`zod-to-ts > Issue #2352: intersection of objects having same prop %# > should deduplicate the prop with a same name 4`] = `
"{
    query: {};
}"
`;

exports[`zod-to-ts > Issue #2352: intersection of objects having same prop %# > should not flatten the result for objects with a conflicting prop 0 1`] = `
"{
    query: string;
} & {
    query: number;
}"
`;

exports[`zod-to-ts > Issue #2352: intersection of objects having same prop %# > should not flatten the result for objects with a conflicting prop 1 1`] = `
"{
    query: {
        sub: string;
    };
} & {
    query: {
        sub: number;
    };
}"
`;

exports[`zod-to-ts > Issue #2352: intersection of objects having same prop %# > should not flatten the result for objects with a conflicting prop 2 1`] = `
"{
    query: string;
} & {
    query?: string | undefined;
}"
`;

exports[`zod-to-ts > Issue #2352: intersection of objects having same prop %# > should not flatten the result for objects with a conflicting prop 3 1`] = `
"{
    query: string;
} & {
    query?: string | undefined;
}"
`;

exports[`zod-to-ts > PrimitiveSchema (isResponse=false) > outputs correct typescript 1`] = `
"{
    string: string;
    number: number;
    boolean: boolean;
    date: any;
    undefined?: undefined;
    null: null;
    void: undefined;
    any: any;
    unknown: unknown;
    never: never;
}"
`;

exports[`zod-to-ts > PrimitiveSchema (isResponse=true) > outputs correct typescript 1`] = `
"{
    string: string;
    number: number;
    boolean: boolean;
    date: unknown;
    undefined?: undefined;
    null: null;
    void: undefined;
    any: any;
    unknown: unknown;
    never: never;
}"
`;

exports[`zod-to-ts > enums > handles enum-like literals 0 1`] = `"0 | 1 | 2"`;

exports[`zod-to-ts > enums > handles enum-like literals 1 1`] = `""apple" | "banana" | "cantaloupe""`;

exports[`zod-to-ts > ez.buffer() > should be Buffer 1`] = `"Buffer"`;

exports[`zod-to-ts > ez.raw() > should depict the raw property 1`] = `"Buffer"`;

exports[`zod-to-ts > z.array() > outputs correct typescript 1`] = `
"{
    id: number;
    value: string;
}[]"
`;

exports[`zod-to-ts > z.discriminatedUnion() > outputs correct typescript 1`] = `
"{
    kind: "circle";
    radius: number;
} | {
    kind: "square";
    x: number;
} | {
    kind: "triangle";
    x: number;
    y: number;
}"
`;

exports[`zod-to-ts > z.literal() > Should produce the correct typescript 0 1`] = `""test""`;

exports[`zod-to-ts > z.literal() > Should produce the correct typescript 1 1`] = `"true"`;

exports[`zod-to-ts > z.literal() > Should produce the correct typescript 2 1`] = `"false"`;

exports[`zod-to-ts > z.literal() > Should produce the correct typescript 3 1`] = `"123"`;

exports[`zod-to-ts > z.literal() > Should produce the correct typescript 4 1`] = `"undefined"`;

exports[`zod-to-ts > z.nullable() > outputs correct typescript 1`] = `
"{
    username: string | null;
}"
`;

exports[`zod-to-ts > z.object() > does not unnecessary quote identifiers 1`] = `
"{
    id: string;
    name: string;
    countryOfOrigin: string;
}"
`;

exports[`zod-to-ts > z.object() > escapes correctly 1`] = `
"{
    "\\\\": string;
    "\\"": string;
    "'": string;
    "\`": string;
    "\\n": number;
    $e: any;
    "4t": any;
    _r: any;
    "-r"?: undefined;
}"
`;

exports[`zod-to-ts > z.object() > specially handles coercive schema in response 1`] = `
"{
    prop: string;
}"
`;

exports[`zod-to-ts > z.object() > supports string literal properties 1`] = `
"{
    "5": number;
    "string-literal": string;
}"
`;

exports[`zod-to-ts > z.object() > supports zod.deprecated() 1`] = `
"{
    /** @deprecated */
    one: string;
    /** @deprecated with description */
    two: string;
}"
`;

exports[`zod-to-ts > z.object() > supports zod.describe() 1`] = `
"{
    /** The name of the item */
    name: string;
    /** The price of the item */
    price: number;
}"
`;

exports[`zod-to-ts > z.optional() > Zod 4: should add question mark only to optional props 1`] = `
"{
    optional?: string | undefined;
    required: string;
    transform?: number | undefined;
    or?: (number | string) | undefined;
    tuple?: [
        string,
        number,
        {
            optional?: string | undefined;
            required: string;
        }
    ] | undefined;
}"
`;

exports[`zod-to-ts > z.pipe() > transformations > should handle an error within the transformation 1`] = `"unknown"`;

exports[`zod-to-ts > z.pipe() > transformations > should handle preprocess error in request 1`] = `"any"`;

exports[`zod-to-ts > z.pipe() > transformations > should handle unsupported transformation in response 1`] = `"unknown"`;

exports[`zod-to-ts > z.pipe() > transformations > should produce the schema type 'intact' 1`] = `"number"`;

exports[`zod-to-ts > z.pipe() > transformations > should produce the schema type 'transformed' 1`] = `"string"`;

exports[`zod-to-ts > z.templateLiteral() > should produce the correct typescript 0 1`] = `"\`start\${number}mid\${boolean}end\`"`;

exports[`zod-to-ts > z.templateLiteral() > should produce the correct typescript 1 1`] = `"\`\${number}one\${boolean}two\`"`;

exports[`zod-to-ts > z.templateLiteral() > should produce the correct typescript 2 1`] = `""one-two-three""`;

exports[`zod-to-ts > z.templateLiteral() > should produce the correct typescript 3 1`] = `"\`\${string}\${number}\${boolean}\`"`;

exports[`zod-to-ts > z.templateLiteral() > should produce the correct typescript 4 1`] = `"\`\${number}\`"`;

exports[`zod-to-ts > z.templateLiteral() > should produce the correct typescript 5 1`] = `""only""`;

exports[`zod-to-ts > z.templateLiteral() > should produce the correct typescript 6 1`] = `"\`\${number}more\`"`;

exports[`zod-to-ts > z.templateLiteral() > should produce the correct typescript 7 1`] = `"\`leading\${boolean}\`"`;

exports[`zod-to-ts > z.templateLiteral() > should produce the correct typescript 8 1`] = `""""`;

exports[`zod-to-ts > z.templateLiteral() > should produce the correct typescript 9 1`] = `""head""`;

exports[`zod-to-ts > z.templateLiteral() > should produce the correct typescript 10 1`] = `""head0""`;
