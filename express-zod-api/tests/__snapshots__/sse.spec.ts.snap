// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`SSE > makeEventSchema() > should make a valid schema of SSE event 1`] = `
{
  "properties": {
    "data": {
      "type": "string",
    },
    "event": {
      "const": "test",
    },
    "id": {
      "type": "string",
    },
    "retry": {
      "exclusiveMaximum": 9007199254740991,
      "type": "integer",
    },
  },
  "required": [
    "data",
    "event",
  ],
  "type": "object",
}
`;

exports[`SSE > makeResultHandler() > should create ResultHandler describing possible events and handling generic errors 0 1`] = `
[
  {
    "mimeTypes": [
      "text/event-stream",
    ],
    "schema": {
      "oneOf": [
        {
          "properties": {
            "data": {
              "type": "string",
            },
            "event": {
              "const": "test",
            },
            "id": {
              "type": "string",
            },
            "retry": {
              "exclusiveMaximum": 9007199254740991,
              "type": "integer",
            },
          },
          "required": [
            "data",
            "event",
          ],
          "type": "object",
        },
        {
          "properties": {
            "data": {
              "type": "number",
            },
            "event": {
              "const": "another",
            },
            "id": {
              "type": "string",
            },
            "retry": {
              "exclusiveMaximum": 9007199254740991,
              "type": "integer",
            },
          },
          "required": [
            "data",
            "event",
          ],
          "type": "object",
        },
      ],
    },
    "statusCodes": [
      200,
    ],
  },
]
`;

exports[`SSE > makeResultHandler() > should create ResultHandler describing possible events and handling generic errors 0 2`] = `
[
  {
    "mimeTypes": [
      "text/plain",
    ],
    "schema": {
      "type": "string",
    },
    "statusCodes": [
      400,
    ],
  },
]
`;

exports[`SSE > makeResultHandler() > should create ResultHandler describing possible events and handling generic errors 1 1`] = `
[
  {
    "mimeTypes": [
      "text/event-stream",
    ],
    "schema": {
      "properties": {
        "data": {
          "type": "string",
        },
        "event": {
          "const": "single",
        },
        "id": {
          "type": "string",
        },
        "retry": {
          "exclusiveMaximum": 9007199254740991,
          "type": "integer",
        },
      },
      "required": [
        "data",
        "event",
      ],
      "type": "object",
    },
    "statusCodes": [
      200,
    ],
  },
]
`;

exports[`SSE > makeResultHandler() > should create ResultHandler describing possible events and handling generic errors 1 2`] = `
[
  {
    "mimeTypes": [
      "text/plain",
    ],
    "schema": {
      "type": "string",
    },
    "statusCodes": [
      400,
    ],
  },
]
`;
