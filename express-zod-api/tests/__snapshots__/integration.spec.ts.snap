// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Integration > Feature #945: should have configurable treatment of optionals 0 1`] = `
"type SomeOf<T> = T[keyof T];

/** post /v1/test-with-dashes */
type PostV1TestWithDashesInput = {
  opt?: string;
};

/** post /v1/test-with-dashes */
type PostV1TestWithDashesPositiveVariant1 = {
  status: "success";
  data: {
    similar?: number;
  };
};

/** post /v1/test-with-dashes */
interface PostV1TestWithDashesPositiveResponseVariants {
  200: PostV1TestWithDashesPositiveVariant1;
}

/** post /v1/test-with-dashes */
type PostV1TestWithDashesNegativeVariant1 = {
  status: "error";
  error: {
    message: string;
  };
};

/** post /v1/test-with-dashes */
interface PostV1TestWithDashesNegativeResponseVariants {
  400: PostV1TestWithDashesNegativeVariant1;
}

export type Path = "/v1/test-with-dashes";

export type Method = "get" | "post" | "put" | "delete" | "patch";

export interface Input {
  "post /v1/test-with-dashes": PostV1TestWithDashesInput;
}

export interface PositiveResponse {
  "post /v1/test-with-dashes": SomeOf<PostV1TestWithDashesPositiveResponseVariants>;
}

export interface NegativeResponse {
  "post /v1/test-with-dashes": SomeOf<PostV1TestWithDashesNegativeResponseVariants>;
}

export interface EncodedResponse {
  "post /v1/test-with-dashes": PostV1TestWithDashesPositiveResponseVariants &
    PostV1TestWithDashesNegativeResponseVariants;
}

export interface Response {
  "post /v1/test-with-dashes":
    | PositiveResponse["post /v1/test-with-dashes"]
    | NegativeResponse["post /v1/test-with-dashes"];
}

export type Request = keyof Input;

export const endpointTags = { "post /v1/test-with-dashes": [] };

const parseRequest = (request: string) =>
  request.split(/ (.+)/, 2) as [Method, Path];

const substitute = (path: string, params: Record<string, any>) => {
  const rest = { ...params };
  for (const key in params) {
    path = path.replace(\`:\${key}\`, () => {
      delete rest[key];
      return params[key];
    });
  }
  return [path, rest] as const;
};

export type Implementation<T = unknown> = (
  method: Method,
  path: string,
  params: Record<string, any>,
  ctx?: T,
) => Promise<any>;

const defaultImplementation: Implementation = async (method, path, params) => {
  const hasBody = !["get", "delete"].includes(method);
  const searchParams = hasBody ? "" : \`?\${new URLSearchParams(params)}\`;
  const response = await fetch(
    new URL(\`\${path}\${searchParams}\`, "https://example.com"),
    {
      method: method.toUpperCase(),
      headers: hasBody ? { "Content-Type": "application/json" } : undefined,
      body: hasBody ? JSON.stringify(params) : undefined,
    },
  );
  const contentType = response.headers.get("content-type");
  if (!contentType) return;
  const isJSON = contentType.startsWith("application/json");
  return response[isJSON ? "json" : "text"]();
};

export class Client<T> {
  public constructor(
    protected readonly implementation: Implementation<T> = defaultImplementation,
  ) {}
  public provide<K extends Request>(
    request: K,
    params: Input[K],
    ctx?: T,
  ): Promise<Response[K]> {
    const [method, path] = parseRequest(request);
    return this.implementation(method, ...substitute(path, params), ctx);
  }
}

export class Subscription<
  K extends Extract<Request, \`get \${string}\`>,
  R extends Extract<PositiveResponse[K], { event: string }>,
> {
  public source: EventSource;
  public constructor(request: K, params: Input[K]) {
    const [path, rest] = substitute(parseRequest(request)[1], params);
    const searchParams = \`?\${new URLSearchParams(rest)}\`;
    this.source = new EventSource(
      new URL(\`\${path}\${searchParams}\`, "https://example.com"),
    );
  }
  public on<E extends R["event"]>(
    event: E,
    handler: (data: Extract<R, { event: E }>["data"]) => void | Promise<void>,
  ) {
    this.source.addEventListener(event, (msg) =>
      handler(JSON.parse((msg as MessageEvent).data)),
    );
    return this;
  }
}

// Usage example:
/*
const client = new Client();
client.provide("get /v1/user/retrieve", { id: "10" });
new Subscription("get /v1/events/stream", {}).on("time", (time) => {});
*/
"
`;

exports[`Integration > Feature #945: should have configurable treatment of optionals 1 1`] = `
"type SomeOf<T> = T[keyof T];

/** post /v1/test-with-dashes */
type PostV1TestWithDashesInput = {
  opt: string | undefined;
};

/** post /v1/test-with-dashes */
type PostV1TestWithDashesPositiveVariant1 = {
  status: "success";
  data: {
    similar: number | undefined;
  };
};

/** post /v1/test-with-dashes */
interface PostV1TestWithDashesPositiveResponseVariants {
  200: PostV1TestWithDashesPositiveVariant1;
}

/** post /v1/test-with-dashes */
type PostV1TestWithDashesNegativeVariant1 = {
  status: "error";
  error: {
    message: string;
  };
};

/** post /v1/test-with-dashes */
interface PostV1TestWithDashesNegativeResponseVariants {
  400: PostV1TestWithDashesNegativeVariant1;
}

export type Path = "/v1/test-with-dashes";

export type Method = "get" | "post" | "put" | "delete" | "patch";

export interface Input {
  "post /v1/test-with-dashes": PostV1TestWithDashesInput;
}

export interface PositiveResponse {
  "post /v1/test-with-dashes": SomeOf<PostV1TestWithDashesPositiveResponseVariants>;
}

export interface NegativeResponse {
  "post /v1/test-with-dashes": SomeOf<PostV1TestWithDashesNegativeResponseVariants>;
}

export interface EncodedResponse {
  "post /v1/test-with-dashes": PostV1TestWithDashesPositiveResponseVariants &
    PostV1TestWithDashesNegativeResponseVariants;
}

export interface Response {
  "post /v1/test-with-dashes":
    | PositiveResponse["post /v1/test-with-dashes"]
    | NegativeResponse["post /v1/test-with-dashes"];
}

export type Request = keyof Input;

export const endpointTags = { "post /v1/test-with-dashes": [] };

const parseRequest = (request: string) =>
  request.split(/ (.+)/, 2) as [Method, Path];

const substitute = (path: string, params: Record<string, any>) => {
  const rest = { ...params };
  for (const key in params) {
    path = path.replace(\`:\${key}\`, () => {
      delete rest[key];
      return params[key];
    });
  }
  return [path, rest] as const;
};

export type Implementation<T = unknown> = (
  method: Method,
  path: string,
  params: Record<string, any>,
  ctx?: T,
) => Promise<any>;

const defaultImplementation: Implementation = async (method, path, params) => {
  const hasBody = !["get", "delete"].includes(method);
  const searchParams = hasBody ? "" : \`?\${new URLSearchParams(params)}\`;
  const response = await fetch(
    new URL(\`\${path}\${searchParams}\`, "https://example.com"),
    {
      method: method.toUpperCase(),
      headers: hasBody ? { "Content-Type": "application/json" } : undefined,
      body: hasBody ? JSON.stringify(params) : undefined,
    },
  );
  const contentType = response.headers.get("content-type");
  if (!contentType) return;
  const isJSON = contentType.startsWith("application/json");
  return response[isJSON ? "json" : "text"]();
};

export class Client<T> {
  public constructor(
    protected readonly implementation: Implementation<T> = defaultImplementation,
  ) {}
  public provide<K extends Request>(
    request: K,
    params: Input[K],
    ctx?: T,
  ): Promise<Response[K]> {
    const [method, path] = parseRequest(request);
    return this.implementation(method, ...substitute(path, params), ctx);
  }
}

export class Subscription<
  K extends Extract<Request, \`get \${string}\`>,
  R extends Extract<PositiveResponse[K], { event: string }>,
> {
  public source: EventSource;
  public constructor(request: K, params: Input[K]) {
    const [path, rest] = substitute(parseRequest(request)[1], params);
    const searchParams = \`?\${new URLSearchParams(rest)}\`;
    this.source = new EventSource(
      new URL(\`\${path}\${searchParams}\`, "https://example.com"),
    );
  }
  public on<E extends R["event"]>(
    event: E,
    handler: (data: Extract<R, { event: E }>["data"]) => void | Promise<void>,
  ) {
    this.source.addEventListener(event, (msg) =>
      handler(JSON.parse((msg as MessageEvent).data)),
    );
    return this;
  }
}

// Usage example:
/*
const client = new Client();
client.provide("get /v1/user/retrieve", { id: "10" });
new Subscription("get /v1/events/stream", {}).on("time", (time) => {});
*/
"
`;

exports[`Integration > Feature #945: should have configurable treatment of optionals 2 1`] = `
"type SomeOf<T> = T[keyof T];

/** post /v1/test-with-dashes */
type PostV1TestWithDashesInput = {
  opt: string;
};

/** post /v1/test-with-dashes */
type PostV1TestWithDashesPositiveVariant1 = {
  status: "success";
  data: {
    similar: number;
  };
};

/** post /v1/test-with-dashes */
interface PostV1TestWithDashesPositiveResponseVariants {
  200: PostV1TestWithDashesPositiveVariant1;
}

/** post /v1/test-with-dashes */
type PostV1TestWithDashesNegativeVariant1 = {
  status: "error";
  error: {
    message: string;
  };
};

/** post /v1/test-with-dashes */
interface PostV1TestWithDashesNegativeResponseVariants {
  400: PostV1TestWithDashesNegativeVariant1;
}

export type Path = "/v1/test-with-dashes";

export type Method = "get" | "post" | "put" | "delete" | "patch";

export interface Input {
  "post /v1/test-with-dashes": PostV1TestWithDashesInput;
}

export interface PositiveResponse {
  "post /v1/test-with-dashes": SomeOf<PostV1TestWithDashesPositiveResponseVariants>;
}

export interface NegativeResponse {
  "post /v1/test-with-dashes": SomeOf<PostV1TestWithDashesNegativeResponseVariants>;
}

export interface EncodedResponse {
  "post /v1/test-with-dashes": PostV1TestWithDashesPositiveResponseVariants &
    PostV1TestWithDashesNegativeResponseVariants;
}

export interface Response {
  "post /v1/test-with-dashes":
    | PositiveResponse["post /v1/test-with-dashes"]
    | NegativeResponse["post /v1/test-with-dashes"];
}

export type Request = keyof Input;

export const endpointTags = { "post /v1/test-with-dashes": [] };

const parseRequest = (request: string) =>
  request.split(/ (.+)/, 2) as [Method, Path];

const substitute = (path: string, params: Record<string, any>) => {
  const rest = { ...params };
  for (const key in params) {
    path = path.replace(\`:\${key}\`, () => {
      delete rest[key];
      return params[key];
    });
  }
  return [path, rest] as const;
};

export type Implementation<T = unknown> = (
  method: Method,
  path: string,
  params: Record<string, any>,
  ctx?: T,
) => Promise<any>;

const defaultImplementation: Implementation = async (method, path, params) => {
  const hasBody = !["get", "delete"].includes(method);
  const searchParams = hasBody ? "" : \`?\${new URLSearchParams(params)}\`;
  const response = await fetch(
    new URL(\`\${path}\${searchParams}\`, "https://example.com"),
    {
      method: method.toUpperCase(),
      headers: hasBody ? { "Content-Type": "application/json" } : undefined,
      body: hasBody ? JSON.stringify(params) : undefined,
    },
  );
  const contentType = response.headers.get("content-type");
  if (!contentType) return;
  const isJSON = contentType.startsWith("application/json");
  return response[isJSON ? "json" : "text"]();
};

export class Client<T> {
  public constructor(
    protected readonly implementation: Implementation<T> = defaultImplementation,
  ) {}
  public provide<K extends Request>(
    request: K,
    params: Input[K],
    ctx?: T,
  ): Promise<Response[K]> {
    const [method, path] = parseRequest(request);
    return this.implementation(method, ...substitute(path, params), ctx);
  }
}

export class Subscription<
  K extends Extract<Request, \`get \${string}\`>,
  R extends Extract<PositiveResponse[K], { event: string }>,
> {
  public source: EventSource;
  public constructor(request: K, params: Input[K]) {
    const [path, rest] = substitute(parseRequest(request)[1], params);
    const searchParams = \`?\${new URLSearchParams(rest)}\`;
    this.source = new EventSource(
      new URL(\`\${path}\${searchParams}\`, "https://example.com"),
    );
  }
  public on<E extends R["event"]>(
    event: E,
    handler: (data: Extract<R, { event: E }>["data"]) => void | Promise<void>,
  ) {
    this.source.addEventListener(event, (msg) =>
      handler(JSON.parse((msg as MessageEvent).data)),
    );
    return this;
  }
}

// Usage example:
/*
const client = new Client();
client.provide("get /v1/user/retrieve", { id: "10" });
new Subscription("get /v1/events/stream", {}).on("time", (time) => {});
*/
"
`;

exports[`Integration > Feature #1470: Custom brands > should by handled accordingly 1`] = `
"type SomeOf<T> = T[keyof T];

/** post /v1/custom */
type PostV1CustomInput = {
  string: boolean;
  regular: string;
};

/** post /v1/custom */
type PostV1CustomPositiveVariant1 = {
  status: "success";
  data: {
    number: boolean;
  };
};

/** post /v1/custom */
interface PostV1CustomPositiveResponseVariants {
  200: PostV1CustomPositiveVariant1;
}

/** post /v1/custom */
type PostV1CustomNegativeVariant1 = {
  status: "error";
  error: {
    message: string;
  };
};

/** post /v1/custom */
interface PostV1CustomNegativeResponseVariants {
  400: PostV1CustomNegativeVariant1;
}

export type Path = "/v1/custom";

export type Method = "get" | "post" | "put" | "delete" | "patch";

export interface Input {
  "post /v1/custom": PostV1CustomInput;
}

export interface PositiveResponse {
  "post /v1/custom": SomeOf<PostV1CustomPositiveResponseVariants>;
}

export interface NegativeResponse {
  "post /v1/custom": SomeOf<PostV1CustomNegativeResponseVariants>;
}

export interface EncodedResponse {
  "post /v1/custom": PostV1CustomPositiveResponseVariants &
    PostV1CustomNegativeResponseVariants;
}

export interface Response {
  "post /v1/custom":
    | PositiveResponse["post /v1/custom"]
    | NegativeResponse["post /v1/custom"];
}

export type Request = keyof Input;
"
`;

exports[`Integration > Should support multiple response schemas depending on status code 1`] = `
"type SomeOf<T> = T[keyof T];

/** post /v1/mtpl */
type PostV1MtplInput = {
  test: number;
};

/** post /v1/mtpl */
type PostV1MtplPositiveVariant1 = {
  status: "ok";
  data: {
    payload: string;
  };
};

/** post /v1/mtpl */
type PostV1MtplPositiveVariant2 = {
  status: "kinda";
  data: {
    payload: string;
  };
};

/** post /v1/mtpl */
interface PostV1MtplPositiveResponseVariants {
  200: PostV1MtplPositiveVariant1;
  201: PostV1MtplPositiveVariant2;
}

/** post /v1/mtpl */
type PostV1MtplNegativeVariant1 = "error";

/** post /v1/mtpl */
type PostV1MtplNegativeVariant2 = "failure";

/** post /v1/mtpl */
interface PostV1MtplNegativeResponseVariants {
  400: PostV1MtplNegativeVariant1;
  500: PostV1MtplNegativeVariant2;
}

export type Path = "/v1/mtpl";

export type Method = "get" | "post" | "put" | "delete" | "patch";

export interface Input {
  "post /v1/mtpl": PostV1MtplInput;
}

export interface PositiveResponse {
  "post /v1/mtpl": SomeOf<PostV1MtplPositiveResponseVariants>;
}

export interface NegativeResponse {
  "post /v1/mtpl": SomeOf<PostV1MtplNegativeResponseVariants>;
}

export interface EncodedResponse {
  "post /v1/mtpl": PostV1MtplPositiveResponseVariants &
    PostV1MtplNegativeResponseVariants;
}

export interface Response {
  "post /v1/mtpl":
    | PositiveResponse["post /v1/mtpl"]
    | NegativeResponse["post /v1/mtpl"];
}

export type Request = keyof Input;
"
`;

exports[`Integration > Should support types variant and handle recursive schemas 0 1`] = `
"type Type1 = {
    name: string;
    features: Type1;
};

type SomeOf<T> = T[keyof T];

/** post /v1/test */
type PostV1TestInput = {
    features: Type1;
};

/** post /v1/test */
type PostV1TestPositiveVariant1 = {
    status: "success";
    data: {};
};

/** post /v1/test */
interface PostV1TestPositiveResponseVariants {
    200: PostV1TestPositiveVariant1;
}

/** post /v1/test */
type PostV1TestNegativeVariant1 = {
    status: "error";
    error: {
        message: string;
    };
};

/** post /v1/test */
interface PostV1TestNegativeResponseVariants {
    400: PostV1TestNegativeVariant1;
}

export type Path = "/v1/test";

export type Method = "get" | "post" | "put" | "delete" | "patch";

export interface Input {
    /** @deprecated */
    "post /v1/test": PostV1TestInput;
}

export interface PositiveResponse {
    /** @deprecated */
    "post /v1/test": SomeOf<PostV1TestPositiveResponseVariants>;
}

export interface NegativeResponse {
    /** @deprecated */
    "post /v1/test": SomeOf<PostV1TestNegativeResponseVariants>;
}

export interface EncodedResponse {
    /** @deprecated */
    "post /v1/test": PostV1TestPositiveResponseVariants & PostV1TestNegativeResponseVariants;
}

export interface Response {
    /** @deprecated */
    "post /v1/test": PositiveResponse["post /v1/test"] | NegativeResponse["post /v1/test"];
}

export type Request = keyof Input;"
`;

exports[`Integration > Should support types variant and handle recursive schemas 1 1`] = `
"type Type1 = {
    name: string;
    features: Type1;
};

type SomeOf<T> = T[keyof T];

/** post /v1/test */
type PostV1TestInput = {
    features: Type1;
};

/** post /v1/test */
type PostV1TestPositiveVariant1 = {
    status: "success";
    data: {};
};

/** post /v1/test */
interface PostV1TestPositiveResponseVariants {
    200: PostV1TestPositiveVariant1;
}

/** post /v1/test */
type PostV1TestNegativeVariant1 = {
    status: "error";
    error: {
        message: string;
    };
};

/** post /v1/test */
interface PostV1TestNegativeResponseVariants {
    400: PostV1TestNegativeVariant1;
}

export type Path = "/v1/test";

export type Method = "get" | "post" | "put" | "delete" | "patch";

export interface Input {
    /** @deprecated */
    "post /v1/test": PostV1TestInput;
}

export interface PositiveResponse {
    /** @deprecated */
    "post /v1/test": SomeOf<PostV1TestPositiveResponseVariants>;
}

export interface NegativeResponse {
    /** @deprecated */
    "post /v1/test": SomeOf<PostV1TestNegativeResponseVariants>;
}

export interface EncodedResponse {
    /** @deprecated */
    "post /v1/test": PostV1TestPositiveResponseVariants & PostV1TestNegativeResponseVariants;
}

export interface Response {
    /** @deprecated */
    "post /v1/test": PositiveResponse["post /v1/test"] | NegativeResponse["post /v1/test"];
}

export type Request = keyof Input;"
`;

exports[`Integration > Should treat optionals the same way as z.infer() by default 1`] = `
"type SomeOf<T> = T[keyof T];

/** post /v1/test-with-dashes */
type PostV1TestWithDashesInput = {
  opt?: string | undefined;
};

/** post /v1/test-with-dashes */
type PostV1TestWithDashesPositiveVariant1 = {
  status: "success";
  data: {
    similar?: number | undefined;
  };
};

/** post /v1/test-with-dashes */
interface PostV1TestWithDashesPositiveResponseVariants {
  200: PostV1TestWithDashesPositiveVariant1;
}

/** post /v1/test-with-dashes */
type PostV1TestWithDashesNegativeVariant1 = {
  status: "error";
  error: {
    message: string;
  };
};

/** post /v1/test-with-dashes */
interface PostV1TestWithDashesNegativeResponseVariants {
  400: PostV1TestWithDashesNegativeVariant1;
}

export type Path = "/v1/test-with-dashes";

export type Method = "get" | "post" | "put" | "delete" | "patch";

export interface Input {
  "post /v1/test-with-dashes": PostV1TestWithDashesInput;
}

export interface PositiveResponse {
  "post /v1/test-with-dashes": SomeOf<PostV1TestWithDashesPositiveResponseVariants>;
}

export interface NegativeResponse {
  "post /v1/test-with-dashes": SomeOf<PostV1TestWithDashesNegativeResponseVariants>;
}

export interface EncodedResponse {
  "post /v1/test-with-dashes": PostV1TestWithDashesPositiveResponseVariants &
    PostV1TestWithDashesNegativeResponseVariants;
}

export interface Response {
  "post /v1/test-with-dashes":
    | PositiveResponse["post /v1/test-with-dashes"]
    | NegativeResponse["post /v1/test-with-dashes"];
}

export type Request = keyof Input;

export const endpointTags = { "post /v1/test-with-dashes": [] };

const parseRequest = (request: string) =>
  request.split(/ (.+)/, 2) as [Method, Path];

const substitute = (path: string, params: Record<string, any>) => {
  const rest = { ...params };
  for (const key in params) {
    path = path.replace(\`:\${key}\`, () => {
      delete rest[key];
      return params[key];
    });
  }
  return [path, rest] as const;
};

export type Implementation<T = unknown> = (
  method: Method,
  path: string,
  params: Record<string, any>,
  ctx?: T,
) => Promise<any>;

const defaultImplementation: Implementation = async (method, path, params) => {
  const hasBody = !["get", "delete"].includes(method);
  const searchParams = hasBody ? "" : \`?\${new URLSearchParams(params)}\`;
  const response = await fetch(
    new URL(\`\${path}\${searchParams}\`, "https://example.com"),
    {
      method: method.toUpperCase(),
      headers: hasBody ? { "Content-Type": "application/json" } : undefined,
      body: hasBody ? JSON.stringify(params) : undefined,
    },
  );
  const contentType = response.headers.get("content-type");
  if (!contentType) return;
  const isJSON = contentType.startsWith("application/json");
  return response[isJSON ? "json" : "text"]();
};

export class Client<T> {
  public constructor(
    protected readonly implementation: Implementation<T> = defaultImplementation,
  ) {}
  public provide<K extends Request>(
    request: K,
    params: Input[K],
    ctx?: T,
  ): Promise<Response[K]> {
    const [method, path] = parseRequest(request);
    return this.implementation(method, ...substitute(path, params), ctx);
  }
}

export class Subscription<
  K extends Extract<Request, \`get \${string}\`>,
  R extends Extract<PositiveResponse[K], { event: string }>,
> {
  public source: EventSource;
  public constructor(request: K, params: Input[K]) {
    const [path, rest] = substitute(parseRequest(request)[1], params);
    const searchParams = \`?\${new URLSearchParams(rest)}\`;
    this.source = new EventSource(
      new URL(\`\${path}\${searchParams}\`, "https://example.com"),
    );
  }
  public on<E extends R["event"]>(
    event: E,
    handler: (data: Extract<R, { event: E }>["data"]) => void | Promise<void>,
  ) {
    this.source.addEventListener(event, (msg) =>
      handler(JSON.parse((msg as MessageEvent).data)),
    );
    return this;
  }
}

// Usage example:
/*
const client = new Client();
client.provide("get /v1/user/retrieve", { id: "10" });
new Subscription("get /v1/events/stream", {}).on("time", (time) => {});
*/
"
`;
